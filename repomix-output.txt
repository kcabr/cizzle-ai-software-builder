This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitattributes
.github/workflows/sdk_generation.yaml
.github/workflows/sdk_publish.yaml
.gitignore
.speakeasy/gen.lock
.speakeasy/gen.yaml
.speakeasy/workflow.lock
.speakeasy/workflow.yaml
Clerk.BackendAPI.sln
CONTRIBUTING.md
docs/Models/Components/Actor.md
docs/Models/Components/ActorToken.md
docs/Models/Components/ActorTokenActor.md
docs/Models/Components/ActorTokenObject.md
docs/Models/Components/ActorTokenStatus.md
docs/Models/Components/Admin.md
docs/Models/Components/AdminVerificationPhoneNumberStatus.md
docs/Models/Components/AdminVerificationStatus.md
docs/Models/Components/AdminVerificationStrategy.md
docs/Models/Components/AdminVerificationWeb3WalletStatus.md
docs/Models/Components/AdminVerificationWeb3WalletStrategy.md
docs/Models/Components/AllowlistIdentifier.md
docs/Models/Components/AllowlistIdentifierObject.md
docs/Models/Components/BlocklistIdentifier.md
docs/Models/Components/BlocklistIdentifierIdentifierType.md
docs/Models/Components/BlocklistIdentifierObject.md
docs/Models/Components/BlocklistIdentifiers.md
docs/Models/Components/Claims.md
docs/Models/Components/ClerkError.md
docs/Models/Components/ClerkErrorErrorMeta.md
docs/Models/Components/Client.md
docs/Models/Components/CNameTarget.md
docs/Models/Components/DeletedObject.md
docs/Models/Components/Domain.md
docs/Models/Components/DomainObject.md
docs/Models/Components/Domains.md
docs/Models/Components/DomainsEnrollmentModes.md
docs/Models/Components/EmailAddress.md
docs/Models/Components/EmailAddressObject.md
docs/Models/Components/EnrollmentMode.md
docs/Models/Components/Error.md
docs/Models/Components/ErrorClerkError.md
docs/Models/Components/ErrorMeta.md
docs/Models/Components/ExternalAccount.md
docs/Models/Components/ExternalAccounts.md
docs/Models/Components/FromOAuth.md
docs/Models/Components/FromOAuthVerificationStatus.md
docs/Models/Components/HTTPMetadata.md
docs/Models/Components/IdentificationLink.md
docs/Models/Components/IdentifierType.md
docs/Models/Components/Instance.md
docs/Models/Components/InstanceObject.md
docs/Models/Components/InstanceRestrictions.md
docs/Models/Components/InstanceRestrictionsObject.md
docs/Models/Components/InstanceSettings.md
docs/Models/Components/InstanceSettingsObject.md
docs/Models/Components/Invitation.md
docs/Models/Components/InvitationObject.md
docs/Models/Components/InvitationRevoked.md
docs/Models/Components/InvitationRevokedObject.md
docs/Models/Components/InvitationRevokedStatus.md
docs/Models/Components/InvitationStatus.md
docs/Models/Components/Jwks.md
docs/Models/Components/JWTTemplate.md
docs/Models/Components/JWTTemplateObject.md
docs/Models/Components/Keys.md
docs/Models/Components/Meta.md
docs/Models/Components/NextAction.md
docs/Models/Components/Nonce.md
docs/Models/Components/OAuthApplication.md
docs/Models/Components/OAuthApplicationObject.md
docs/Models/Components/OAuthApplications.md
docs/Models/Components/OAuthApplicationWithSecret.md
docs/Models/Components/OAuthApplicationWithSecretObject.md
docs/Models/Components/Object.md
docs/Models/Components/Organization.md
docs/Models/Components/OrganizationDomain.md
docs/Models/Components/OrganizationDomainObject.md
docs/Models/Components/OrganizationDomains.md
docs/Models/Components/OrganizationDomainStatus.md
docs/Models/Components/OrganizationDomainVerification.md
docs/Models/Components/OrganizationInvitation.md
docs/Models/Components/OrganizationInvitationObject.md
docs/Models/Components/OrganizationInvitationPublicOrganizationData.md
docs/Models/Components/OrganizationInvitations.md
docs/Models/Components/OrganizationInvitationsWithPublicOrganizationData.md
docs/Models/Components/OrganizationInvitationWithPublicOrganizationData.md
docs/Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.md
docs/Models/Components/OrganizationMembership.md
docs/Models/Components/OrganizationMembershipObject.md
docs/Models/Components/OrganizationMembershipOrganization.md
docs/Models/Components/OrganizationMembershipOrganizationObject.md
docs/Models/Components/OrganizationMembershipPublicUserData.md
docs/Models/Components/OrganizationMemberships.md
docs/Models/Components/OrganizationObject.md
docs/Models/Components/Organizations.md
docs/Models/Components/OrganizationSettings.md
docs/Models/Components/OrganizationSettingsObject.md
docs/Models/Components/OrganizationWithLogo.md
docs/Models/Components/OrganizationWithLogoObject.md
docs/Models/Components/Otp.md
docs/Models/Components/OTPVerificationStatus.md
docs/Models/Components/OTPVerificationStrategy.md
docs/Models/Components/Passkey.md
docs/Models/Components/PasskeyVerificationStatus.md
docs/Models/Components/PasskeyVerificationStrategy.md
docs/Models/Components/PhoneNumber.md
docs/Models/Components/PhoneNumberObject.md
docs/Models/Components/PhoneNumberVerification.md
docs/Models/Components/ProxyCheck.md
docs/Models/Components/ProxyCheckObject.md
docs/Models/Components/RedirectURL.md
docs/Models/Components/RedirectURLObject.md
docs/Models/Components/Saml.md
docs/Models/Components/SAMLAccount.md
docs/Models/Components/SAMLAccountObject.md
docs/Models/Components/SAMLAccountVerification.md
docs/Models/Components/SamlConnection.md
docs/Models/Components/SAMLConnectionAttributeMapping.md
docs/Models/Components/SAMLConnections.md
docs/Models/Components/SAMLConnectionSAMLConnection.md
docs/Models/Components/SAMLErrorClerkError.md
docs/Models/Components/SAMLVerificationStatus.md
docs/Models/Components/SAMLVerificationStrategy.md
docs/Models/Components/SchemasPasskey.md
docs/Models/Components/SchemasPasskeyObject.md
docs/Models/Components/SchemasPasskeyVerification.md
docs/Models/Components/SchemasSAMLConnection.md
docs/Models/Components/SchemasSAMLConnectionObject.md
docs/Models/Components/Security.md
docs/Models/Components/Session.md
docs/Models/Components/SessionActivityResponse.md
docs/Models/Components/SessionObject.md
docs/Models/Components/SignInToken.md
docs/Models/Components/SignInTokenObject.md
docs/Models/Components/SignInTokenStatus.md
docs/Models/Components/SignUp.md
docs/Models/Components/SignUpExternalAccount.md
docs/Models/Components/SignUpObject.md
docs/Models/Components/SignUpStatus.md
docs/Models/Components/SignUpVerification.md
docs/Models/Components/SignUpVerifications.md
docs/Models/Components/Status.md
docs/Models/Components/Strategy.md
docs/Models/Components/SvixURL.md
docs/Models/Components/Template.md
docs/Models/Components/TemplateObject.md
docs/Models/Components/TestingToken.md
docs/Models/Components/TestingTokenObject.md
docs/Models/Components/Ticket.md
docs/Models/Components/TicketVerificationSAMLAccountStatus.md
docs/Models/Components/TicketVerificationSAMLAccountStrategy.md
docs/Models/Components/TicketVerificationStatus.md
docs/Models/Components/TicketVerificationStrategy.md
docs/Models/Components/TotalCount.md
docs/Models/Components/TotalCountObject.md
docs/Models/Components/User.md
docs/Models/Components/UserObject.md
docs/Models/Components/Verification.md
docs/Models/Components/VerificationAdmin.md
docs/Models/Components/VerificationError.md
docs/Models/Components/VerificationOTP.md
docs/Models/Components/VerificationStatus.md
docs/Models/Components/VerificationStrategy.md
docs/Models/Components/VerificationTicket.md
docs/Models/Components/WaitlistEntries.md
docs/Models/Components/WaitlistEntry.md
docs/Models/Components/WaitlistEntryInvitation.md
docs/Models/Components/WaitlistEntryInvitationObject.md
docs/Models/Components/WaitlistEntryInvitationStatus.md
docs/Models/Components/WaitlistEntryObject.md
docs/Models/Components/WaitlistEntryStatus.md
docs/Models/Components/Web3Signature.md
docs/Models/Components/Web3SignatureVerificationStatus.md
docs/Models/Components/Web3SignatureVerificationStrategy.md
docs/Models/Components/Web3Wallet.md
docs/Models/Components/Web3WalletObject.md
docs/Models/Components/Web3WalletVerification.md
docs/Models/Components/Web3WalletVerificationAdmin.md
docs/Models/Errors/ClerkErrors.md
docs/Models/Errors/Meta.md
docs/Models/Operations/Actor.md
docs/Models/Operations/AddDomainRequestBody.md
docs/Models/Operations/AddDomainResponse.md
docs/Models/Operations/AttributeMapping.md
docs/Models/Operations/BanUserRequest.md
docs/Models/Operations/BanUserResponse.md
docs/Models/Operations/ChangeProductionInstanceDomainRequestBody.md
docs/Models/Operations/ChangeProductionInstanceDomainResponse.md
docs/Models/Operations/Claims.md
docs/Models/Operations/CodeType.md
docs/Models/Operations/CreateActorTokenRequestBody.md
docs/Models/Operations/CreateActorTokenResponse.md
docs/Models/Operations/CreateAllowlistIdentifierRequestBody.md
docs/Models/Operations/CreateAllowlistIdentifierResponse.md
docs/Models/Operations/CreateBlocklistIdentifierRequestBody.md
docs/Models/Operations/CreateBlocklistIdentifierResponse.md
docs/Models/Operations/CreateBulkInvitationsResponse.md
docs/Models/Operations/CreateBulkInvitationsTemplateSlug.md
docs/Models/Operations/CreateEmailAddressRequestBody.md
docs/Models/Operations/CreateEmailAddressResponse.md
docs/Models/Operations/CreateInvitationRequestBody.md
docs/Models/Operations/CreateInvitationResponse.md
docs/Models/Operations/CreateJWTTemplateRequestBody.md
docs/Models/Operations/CreateJWTTemplateResponse.md
docs/Models/Operations/CreateOAuthApplicationRequestBody.md
docs/Models/Operations/CreateOAuthApplicationResponse.md
docs/Models/Operations/CreateOrganizationDomainRequest.md
docs/Models/Operations/CreateOrganizationDomainRequestBody.md
docs/Models/Operations/CreateOrganizationDomainResponse.md
docs/Models/Operations/CreateOrganizationInvitationBulkRequest.md
docs/Models/Operations/CreateOrganizationInvitationBulkRequestBody.md
docs/Models/Operations/CreateOrganizationInvitationBulkResponse.md
docs/Models/Operations/CreateOrganizationInvitationRequest.md
docs/Models/Operations/CreateOrganizationInvitationRequestBody.md
docs/Models/Operations/CreateOrganizationInvitationResponse.md
docs/Models/Operations/CreateOrganizationMembershipRequest.md
docs/Models/Operations/CreateOrganizationMembershipRequestBody.md
docs/Models/Operations/CreateOrganizationMembershipResponse.md
docs/Models/Operations/CreateOrganizationRequestBody.md
docs/Models/Operations/CreateOrganizationResponse.md
docs/Models/Operations/CreatePhoneNumberRequestBody.md
docs/Models/Operations/CreatePhoneNumberResponse.md
docs/Models/Operations/CreateRedirectURLRequestBody.md
docs/Models/Operations/CreateRedirectURLResponse.md
docs/Models/Operations/CreateSAMLConnectionRequestBody.md
docs/Models/Operations/CreateSAMLConnectionResponse.md
docs/Models/Operations/CreateSessionRequestBody.md
docs/Models/Operations/CreateSessionResponse.md
docs/Models/Operations/CreateSessionTokenFromTemplateObject.md
docs/Models/Operations/CreateSessionTokenFromTemplateRequest.md
docs/Models/Operations/CreateSessionTokenFromTemplateRequestBody.md
docs/Models/Operations/CreateSessionTokenFromTemplateResponse.md
docs/Models/Operations/CreateSessionTokenFromTemplateResponseBody.md
docs/Models/Operations/CreateSessionTokenRequest.md
docs/Models/Operations/CreateSessionTokenRequestBody.md
docs/Models/Operations/CreateSessionTokenResponse.md
docs/Models/Operations/CreateSessionTokenResponseBody.md
docs/Models/Operations/CreateSignInTokenRequestBody.md
docs/Models/Operations/CreateSignInTokenResponse.md
docs/Models/Operations/CreateSvixAppResponse.md
docs/Models/Operations/CreateTestingTokenResponse.md
docs/Models/Operations/CreateUserRequestBody.md
docs/Models/Operations/CreateUserResponse.md
docs/Models/Operations/CreateWaitlistEntryRequestBody.md
docs/Models/Operations/CreateWaitlistEntryResponse.md
docs/Models/Operations/DeleteAllowlistIdentifierRequest.md
docs/Models/Operations/DeleteAllowlistIdentifierResponse.md
docs/Models/Operations/DeleteBackupCodeRequest.md
docs/Models/Operations/DeleteBackupCodeResponse.md
docs/Models/Operations/DeleteBackupCodeResponseBody.md
docs/Models/Operations/DeleteBlocklistIdentifierRequest.md
docs/Models/Operations/DeleteBlocklistIdentifierResponse.md
docs/Models/Operations/DeleteDomainRequest.md
docs/Models/Operations/DeleteDomainResponse.md
docs/Models/Operations/DeleteEmailAddressRequest.md
docs/Models/Operations/DeleteEmailAddressResponse.md
docs/Models/Operations/DeleteExternalAccountRequest.md
docs/Models/Operations/DeleteExternalAccountResponse.md
docs/Models/Operations/DeleteJWTTemplateRequest.md
docs/Models/Operations/DeleteJWTTemplateResponse.md
docs/Models/Operations/DeleteOAuthApplicationRequest.md
docs/Models/Operations/DeleteOAuthApplicationResponse.md
docs/Models/Operations/DeleteOrganizationDomainRequest.md
docs/Models/Operations/DeleteOrganizationDomainResponse.md
docs/Models/Operations/DeleteOrganizationLogoRequest.md
docs/Models/Operations/DeleteOrganizationLogoResponse.md
docs/Models/Operations/DeleteOrganizationMembershipRequest.md
docs/Models/Operations/DeleteOrganizationMembershipResponse.md
docs/Models/Operations/DeleteOrganizationRequest.md
docs/Models/Operations/DeleteOrganizationResponse.md
docs/Models/Operations/DeletePhoneNumberRequest.md
docs/Models/Operations/DeletePhoneNumberResponse.md
docs/Models/Operations/DeleteRedirectURLRequest.md
docs/Models/Operations/DeleteRedirectURLResponse.md
docs/Models/Operations/DeleteSAMLConnectionRequest.md
docs/Models/Operations/DeleteSAMLConnectionResponse.md
docs/Models/Operations/DeleteSvixAppResponse.md
docs/Models/Operations/DeleteTOTPRequest.md
docs/Models/Operations/DeleteTOTPResponse.md
docs/Models/Operations/DeleteTOTPResponseBody.md
docs/Models/Operations/DeleteUserProfileImageRequest.md
docs/Models/Operations/DeleteUserProfileImageResponse.md
docs/Models/Operations/DeleteUserRequest.md
docs/Models/Operations/DeleteUserResponse.md
docs/Models/Operations/DisableMFARequest.md
docs/Models/Operations/DisableMFAResponse.md
docs/Models/Operations/DisableMFAResponseBody.md
docs/Models/Operations/File.md
docs/Models/Operations/GenerateSvixAuthURLResponse.md
docs/Models/Operations/GetClientListRequest.md
docs/Models/Operations/GetClientListResponse.md
docs/Models/Operations/GetClientRequest.md
docs/Models/Operations/GetClientResponse.md
docs/Models/Operations/GetEmailAddressRequest.md
docs/Models/Operations/GetEmailAddressResponse.md
docs/Models/Operations/GetInstanceResponse.md
docs/Models/Operations/GetJWKSResponse.md
docs/Models/Operations/GetJWTTemplateRequest.md
docs/Models/Operations/GetJWTTemplateResponse.md
docs/Models/Operations/GetOAuthAccessTokenRequest.md
docs/Models/Operations/GetOAuthAccessTokenResponse.md
docs/Models/Operations/GetOAuthApplicationRequest.md
docs/Models/Operations/GetOAuthApplicationResponse.md
docs/Models/Operations/GetOrganizationInvitationRequest.md
docs/Models/Operations/GetOrganizationInvitationResponse.md
docs/Models/Operations/GetOrganizationRequest.md
docs/Models/Operations/GetOrganizationResponse.md
docs/Models/Operations/GetPhoneNumberRequest.md
docs/Models/Operations/GetPhoneNumberResponse.md
docs/Models/Operations/GetPublicInterstitialRequest.md
docs/Models/Operations/GetPublicInterstitialResponse.md
docs/Models/Operations/GetRedirectURLRequest.md
docs/Models/Operations/GetRedirectURLResponse.md
docs/Models/Operations/GetSAMLConnectionRequest.md
docs/Models/Operations/GetSAMLConnectionResponse.md
docs/Models/Operations/GetSessionListRequest.md
docs/Models/Operations/GetSessionListResponse.md
docs/Models/Operations/GetSessionRequest.md
docs/Models/Operations/GetSessionResponse.md
docs/Models/Operations/GetSignUpRequest.md
docs/Models/Operations/GetSignUpResponse.md
docs/Models/Operations/GetTemplateListRequest.md
docs/Models/Operations/GetTemplateListResponse.md
docs/Models/Operations/GetTemplateRequest.md
docs/Models/Operations/GetTemplateResponse.md
docs/Models/Operations/GetUserListRequest.md
docs/Models/Operations/GetUserListResponse.md
docs/Models/Operations/GetUserRequest.md
docs/Models/Operations/GetUserResponse.md
docs/Models/Operations/GetUsersCountRequest.md
docs/Models/Operations/GetUsersCountResponse.md
docs/Models/Operations/InstanceGetOrganizationMembershipsRequest.md
docs/Models/Operations/InstanceGetOrganizationMembershipsResponse.md
docs/Models/Operations/ListAllowlistIdentifiersRequest.md
docs/Models/Operations/ListAllowlistIdentifiersResponse.md
docs/Models/Operations/ListBlocklistIdentifiersResponse.md
docs/Models/Operations/ListDomainsResponse.md
docs/Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.md
docs/Models/Operations/ListInstanceOrganizationInvitationsRequest.md
docs/Models/Operations/ListInstanceOrganizationInvitationsResponse.md
docs/Models/Operations/ListInvitationsQueryParamStatus.md
docs/Models/Operations/ListInvitationsRequest.md
docs/Models/Operations/ListInvitationsResponse.md
docs/Models/Operations/ListJWTTemplatesRequest.md
docs/Models/Operations/ListJWTTemplatesResponse.md
docs/Models/Operations/ListOAuthApplicationsRequest.md
docs/Models/Operations/ListOAuthApplicationsResponse.md
docs/Models/Operations/ListOrganizationDomainsRequest.md
docs/Models/Operations/ListOrganizationDomainsResponse.md
docs/Models/Operations/ListOrganizationInvitationsQueryParamStatus.md
docs/Models/Operations/ListOrganizationInvitationsRequest.md
docs/Models/Operations/ListOrganizationInvitationsResponse.md
docs/Models/Operations/ListOrganizationMembershipsRequest.md
docs/Models/Operations/ListOrganizationMembershipsResponse.md
docs/Models/Operations/ListOrganizationsRequest.md
docs/Models/Operations/ListOrganizationsResponse.md
docs/Models/Operations/ListPendingOrganizationInvitationsRequest.md
docs/Models/Operations/ListPendingOrganizationInvitationsResponse.md
docs/Models/Operations/ListRedirectURLsRequest.md
docs/Models/Operations/ListRedirectURLsResponse.md
docs/Models/Operations/ListSAMLConnectionsRequest.md
docs/Models/Operations/ListSAMLConnectionsResponse.md
docs/Models/Operations/ListWaitlistEntriesQueryParamStatus.md
docs/Models/Operations/ListWaitlistEntriesRequest.md
docs/Models/Operations/ListWaitlistEntriesResponse.md
docs/Models/Operations/LockUserRequest.md
docs/Models/Operations/LockUserResponse.md
docs/Models/Operations/MergeOrganizationMetadataRequest.md
docs/Models/Operations/MergeOrganizationMetadataRequestBody.md
docs/Models/Operations/MergeOrganizationMetadataResponse.md
docs/Models/Operations/Object.md
docs/Models/Operations/PathParamTemplateType.md
docs/Models/Operations/PreviewTemplateRequest.md
docs/Models/Operations/PreviewTemplateRequestBody.md
docs/Models/Operations/PreviewTemplateResponse.md
docs/Models/Operations/PreviewTemplateResponseBody.md
docs/Models/Operations/Provider.md
docs/Models/Operations/QueryParamStatus.md
docs/Models/Operations/RequestBody.md
docs/Models/Operations/ResponseBody.md
docs/Models/Operations/RevertTemplatePathParamTemplateType.md
docs/Models/Operations/RevertTemplateRequest.md
docs/Models/Operations/RevertTemplateResponse.md
docs/Models/Operations/RevokeActorTokenRequest.md
docs/Models/Operations/RevokeActorTokenResponse.md
docs/Models/Operations/RevokeInvitationRequest.md
docs/Models/Operations/RevokeInvitationResponse.md
docs/Models/Operations/RevokeOrganizationInvitationRequest.md
docs/Models/Operations/RevokeOrganizationInvitationRequestBody.md
docs/Models/Operations/RevokeOrganizationInvitationResponse.md
docs/Models/Operations/RevokeSessionRequest.md
docs/Models/Operations/RevokeSessionResponse.md
docs/Models/Operations/RevokeSignInTokenRequest.md
docs/Models/Operations/RevokeSignInTokenResponse.md
docs/Models/Operations/RotateOAuthApplicationSecretRequest.md
docs/Models/Operations/RotateOAuthApplicationSecretResponse.md
docs/Models/Operations/SetUserProfileImageRequest.md
docs/Models/Operations/SetUserProfileImageRequestBody.md
docs/Models/Operations/SetUserProfileImageResponse.md
docs/Models/Operations/Status.md
docs/Models/Operations/TemplateSlug.md
docs/Models/Operations/TemplateType.md
docs/Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.md
docs/Models/Operations/ToggleTemplateDeliveryRequest.md
docs/Models/Operations/ToggleTemplateDeliveryRequestBody.md
docs/Models/Operations/ToggleTemplateDeliveryResponse.md
docs/Models/Operations/UnbanUserRequest.md
docs/Models/Operations/UnbanUserResponse.md
docs/Models/Operations/UnlockUserRequest.md
docs/Models/Operations/UnlockUserResponse.md
docs/Models/Operations/UpdateDomainRequest.md
docs/Models/Operations/UpdateDomainRequestBody.md
docs/Models/Operations/UpdateDomainResponse.md
docs/Models/Operations/UpdateEmailAddressRequest.md
docs/Models/Operations/UpdateEmailAddressRequestBody.md
docs/Models/Operations/UpdateEmailAddressResponse.md
docs/Models/Operations/UpdateInstanceAuthConfigRequestBody.md
docs/Models/Operations/UpdateInstanceAuthConfigResponse.md
docs/Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.md
docs/Models/Operations/UpdateInstanceOrganizationSettingsResponse.md
docs/Models/Operations/UpdateInstanceRequestBody.md
docs/Models/Operations/UpdateInstanceResponse.md
docs/Models/Operations/UpdateInstanceRestrictionsRequestBody.md
docs/Models/Operations/UpdateInstanceRestrictionsResponse.md
docs/Models/Operations/UpdateJWTTemplateClaims.md
docs/Models/Operations/UpdateJWTTemplateRequest.md
docs/Models/Operations/UpdateJWTTemplateRequestBody.md
docs/Models/Operations/UpdateJWTTemplateResponse.md
docs/Models/Operations/UpdateOAuthApplicationRequest.md
docs/Models/Operations/UpdateOAuthApplicationRequestBody.md
docs/Models/Operations/UpdateOAuthApplicationResponse.md
docs/Models/Operations/UpdateOrganizationDomainRequest.md
docs/Models/Operations/UpdateOrganizationDomainRequestBody.md
docs/Models/Operations/UpdateOrganizationDomainResponse.md
docs/Models/Operations/UpdateOrganizationMembershipMetadataRequest.md
docs/Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.md
docs/Models/Operations/UpdateOrganizationMembershipMetadataResponse.md
docs/Models/Operations/UpdateOrganizationMembershipRequest.md
docs/Models/Operations/UpdateOrganizationMembershipRequestBody.md
docs/Models/Operations/UpdateOrganizationMembershipResponse.md
docs/Models/Operations/UpdateOrganizationRequest.md
docs/Models/Operations/UpdateOrganizationRequestBody.md
docs/Models/Operations/UpdateOrganizationResponse.md
docs/Models/Operations/UpdatePhoneNumberRequest.md
docs/Models/Operations/UpdatePhoneNumberRequestBody.md
docs/Models/Operations/UpdatePhoneNumberResponse.md
docs/Models/Operations/UpdateProductionInstanceDomainRequestBody.md
docs/Models/Operations/UpdateProductionInstanceDomainResponse.md
docs/Models/Operations/UpdateSAMLConnectionAttributeMapping.md
docs/Models/Operations/UpdateSAMLConnectionRequest.md
docs/Models/Operations/UpdateSAMLConnectionRequestBody.md
docs/Models/Operations/UpdateSAMLConnectionResponse.md
docs/Models/Operations/UpdateSignUpRequest.md
docs/Models/Operations/UpdateSignUpRequestBody.md
docs/Models/Operations/UpdateSignUpResponse.md
docs/Models/Operations/UpdateUserMetadataRequest.md
docs/Models/Operations/UpdateUserMetadataRequestBody.md
docs/Models/Operations/UpdateUserMetadataResponse.md
docs/Models/Operations/UpdateUserRequest.md
docs/Models/Operations/UpdateUserRequestBody.md
docs/Models/Operations/UpdateUserResponse.md
docs/Models/Operations/UploadOrganizationLogoFile.md
docs/Models/Operations/UploadOrganizationLogoRequest.md
docs/Models/Operations/UploadOrganizationLogoRequestBody.md
docs/Models/Operations/UploadOrganizationLogoResponse.md
docs/Models/Operations/UpsertTemplatePathParamTemplateType.md
docs/Models/Operations/UpsertTemplateRequest.md
docs/Models/Operations/UpsertTemplateRequestBody.md
docs/Models/Operations/UpsertTemplateResponse.md
docs/Models/Operations/UserPasskeyDeleteRequest.md
docs/Models/Operations/UserPasskeyDeleteResponse.md
docs/Models/Operations/UsersGetOrganizationInvitationsRequest.md
docs/Models/Operations/UsersGetOrganizationInvitationsResponse.md
docs/Models/Operations/UsersGetOrganizationMembershipsRequest.md
docs/Models/Operations/UsersGetOrganizationMembershipsResponse.md
docs/Models/Operations/UserWeb3WalletDeleteRequest.md
docs/Models/Operations/UserWeb3WalletDeleteResponse.md
docs/Models/Operations/VerifyClientRequestBody.md
docs/Models/Operations/VerifyClientResponse.md
docs/Models/Operations/VerifyDomainProxyRequestBody.md
docs/Models/Operations/VerifyDomainProxyResponse.md
docs/Models/Operations/VerifyPasswordRequest.md
docs/Models/Operations/VerifyPasswordRequestBody.md
docs/Models/Operations/VerifyPasswordResponse.md
docs/Models/Operations/VerifyPasswordResponseBody.md
docs/Models/Operations/VerifySessionRequest.md
docs/Models/Operations/VerifySessionRequestBody.md
docs/Models/Operations/VerifySessionResponse.md
docs/Models/Operations/VerifyTOTPRequest.md
docs/Models/Operations/VerifyTOTPRequestBody.md
docs/Models/Operations/VerifyTOTPResponse.md
docs/Models/Operations/VerifyTOTPResponseBody.md
docs/sdks/actortokens/README.md
docs/sdks/allowlistidentifiers/README.md
docs/sdks/betafeatures/README.md
docs/sdks/blocklistidentifiers/README.md
docs/sdks/clerkbackendapi/README.md
docs/sdks/clients/README.md
docs/sdks/domains/README.md
docs/sdks/emailaddresses/README.md
docs/sdks/emailandsmstemplates/README.md
docs/sdks/emailsmstemplates/README.md
docs/sdks/instancesettings/README.md
docs/sdks/invitations/README.md
docs/sdks/jwks/README.md
docs/sdks/jwttemplates/README.md
docs/sdks/miscellaneous/README.md
docs/sdks/oauthapplications/README.md
docs/sdks/organizationdomains/README.md
docs/sdks/organizationinvitations/README.md
docs/sdks/organizationmemberships/README.md
docs/sdks/organizations/README.md
docs/sdks/phonenumbers/README.md
docs/sdks/proxychecks/README.md
docs/sdks/redirecturls/README.md
docs/sdks/samlconnections/README.md
docs/sdks/sessions/README.md
docs/sdks/signintokens/README.md
docs/sdks/signups/README.md
docs/sdks/templates/README.md
docs/sdks/testingtokens/README.md
docs/sdks/users/README.md
docs/sdks/waitlistentries/README.md
docs/sdks/webhooks/README.md
examples.yaml
global.json
LICENSE
NUGET.md
README.md
RELEASES.md
src/Clerk/BackendAPI/.genignore
src/Clerk/BackendAPI/ActorTokens.cs
src/Clerk/BackendAPI/AllowlistIdentifiers.cs
src/Clerk/BackendAPI/BetaFeatures.cs
src/Clerk/BackendAPI/BlocklistIdentifiers.cs
src/Clerk/BackendAPI/Clerk.BackendAPI.csproj
src/Clerk/BackendAPI/ClerkBackendApi.cs
src/Clerk/BackendAPI/Clients.cs
src/Clerk/BackendAPI/Domains.cs
src/Clerk/BackendAPI/EmailAddresses.cs
src/Clerk/BackendAPI/EmailAndSmsTemplates.cs
src/Clerk/BackendAPI/EmailSMSTemplates.cs
src/Clerk/BackendAPI/Helpers/AuthenticateRequest.cs
src/Clerk/BackendAPI/Helpers/AuthenticateRequestException.cs
src/Clerk/BackendAPI/Helpers/AuthenticateRequestOptions.cs
src/Clerk/BackendAPI/Helpers/ErrorReason.cs
src/Clerk/BackendAPI/Helpers/RequestState.cs
src/Clerk/BackendAPI/Helpers/TokenVerificationException.cs
src/Clerk/BackendAPI/Helpers/VerifyToken.cs
src/Clerk/BackendAPI/Helpers/VerifyTokenOptions.cs
src/Clerk/BackendAPI/Hooks/ClerkBeforeRequestHook.cs
src/Clerk/BackendAPI/Hooks/HookRegistration.cs
src/Clerk/BackendAPI/Hooks/HookTypes.cs
src/Clerk/BackendAPI/Hooks/SDKHooks.cs
src/Clerk/BackendAPI/InstanceSettings.cs
src/Clerk/BackendAPI/Invitations.cs
src/Clerk/BackendAPI/Jwks.cs
src/Clerk/BackendAPI/JwtTemplates.cs
src/Clerk/BackendAPI/Miscellaneous.cs
src/Clerk/BackendAPI/Models/Components/Actor.cs
src/Clerk/BackendAPI/Models/Components/ActorToken.cs
src/Clerk/BackendAPI/Models/Components/ActorTokenActor.cs
src/Clerk/BackendAPI/Models/Components/ActorTokenObject.cs
src/Clerk/BackendAPI/Models/Components/ActorTokenStatus.cs
src/Clerk/BackendAPI/Models/Components/Admin.cs
src/Clerk/BackendAPI/Models/Components/AdminVerificationPhoneNumberStatus.cs
src/Clerk/BackendAPI/Models/Components/AdminVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/AdminVerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/AdminVerificationWeb3WalletStatus.cs
src/Clerk/BackendAPI/Models/Components/AdminVerificationWeb3WalletStrategy.cs
src/Clerk/BackendAPI/Models/Components/AllowlistIdentifier.cs
src/Clerk/BackendAPI/Models/Components/AllowlistIdentifierObject.cs
src/Clerk/BackendAPI/Models/Components/BlocklistIdentifier.cs
src/Clerk/BackendAPI/Models/Components/BlocklistIdentifierIdentifierType.cs
src/Clerk/BackendAPI/Models/Components/BlocklistIdentifierObject.cs
src/Clerk/BackendAPI/Models/Components/BlocklistIdentifiers.cs
src/Clerk/BackendAPI/Models/Components/Claims.cs
src/Clerk/BackendAPI/Models/Components/ClerkError.cs
src/Clerk/BackendAPI/Models/Components/ClerkErrorErrorMeta.cs
src/Clerk/BackendAPI/Models/Components/Client.cs
src/Clerk/BackendAPI/Models/Components/CNameTarget.cs
src/Clerk/BackendAPI/Models/Components/DeletedObject.cs
src/Clerk/BackendAPI/Models/Components/Domain.cs
src/Clerk/BackendAPI/Models/Components/DomainObject.cs
src/Clerk/BackendAPI/Models/Components/Domains.cs
src/Clerk/BackendAPI/Models/Components/DomainsEnrollmentModes.cs
src/Clerk/BackendAPI/Models/Components/EmailAddress.cs
src/Clerk/BackendAPI/Models/Components/EmailAddressObject.cs
src/Clerk/BackendAPI/Models/Components/EnrollmentMode.cs
src/Clerk/BackendAPI/Models/Components/Error.cs
src/Clerk/BackendAPI/Models/Components/ErrorClerkError.cs
src/Clerk/BackendAPI/Models/Components/ErrorMeta.cs
src/Clerk/BackendAPI/Models/Components/ExternalAccount.cs
src/Clerk/BackendAPI/Models/Components/ExternalAccounts.cs
src/Clerk/BackendAPI/Models/Components/FromOAuth.cs
src/Clerk/BackendAPI/Models/Components/FromOAuthVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/HTTPMetadata.cs
src/Clerk/BackendAPI/Models/Components/IdentificationLink.cs
src/Clerk/BackendAPI/Models/Components/IdentifierType.cs
src/Clerk/BackendAPI/Models/Components/Instance.cs
src/Clerk/BackendAPI/Models/Components/InstanceObject.cs
src/Clerk/BackendAPI/Models/Components/InstanceRestrictions.cs
src/Clerk/BackendAPI/Models/Components/InstanceRestrictionsObject.cs
src/Clerk/BackendAPI/Models/Components/InstanceSettings.cs
src/Clerk/BackendAPI/Models/Components/InstanceSettingsObject.cs
src/Clerk/BackendAPI/Models/Components/Invitation.cs
src/Clerk/BackendAPI/Models/Components/InvitationObject.cs
src/Clerk/BackendAPI/Models/Components/InvitationRevoked.cs
src/Clerk/BackendAPI/Models/Components/InvitationRevokedObject.cs
src/Clerk/BackendAPI/Models/Components/InvitationRevokedStatus.cs
src/Clerk/BackendAPI/Models/Components/InvitationStatus.cs
src/Clerk/BackendAPI/Models/Components/Jwks.cs
src/Clerk/BackendAPI/Models/Components/JWTTemplate.cs
src/Clerk/BackendAPI/Models/Components/JWTTemplateObject.cs
src/Clerk/BackendAPI/Models/Components/Keys.cs
src/Clerk/BackendAPI/Models/Components/Meta.cs
src/Clerk/BackendAPI/Models/Components/NextAction.cs
src/Clerk/BackendAPI/Models/Components/Nonce.cs
src/Clerk/BackendAPI/Models/Components/OAuthApplication.cs
src/Clerk/BackendAPI/Models/Components/OAuthApplicationObject.cs
src/Clerk/BackendAPI/Models/Components/OAuthApplications.cs
src/Clerk/BackendAPI/Models/Components/OAuthApplicationWithSecret.cs
src/Clerk/BackendAPI/Models/Components/OAuthApplicationWithSecretObject.cs
src/Clerk/BackendAPI/Models/Components/Object.cs
src/Clerk/BackendAPI/Models/Components/Organization.cs
src/Clerk/BackendAPI/Models/Components/OrganizationDomain.cs
src/Clerk/BackendAPI/Models/Components/OrganizationDomainObject.cs
src/Clerk/BackendAPI/Models/Components/OrganizationDomains.cs
src/Clerk/BackendAPI/Models/Components/OrganizationDomainStatus.cs
src/Clerk/BackendAPI/Models/Components/OrganizationDomainVerification.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitation.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitationObject.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitationPublicOrganizationData.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitations.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitationsWithPublicOrganizationData.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitationWithPublicOrganizationData.cs
src/Clerk/BackendAPI/Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.cs
src/Clerk/BackendAPI/Models/Components/OrganizationMembership.cs
src/Clerk/BackendAPI/Models/Components/OrganizationMembershipObject.cs
src/Clerk/BackendAPI/Models/Components/OrganizationMembershipOrganization.cs
src/Clerk/BackendAPI/Models/Components/OrganizationMembershipOrganizationObject.cs
src/Clerk/BackendAPI/Models/Components/OrganizationMembershipPublicUserData.cs
src/Clerk/BackendAPI/Models/Components/OrganizationMemberships.cs
src/Clerk/BackendAPI/Models/Components/OrganizationObject.cs
src/Clerk/BackendAPI/Models/Components/Organizations.cs
src/Clerk/BackendAPI/Models/Components/OrganizationSettings.cs
src/Clerk/BackendAPI/Models/Components/OrganizationSettingsObject.cs
src/Clerk/BackendAPI/Models/Components/OrganizationWithLogo.cs
src/Clerk/BackendAPI/Models/Components/OrganizationWithLogoObject.cs
src/Clerk/BackendAPI/Models/Components/Otp.cs
src/Clerk/BackendAPI/Models/Components/OTPVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/OTPVerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/Passkey.cs
src/Clerk/BackendAPI/Models/Components/PasskeyVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/PasskeyVerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/PhoneNumber.cs
src/Clerk/BackendAPI/Models/Components/PhoneNumberObject.cs
src/Clerk/BackendAPI/Models/Components/PhoneNumberVerification.cs
src/Clerk/BackendAPI/Models/Components/ProxyCheck.cs
src/Clerk/BackendAPI/Models/Components/ProxyCheckObject.cs
src/Clerk/BackendAPI/Models/Components/RedirectURL.cs
src/Clerk/BackendAPI/Models/Components/RedirectURLObject.cs
src/Clerk/BackendAPI/Models/Components/Saml.cs
src/Clerk/BackendAPI/Models/Components/SAMLAccount.cs
src/Clerk/BackendAPI/Models/Components/SAMLAccountObject.cs
src/Clerk/BackendAPI/Models/Components/SAMLAccountVerification.cs
src/Clerk/BackendAPI/Models/Components/SamlConnection.cs
src/Clerk/BackendAPI/Models/Components/SAMLConnectionAttributeMapping.cs
src/Clerk/BackendAPI/Models/Components/SAMLConnections.cs
src/Clerk/BackendAPI/Models/Components/SAMLConnectionSAMLConnection.cs
src/Clerk/BackendAPI/Models/Components/SAMLErrorClerkError.cs
src/Clerk/BackendAPI/Models/Components/SAMLVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/SAMLVerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/SchemasPasskey.cs
src/Clerk/BackendAPI/Models/Components/SchemasPasskeyObject.cs
src/Clerk/BackendAPI/Models/Components/SchemasPasskeyVerification.cs
src/Clerk/BackendAPI/Models/Components/SchemasSAMLConnection.cs
src/Clerk/BackendAPI/Models/Components/SchemasSAMLConnectionObject.cs
src/Clerk/BackendAPI/Models/Components/Security.cs
src/Clerk/BackendAPI/Models/Components/Session.cs
src/Clerk/BackendAPI/Models/Components/SessionActivityResponse.cs
src/Clerk/BackendAPI/Models/Components/SessionObject.cs
src/Clerk/BackendAPI/Models/Components/SignInToken.cs
src/Clerk/BackendAPI/Models/Components/SignInTokenObject.cs
src/Clerk/BackendAPI/Models/Components/SignInTokenStatus.cs
src/Clerk/BackendAPI/Models/Components/SignUp.cs
src/Clerk/BackendAPI/Models/Components/SignUpExternalAccount.cs
src/Clerk/BackendAPI/Models/Components/SignUpObject.cs
src/Clerk/BackendAPI/Models/Components/SignUpStatus.cs
src/Clerk/BackendAPI/Models/Components/SignUpVerification.cs
src/Clerk/BackendAPI/Models/Components/SignUpVerifications.cs
src/Clerk/BackendAPI/Models/Components/Status.cs
src/Clerk/BackendAPI/Models/Components/Strategy.cs
src/Clerk/BackendAPI/Models/Components/SvixURL.cs
src/Clerk/BackendAPI/Models/Components/Template.cs
src/Clerk/BackendAPI/Models/Components/TemplateObject.cs
src/Clerk/BackendAPI/Models/Components/TestingToken.cs
src/Clerk/BackendAPI/Models/Components/TestingTokenObject.cs
src/Clerk/BackendAPI/Models/Components/Ticket.cs
src/Clerk/BackendAPI/Models/Components/TicketVerificationSAMLAccountStatus.cs
src/Clerk/BackendAPI/Models/Components/TicketVerificationSAMLAccountStrategy.cs
src/Clerk/BackendAPI/Models/Components/TicketVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/TicketVerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/TotalCount.cs
src/Clerk/BackendAPI/Models/Components/TotalCountObject.cs
src/Clerk/BackendAPI/Models/Components/User.cs
src/Clerk/BackendAPI/Models/Components/UserObject.cs
src/Clerk/BackendAPI/Models/Components/Verification.cs
src/Clerk/BackendAPI/Models/Components/VerificationAdmin.cs
src/Clerk/BackendAPI/Models/Components/VerificationError.cs
src/Clerk/BackendAPI/Models/Components/VerificationOTP.cs
src/Clerk/BackendAPI/Models/Components/VerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/VerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/VerificationTicket.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntries.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntry.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitation.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitationObject.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitationStatus.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntryObject.cs
src/Clerk/BackendAPI/Models/Components/WaitlistEntryStatus.cs
src/Clerk/BackendAPI/Models/Components/Web3Signature.cs
src/Clerk/BackendAPI/Models/Components/Web3SignatureVerificationStatus.cs
src/Clerk/BackendAPI/Models/Components/Web3SignatureVerificationStrategy.cs
src/Clerk/BackendAPI/Models/Components/Web3Wallet.cs
src/Clerk/BackendAPI/Models/Components/Web3WalletObject.cs
src/Clerk/BackendAPI/Models/Components/Web3WalletVerification.cs
src/Clerk/BackendAPI/Models/Components/Web3WalletVerificationAdmin.cs
src/Clerk/BackendAPI/Models/Errors/ClerkErrors.cs
src/Clerk/BackendAPI/Models/Errors/Meta.cs
src/Clerk/BackendAPI/Models/Errors/SDKError.cs
src/Clerk/BackendAPI/Models/Operations/Actor.cs
src/Clerk/BackendAPI/Models/Operations/AddDomainRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/AddDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/AttributeMapping.cs
src/Clerk/BackendAPI/Models/Operations/BanUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/BanUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/ChangeProductionInstanceDomainRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/ChangeProductionInstanceDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/Claims.cs
src/Clerk/BackendAPI/Models/Operations/CodeType.cs
src/Clerk/BackendAPI/Models/Operations/CreateActorTokenRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateActorTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateAllowlistIdentifierRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateAllowlistIdentifierResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateBlocklistIdentifierRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateBlocklistIdentifierResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateBulkInvitationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateBulkInvitationsTemplateSlug.cs
src/Clerk/BackendAPI/Models/Operations/CreateEmailAddressRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateEmailAddressResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateInvitationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateInvitationResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateJWTTemplateRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateJWTTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateOAuthApplicationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateOAuthApplicationResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainRequest.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkRequest.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationRequest.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipRequest.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateOrganizationResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreatePhoneNumberRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreatePhoneNumberResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateRedirectURLRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateRedirectURLResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateSAMLConnectionRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSAMLConnectionResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateObject.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenRequest.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSignInTokenRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateSignInTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateSvixAppResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateTestingTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateUserRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/CreateWaitlistEntryRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/CreateWaitlistEntryResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteAllowlistIdentifierRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteAllowlistIdentifierResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/DeleteBlocklistIdentifierRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteBlocklistIdentifierResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteDomainRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteEmailAddressRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteEmailAddressResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteExternalAccountRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteExternalAccountResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteJWTTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteJWTTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOAuthApplicationRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOAuthApplicationResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationDomainRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationLogoRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationLogoResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationMembershipRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationMembershipResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeletePhoneNumberRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeletePhoneNumberResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteRedirectURLRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteRedirectURLResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteSAMLConnectionRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteSAMLConnectionResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteSvixAppResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteTOTPRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteTOTPResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteTOTPResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/DeleteUserProfileImageRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteUserProfileImageResponse.cs
src/Clerk/BackendAPI/Models/Operations/DeleteUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/DeleteUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/DisableMFARequest.cs
src/Clerk/BackendAPI/Models/Operations/DisableMFAResponse.cs
src/Clerk/BackendAPI/Models/Operations/DisableMFAResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/File.cs
src/Clerk/BackendAPI/Models/Operations/GenerateSvixAuthURLResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetClientListRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetClientListResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetClientRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetClientResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetEmailAddressRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetEmailAddressResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetInstanceResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetJWKSResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetJWTTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetJWTTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetOAuthAccessTokenRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetOAuthAccessTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetOAuthApplicationRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetOAuthApplicationResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetOrganizationInvitationRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetOrganizationInvitationResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetOrganizationRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetOrganizationResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetPhoneNumberRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetPhoneNumberResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetPublicInterstitialRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetPublicInterstitialResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetRedirectURLRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetRedirectURLResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetSAMLConnectionRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetSAMLConnectionResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetSessionListRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetSessionListResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetSessionRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetSessionResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetSignUpRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetSignUpResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetTemplateListRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetTemplateListResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetUserListRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetUserListResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/GetUsersCountRequest.cs
src/Clerk/BackendAPI/Models/Operations/GetUsersCountResponse.cs
src/Clerk/BackendAPI/Models/Operations/InstanceGetOrganizationMembershipsRequest.cs
src/Clerk/BackendAPI/Models/Operations/InstanceGetOrganizationMembershipsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListAllowlistIdentifiersRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListAllowlistIdentifiersResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListBlocklistIdentifiersResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListDomainsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.cs
src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListInvitationsQueryParamStatus.cs
src/Clerk/BackendAPI/Models/Operations/ListInvitationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListInvitationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListJWTTemplatesRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListJWTTemplatesResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListOAuthApplicationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListOAuthApplicationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationDomainsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationDomainsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsQueryParamStatus.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationMembershipsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationMembershipsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListOrganizationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListPendingOrganizationInvitationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListPendingOrganizationInvitationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListRedirectURLsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListRedirectURLsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListSAMLConnectionsRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListSAMLConnectionsResponse.cs
src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesQueryParamStatus.cs
src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesRequest.cs
src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesResponse.cs
src/Clerk/BackendAPI/Models/Operations/LockUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/LockUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataRequest.cs
src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataResponse.cs
src/Clerk/BackendAPI/Models/Operations/Object.cs
src/Clerk/BackendAPI/Models/Operations/PathParamTemplateType.cs
src/Clerk/BackendAPI/Models/Operations/PreviewTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/PreviewTemplateRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/PreviewTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/PreviewTemplateResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/Provider.cs
src/Clerk/BackendAPI/Models/Operations/QueryParamStatus.cs
src/Clerk/BackendAPI/Models/Operations/RequestBody.cs
src/Clerk/BackendAPI/Models/Operations/ResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/RevertTemplatePathParamTemplateType.cs
src/Clerk/BackendAPI/Models/Operations/RevertTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/RevertTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/RevokeActorTokenRequest.cs
src/Clerk/BackendAPI/Models/Operations/RevokeActorTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/RevokeInvitationRequest.cs
src/Clerk/BackendAPI/Models/Operations/RevokeInvitationResponse.cs
src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationRequest.cs
src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationResponse.cs
src/Clerk/BackendAPI/Models/Operations/RevokeSessionRequest.cs
src/Clerk/BackendAPI/Models/Operations/RevokeSessionResponse.cs
src/Clerk/BackendAPI/Models/Operations/RevokeSignInTokenRequest.cs
src/Clerk/BackendAPI/Models/Operations/RevokeSignInTokenResponse.cs
src/Clerk/BackendAPI/Models/Operations/RotateOAuthApplicationSecretRequest.cs
src/Clerk/BackendAPI/Models/Operations/RotateOAuthApplicationSecretResponse.cs
src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageRequest.cs
src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageResponse.cs
src/Clerk/BackendAPI/Models/Operations/Status.cs
src/Clerk/BackendAPI/Models/Operations/TemplateSlug.cs
src/Clerk/BackendAPI/Models/Operations/TemplateType.cs
src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.cs
src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryRequest.cs
src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryResponse.cs
src/Clerk/BackendAPI/Models/Operations/UnbanUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/UnbanUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/UnlockUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/UnlockUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateDomainRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateDomainRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceAuthConfigRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceAuthConfigResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceOrganizationSettingsResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRestrictionsRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRestrictionsResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateClaims.cs
src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateProductionInstanceDomainRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateProductionInstanceDomainResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionAttributeMapping.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSignUpRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSignUpRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateSignUpResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpdateUserRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpdateUserRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpdateUserResponse.cs
src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoFile.cs
src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoRequest.cs
src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoResponse.cs
src/Clerk/BackendAPI/Models/Operations/UpsertTemplatePathParamTemplateType.cs
src/Clerk/BackendAPI/Models/Operations/UpsertTemplateRequest.cs
src/Clerk/BackendAPI/Models/Operations/UpsertTemplateRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/UpsertTemplateResponse.cs
src/Clerk/BackendAPI/Models/Operations/UserPasskeyDeleteRequest.cs
src/Clerk/BackendAPI/Models/Operations/UserPasskeyDeleteResponse.cs
src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationInvitationsRequest.cs
src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationInvitationsResponse.cs
src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationMembershipsRequest.cs
src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationMembershipsResponse.cs
src/Clerk/BackendAPI/Models/Operations/UserWeb3WalletDeleteRequest.cs
src/Clerk/BackendAPI/Models/Operations/UserWeb3WalletDeleteResponse.cs
src/Clerk/BackendAPI/Models/Operations/VerifyClientRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/VerifyClientResponse.cs
src/Clerk/BackendAPI/Models/Operations/VerifyDomainProxyRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/VerifyDomainProxyResponse.cs
src/Clerk/BackendAPI/Models/Operations/VerifyPasswordRequest.cs
src/Clerk/BackendAPI/Models/Operations/VerifyPasswordRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/VerifyPasswordResponse.cs
src/Clerk/BackendAPI/Models/Operations/VerifyPasswordResponseBody.cs
src/Clerk/BackendAPI/Models/Operations/VerifySessionRequest.cs
src/Clerk/BackendAPI/Models/Operations/VerifySessionRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/VerifySessionResponse.cs
src/Clerk/BackendAPI/Models/Operations/VerifyTOTPRequest.cs
src/Clerk/BackendAPI/Models/Operations/VerifyTOTPRequestBody.cs
src/Clerk/BackendAPI/Models/Operations/VerifyTOTPResponse.cs
src/Clerk/BackendAPI/Models/Operations/VerifyTOTPResponseBody.cs
src/Clerk/BackendAPI/OauthApplications.cs
src/Clerk/BackendAPI/OrganizationDomains.cs
src/Clerk/BackendAPI/OrganizationInvitations.cs
src/Clerk/BackendAPI/OrganizationMemberships.cs
src/Clerk/BackendAPI/Organizations.cs
src/Clerk/BackendAPI/PhoneNumbers.cs
src/Clerk/BackendAPI/ProxyChecks.cs
src/Clerk/BackendAPI/RedirectUrls.cs
src/Clerk/BackendAPI/SamlConnections.cs
src/Clerk/BackendAPI/Sessions.cs
src/Clerk/BackendAPI/SignInTokens.cs
src/Clerk/BackendAPI/SignUps.cs
src/Clerk/BackendAPI/Templates.cs
src/Clerk/BackendAPI/TestingTokens.cs
src/Clerk/BackendAPI/Users.cs
src/Clerk/BackendAPI/Utils/AnyDeserializer.cs
src/Clerk/BackendAPI/Utils/BigIntStrConverter.cs
src/Clerk/BackendAPI/Utils/DecimalStrConverter.cs
src/Clerk/BackendAPI/Utils/EnumConverter.cs
src/Clerk/BackendAPI/Utils/FlexibleObjectDeserializer.cs
src/Clerk/BackendAPI/Utils/HeaderSerializer.cs
src/Clerk/BackendAPI/Utils/IsoDateTimeSerializer.cs
src/Clerk/BackendAPI/Utils/RequestBodySerializer.cs
src/Clerk/BackendAPI/Utils/ResponseBodyDeserializer.cs
src/Clerk/BackendAPI/Utils/Retries/BackoffStrategy.cs
src/Clerk/BackendAPI/Utils/Retries/Retries.cs
src/Clerk/BackendAPI/Utils/Retries/RetryConfig.cs
src/Clerk/BackendAPI/Utils/SecurityMetadata.cs
src/Clerk/BackendAPI/Utils/SpeakeasyHttpClient.cs
src/Clerk/BackendAPI/Utils/SpeakeasyMetadata.cs
src/Clerk/BackendAPI/Utils/URLBuilder.cs
src/Clerk/BackendAPI/Utils/Utilities.cs
src/Clerk/BackendAPI/WaitlistEntries.cs
src/Clerk/BackendAPI/Webhooks.cs
tests/.gitignore
tests/Hooks/BeforeRequestHookTests.cs
tests/JwksHelpers/AuthenticateRequestTests.cs
tests/JwksHelpers/Utils.cs
tests/JwksHelpers/VerifyTokenTests.cs
tests/Tests.csproj
USAGE.md

================================================================
Files
================================================================

================
File: .gitattributes
================
# This allows generated code to be indexed correctly
*.cs linguist-generated=false

================
File: .github/workflows/sdk_generation.yaml
================
name: Generate
permissions:
  checks: write
  contents: write
  pull-requests: write
  statuses: write
  id-token: write
"on":
  workflow_dispatch:
    inputs:
      force:
        description: Force generation of SDKs
        type: boolean
        default: false
      set_version:
        description: optionally set a specific SDK version
        type: string
  schedule:
    - cron: 0 0 * * *
jobs:
  generate:
    uses: speakeasy-api/sdk-generation-action/.github/workflows/workflow-executor.yaml@v15
    with:
      force: ${{ github.event.inputs.force }}
      mode: pr
      set_version: ${{ github.event.inputs.set_version }}
    secrets:
      github_access_token: ${{ secrets.GITHUB_TOKEN }}
      nuget_api_key: ${{ secrets.NUGET_API_KEY }}
      speakeasy_api_key: ${{ secrets.SPEAKEASY_API_KEY }}

================
File: .github/workflows/sdk_publish.yaml
================
name: Publish
permissions:
  checks: write
  contents: write
  pull-requests: write
  statuses: write
  id-token: write
"on":
  push:
    branches:
      - main
    paths:
      - .speakeasy/gen.lock
  workflow_dispatch: {}
jobs:
  publish:
    uses: speakeasy-api/sdk-generation-action/.github/workflows/sdk-publish.yaml@v15
    with:
      target: clerk-backend-api
    secrets:
      github_access_token: ${{ secrets.GITHUB_TOKEN }}
      nuget_api_key: ${{ secrets.NUGET_API_KEY }}
      speakeasy_api_key: ${{ secrets.SPEAKEASY_API_KEY }}

================
File: .gitignore
================
obj/
bin/
debug/

================
File: .speakeasy/gen.lock
================
lockVersion: 2.0.0
id: 248c4615-4118-44e3-9280-c0978ea11cf6
management:
  docChecksum: 1b8d2602d0682acb05ec46d1c240c9cd
  docVersion: "2024-10-01"
  speakeasyVersion: 1.509.1
  generationVersion: 2.539.1
  releaseVersion: 0.6.1
  configChecksum: 1c48da8d17b2a3f7e528c782f9ecb751
  repoURL: https://github.com/clerk/clerk-sdk-csharp.git
  published: true
features:
  csharp:
    additionalDependencies: 0.1.0
    additionalProperties: 0.0.1
    constsAndDefaults: 0.0.1
    core: 3.10.14
    deprecations: 2.81.2
    flattening: 2.81.3
    globalSecurity: 2.83.7
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globalServerURLs: 2.82.3
    groups: 2.81.2
    intellisenseMarkdownSupport: 0.1.0
    methodArguments: 0.2.0
    nameOverrides: 2.81.2
    nullables: 0.1.1
    responseFormat: 0.0.4
    retries: 0.0.1
    sdkHooks: 0.1.0
    unions: 0.2.2
generatedFiles:
  - .gitattributes
  - Clerk.BackendAPI.sln
  - NUGET.md
  - USAGE.md
  - docs/Models/Components/Actor.md
  - docs/Models/Components/ActorToken.md
  - docs/Models/Components/ActorTokenActor.md
  - docs/Models/Components/ActorTokenObject.md
  - docs/Models/Components/ActorTokenStatus.md
  - docs/Models/Components/Admin.md
  - docs/Models/Components/AdminVerificationPhoneNumberStatus.md
  - docs/Models/Components/AdminVerificationStatus.md
  - docs/Models/Components/AdminVerificationStrategy.md
  - docs/Models/Components/AdminVerificationWeb3WalletStatus.md
  - docs/Models/Components/AdminVerificationWeb3WalletStrategy.md
  - docs/Models/Components/AllowlistIdentifier.md
  - docs/Models/Components/AllowlistIdentifierObject.md
  - docs/Models/Components/BlocklistIdentifier.md
  - docs/Models/Components/BlocklistIdentifierIdentifierType.md
  - docs/Models/Components/BlocklistIdentifierObject.md
  - docs/Models/Components/BlocklistIdentifiers.md
  - docs/Models/Components/CNameTarget.md
  - docs/Models/Components/Claims.md
  - docs/Models/Components/ClerkError.md
  - docs/Models/Components/ClerkErrorErrorMeta.md
  - docs/Models/Components/Client.md
  - docs/Models/Components/DeletedObject.md
  - docs/Models/Components/Domain.md
  - docs/Models/Components/DomainObject.md
  - docs/Models/Components/Domains.md
  - docs/Models/Components/DomainsEnrollmentModes.md
  - docs/Models/Components/EmailAddress.md
  - docs/Models/Components/EmailAddressObject.md
  - docs/Models/Components/EnrollmentMode.md
  - docs/Models/Components/Error.md
  - docs/Models/Components/ErrorClerkError.md
  - docs/Models/Components/ErrorMeta.md
  - docs/Models/Components/ExternalAccount.md
  - docs/Models/Components/ExternalAccounts.md
  - docs/Models/Components/FromOAuth.md
  - docs/Models/Components/FromOAuthVerificationStatus.md
  - docs/Models/Components/HTTPMetadata.md
  - docs/Models/Components/IdentificationLink.md
  - docs/Models/Components/IdentifierType.md
  - docs/Models/Components/Instance.md
  - docs/Models/Components/InstanceObject.md
  - docs/Models/Components/InstanceRestrictions.md
  - docs/Models/Components/InstanceRestrictionsObject.md
  - docs/Models/Components/InstanceSettings.md
  - docs/Models/Components/InstanceSettingsObject.md
  - docs/Models/Components/Invitation.md
  - docs/Models/Components/InvitationObject.md
  - docs/Models/Components/InvitationRevoked.md
  - docs/Models/Components/InvitationRevokedObject.md
  - docs/Models/Components/InvitationRevokedStatus.md
  - docs/Models/Components/InvitationStatus.md
  - docs/Models/Components/JWTTemplate.md
  - docs/Models/Components/JWTTemplateObject.md
  - docs/Models/Components/Jwks.md
  - docs/Models/Components/Keys.md
  - docs/Models/Components/Meta.md
  - docs/Models/Components/NextAction.md
  - docs/Models/Components/Nonce.md
  - docs/Models/Components/OAuthApplication.md
  - docs/Models/Components/OAuthApplicationObject.md
  - docs/Models/Components/OAuthApplicationWithSecret.md
  - docs/Models/Components/OAuthApplicationWithSecretObject.md
  - docs/Models/Components/OAuthApplications.md
  - docs/Models/Components/OTPVerificationStatus.md
  - docs/Models/Components/OTPVerificationStrategy.md
  - docs/Models/Components/Object.md
  - docs/Models/Components/Organization.md
  - docs/Models/Components/OrganizationDomain.md
  - docs/Models/Components/OrganizationDomainObject.md
  - docs/Models/Components/OrganizationDomainStatus.md
  - docs/Models/Components/OrganizationDomainVerification.md
  - docs/Models/Components/OrganizationDomains.md
  - docs/Models/Components/OrganizationInvitation.md
  - docs/Models/Components/OrganizationInvitationObject.md
  - docs/Models/Components/OrganizationInvitationPublicOrganizationData.md
  - docs/Models/Components/OrganizationInvitationWithPublicOrganizationData.md
  - docs/Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.md
  - docs/Models/Components/OrganizationInvitations.md
  - docs/Models/Components/OrganizationInvitationsWithPublicOrganizationData.md
  - docs/Models/Components/OrganizationMembership.md
  - docs/Models/Components/OrganizationMembershipObject.md
  - docs/Models/Components/OrganizationMembershipOrganization.md
  - docs/Models/Components/OrganizationMembershipOrganizationObject.md
  - docs/Models/Components/OrganizationMembershipPublicUserData.md
  - docs/Models/Components/OrganizationMemberships.md
  - docs/Models/Components/OrganizationObject.md
  - docs/Models/Components/OrganizationSettings.md
  - docs/Models/Components/OrganizationSettingsObject.md
  - docs/Models/Components/OrganizationWithLogo.md
  - docs/Models/Components/OrganizationWithLogoObject.md
  - docs/Models/Components/Organizations.md
  - docs/Models/Components/Otp.md
  - docs/Models/Components/Passkey.md
  - docs/Models/Components/PasskeyVerificationStatus.md
  - docs/Models/Components/PasskeyVerificationStrategy.md
  - docs/Models/Components/PhoneNumber.md
  - docs/Models/Components/PhoneNumberObject.md
  - docs/Models/Components/PhoneNumberVerification.md
  - docs/Models/Components/ProxyCheck.md
  - docs/Models/Components/ProxyCheckObject.md
  - docs/Models/Components/RedirectURL.md
  - docs/Models/Components/RedirectURLObject.md
  - docs/Models/Components/SAMLAccount.md
  - docs/Models/Components/SAMLAccountObject.md
  - docs/Models/Components/SAMLAccountVerification.md
  - docs/Models/Components/SAMLConnectionAttributeMapping.md
  - docs/Models/Components/SAMLConnectionSAMLConnection.md
  - docs/Models/Components/SAMLConnections.md
  - docs/Models/Components/SAMLErrorClerkError.md
  - docs/Models/Components/SAMLVerificationStatus.md
  - docs/Models/Components/SAMLVerificationStrategy.md
  - docs/Models/Components/Saml.md
  - docs/Models/Components/SamlConnection.md
  - docs/Models/Components/SchemasPasskey.md
  - docs/Models/Components/SchemasPasskeyObject.md
  - docs/Models/Components/SchemasPasskeyVerification.md
  - docs/Models/Components/SchemasSAMLConnection.md
  - docs/Models/Components/SchemasSAMLConnectionObject.md
  - docs/Models/Components/Security.md
  - docs/Models/Components/Session.md
  - docs/Models/Components/SessionActivityResponse.md
  - docs/Models/Components/SessionObject.md
  - docs/Models/Components/SignInToken.md
  - docs/Models/Components/SignInTokenObject.md
  - docs/Models/Components/SignInTokenStatus.md
  - docs/Models/Components/SignUp.md
  - docs/Models/Components/SignUpExternalAccount.md
  - docs/Models/Components/SignUpObject.md
  - docs/Models/Components/SignUpStatus.md
  - docs/Models/Components/SignUpVerification.md
  - docs/Models/Components/SignUpVerifications.md
  - docs/Models/Components/Status.md
  - docs/Models/Components/Strategy.md
  - docs/Models/Components/SvixURL.md
  - docs/Models/Components/Template.md
  - docs/Models/Components/TemplateObject.md
  - docs/Models/Components/TestingToken.md
  - docs/Models/Components/TestingTokenObject.md
  - docs/Models/Components/Ticket.md
  - docs/Models/Components/TicketVerificationSAMLAccountStatus.md
  - docs/Models/Components/TicketVerificationSAMLAccountStrategy.md
  - docs/Models/Components/TicketVerificationStatus.md
  - docs/Models/Components/TicketVerificationStrategy.md
  - docs/Models/Components/TotalCount.md
  - docs/Models/Components/TotalCountObject.md
  - docs/Models/Components/User.md
  - docs/Models/Components/UserObject.md
  - docs/Models/Components/Verification.md
  - docs/Models/Components/VerificationAdmin.md
  - docs/Models/Components/VerificationError.md
  - docs/Models/Components/VerificationOTP.md
  - docs/Models/Components/VerificationStatus.md
  - docs/Models/Components/VerificationStrategy.md
  - docs/Models/Components/VerificationTicket.md
  - docs/Models/Components/WaitlistEntries.md
  - docs/Models/Components/WaitlistEntry.md
  - docs/Models/Components/WaitlistEntryInvitation.md
  - docs/Models/Components/WaitlistEntryInvitationObject.md
  - docs/Models/Components/WaitlistEntryInvitationStatus.md
  - docs/Models/Components/WaitlistEntryObject.md
  - docs/Models/Components/WaitlistEntryStatus.md
  - docs/Models/Components/Web3Signature.md
  - docs/Models/Components/Web3SignatureVerificationStatus.md
  - docs/Models/Components/Web3SignatureVerificationStrategy.md
  - docs/Models/Components/Web3Wallet.md
  - docs/Models/Components/Web3WalletObject.md
  - docs/Models/Components/Web3WalletVerification.md
  - docs/Models/Components/Web3WalletVerificationAdmin.md
  - docs/Models/Errors/ClerkErrors.md
  - docs/Models/Errors/Meta.md
  - docs/Models/Operations/Actor.md
  - docs/Models/Operations/AddDomainRequestBody.md
  - docs/Models/Operations/AddDomainResponse.md
  - docs/Models/Operations/AttributeMapping.md
  - docs/Models/Operations/BanUserRequest.md
  - docs/Models/Operations/BanUserResponse.md
  - docs/Models/Operations/ChangeProductionInstanceDomainRequestBody.md
  - docs/Models/Operations/ChangeProductionInstanceDomainResponse.md
  - docs/Models/Operations/Claims.md
  - docs/Models/Operations/CodeType.md
  - docs/Models/Operations/CreateActorTokenRequestBody.md
  - docs/Models/Operations/CreateActorTokenResponse.md
  - docs/Models/Operations/CreateAllowlistIdentifierRequestBody.md
  - docs/Models/Operations/CreateAllowlistIdentifierResponse.md
  - docs/Models/Operations/CreateBlocklistIdentifierRequestBody.md
  - docs/Models/Operations/CreateBlocklistIdentifierResponse.md
  - docs/Models/Operations/CreateBulkInvitationsResponse.md
  - docs/Models/Operations/CreateBulkInvitationsTemplateSlug.md
  - docs/Models/Operations/CreateEmailAddressRequestBody.md
  - docs/Models/Operations/CreateEmailAddressResponse.md
  - docs/Models/Operations/CreateInvitationRequestBody.md
  - docs/Models/Operations/CreateInvitationResponse.md
  - docs/Models/Operations/CreateJWTTemplateRequestBody.md
  - docs/Models/Operations/CreateJWTTemplateResponse.md
  - docs/Models/Operations/CreateOAuthApplicationRequestBody.md
  - docs/Models/Operations/CreateOAuthApplicationResponse.md
  - docs/Models/Operations/CreateOrganizationDomainRequest.md
  - docs/Models/Operations/CreateOrganizationDomainRequestBody.md
  - docs/Models/Operations/CreateOrganizationDomainResponse.md
  - docs/Models/Operations/CreateOrganizationInvitationBulkRequest.md
  - docs/Models/Operations/CreateOrganizationInvitationBulkRequestBody.md
  - docs/Models/Operations/CreateOrganizationInvitationBulkResponse.md
  - docs/Models/Operations/CreateOrganizationInvitationRequest.md
  - docs/Models/Operations/CreateOrganizationInvitationRequestBody.md
  - docs/Models/Operations/CreateOrganizationInvitationResponse.md
  - docs/Models/Operations/CreateOrganizationMembershipRequest.md
  - docs/Models/Operations/CreateOrganizationMembershipRequestBody.md
  - docs/Models/Operations/CreateOrganizationMembershipResponse.md
  - docs/Models/Operations/CreateOrganizationRequestBody.md
  - docs/Models/Operations/CreateOrganizationResponse.md
  - docs/Models/Operations/CreatePhoneNumberRequestBody.md
  - docs/Models/Operations/CreatePhoneNumberResponse.md
  - docs/Models/Operations/CreateRedirectURLRequestBody.md
  - docs/Models/Operations/CreateRedirectURLResponse.md
  - docs/Models/Operations/CreateSAMLConnectionRequestBody.md
  - docs/Models/Operations/CreateSAMLConnectionResponse.md
  - docs/Models/Operations/CreateSessionRequestBody.md
  - docs/Models/Operations/CreateSessionResponse.md
  - docs/Models/Operations/CreateSessionTokenFromTemplateObject.md
  - docs/Models/Operations/CreateSessionTokenFromTemplateRequest.md
  - docs/Models/Operations/CreateSessionTokenFromTemplateRequestBody.md
  - docs/Models/Operations/CreateSessionTokenFromTemplateResponse.md
  - docs/Models/Operations/CreateSessionTokenFromTemplateResponseBody.md
  - docs/Models/Operations/CreateSessionTokenRequest.md
  - docs/Models/Operations/CreateSessionTokenRequestBody.md
  - docs/Models/Operations/CreateSessionTokenResponse.md
  - docs/Models/Operations/CreateSessionTokenResponseBody.md
  - docs/Models/Operations/CreateSignInTokenRequestBody.md
  - docs/Models/Operations/CreateSignInTokenResponse.md
  - docs/Models/Operations/CreateSvixAppResponse.md
  - docs/Models/Operations/CreateTestingTokenResponse.md
  - docs/Models/Operations/CreateUserRequestBody.md
  - docs/Models/Operations/CreateUserResponse.md
  - docs/Models/Operations/CreateWaitlistEntryRequestBody.md
  - docs/Models/Operations/CreateWaitlistEntryResponse.md
  - docs/Models/Operations/DeleteAllowlistIdentifierRequest.md
  - docs/Models/Operations/DeleteAllowlistIdentifierResponse.md
  - docs/Models/Operations/DeleteBackupCodeRequest.md
  - docs/Models/Operations/DeleteBackupCodeResponse.md
  - docs/Models/Operations/DeleteBackupCodeResponseBody.md
  - docs/Models/Operations/DeleteBlocklistIdentifierRequest.md
  - docs/Models/Operations/DeleteBlocklistIdentifierResponse.md
  - docs/Models/Operations/DeleteDomainRequest.md
  - docs/Models/Operations/DeleteDomainResponse.md
  - docs/Models/Operations/DeleteEmailAddressRequest.md
  - docs/Models/Operations/DeleteEmailAddressResponse.md
  - docs/Models/Operations/DeleteExternalAccountRequest.md
  - docs/Models/Operations/DeleteExternalAccountResponse.md
  - docs/Models/Operations/DeleteJWTTemplateRequest.md
  - docs/Models/Operations/DeleteJWTTemplateResponse.md
  - docs/Models/Operations/DeleteOAuthApplicationRequest.md
  - docs/Models/Operations/DeleteOAuthApplicationResponse.md
  - docs/Models/Operations/DeleteOrganizationDomainRequest.md
  - docs/Models/Operations/DeleteOrganizationDomainResponse.md
  - docs/Models/Operations/DeleteOrganizationLogoRequest.md
  - docs/Models/Operations/DeleteOrganizationLogoResponse.md
  - docs/Models/Operations/DeleteOrganizationMembershipRequest.md
  - docs/Models/Operations/DeleteOrganizationMembershipResponse.md
  - docs/Models/Operations/DeleteOrganizationRequest.md
  - docs/Models/Operations/DeleteOrganizationResponse.md
  - docs/Models/Operations/DeletePhoneNumberRequest.md
  - docs/Models/Operations/DeletePhoneNumberResponse.md
  - docs/Models/Operations/DeleteRedirectURLRequest.md
  - docs/Models/Operations/DeleteRedirectURLResponse.md
  - docs/Models/Operations/DeleteSAMLConnectionRequest.md
  - docs/Models/Operations/DeleteSAMLConnectionResponse.md
  - docs/Models/Operations/DeleteSvixAppResponse.md
  - docs/Models/Operations/DeleteTOTPRequest.md
  - docs/Models/Operations/DeleteTOTPResponse.md
  - docs/Models/Operations/DeleteTOTPResponseBody.md
  - docs/Models/Operations/DeleteUserProfileImageRequest.md
  - docs/Models/Operations/DeleteUserProfileImageResponse.md
  - docs/Models/Operations/DeleteUserRequest.md
  - docs/Models/Operations/DeleteUserResponse.md
  - docs/Models/Operations/DisableMFARequest.md
  - docs/Models/Operations/DisableMFAResponse.md
  - docs/Models/Operations/DisableMFAResponseBody.md
  - docs/Models/Operations/File.md
  - docs/Models/Operations/GenerateSvixAuthURLResponse.md
  - docs/Models/Operations/GetClientListRequest.md
  - docs/Models/Operations/GetClientListResponse.md
  - docs/Models/Operations/GetClientRequest.md
  - docs/Models/Operations/GetClientResponse.md
  - docs/Models/Operations/GetEmailAddressRequest.md
  - docs/Models/Operations/GetEmailAddressResponse.md
  - docs/Models/Operations/GetInstanceResponse.md
  - docs/Models/Operations/GetJWKSResponse.md
  - docs/Models/Operations/GetJWTTemplateRequest.md
  - docs/Models/Operations/GetJWTTemplateResponse.md
  - docs/Models/Operations/GetOAuthAccessTokenRequest.md
  - docs/Models/Operations/GetOAuthAccessTokenResponse.md
  - docs/Models/Operations/GetOAuthApplicationRequest.md
  - docs/Models/Operations/GetOAuthApplicationResponse.md
  - docs/Models/Operations/GetOrganizationInvitationRequest.md
  - docs/Models/Operations/GetOrganizationInvitationResponse.md
  - docs/Models/Operations/GetOrganizationRequest.md
  - docs/Models/Operations/GetOrganizationResponse.md
  - docs/Models/Operations/GetPhoneNumberRequest.md
  - docs/Models/Operations/GetPhoneNumberResponse.md
  - docs/Models/Operations/GetPublicInterstitialRequest.md
  - docs/Models/Operations/GetPublicInterstitialResponse.md
  - docs/Models/Operations/GetRedirectURLRequest.md
  - docs/Models/Operations/GetRedirectURLResponse.md
  - docs/Models/Operations/GetSAMLConnectionRequest.md
  - docs/Models/Operations/GetSAMLConnectionResponse.md
  - docs/Models/Operations/GetSessionListRequest.md
  - docs/Models/Operations/GetSessionListResponse.md
  - docs/Models/Operations/GetSessionRequest.md
  - docs/Models/Operations/GetSessionResponse.md
  - docs/Models/Operations/GetSignUpRequest.md
  - docs/Models/Operations/GetSignUpResponse.md
  - docs/Models/Operations/GetTemplateListRequest.md
  - docs/Models/Operations/GetTemplateListResponse.md
  - docs/Models/Operations/GetTemplateRequest.md
  - docs/Models/Operations/GetTemplateResponse.md
  - docs/Models/Operations/GetUserListRequest.md
  - docs/Models/Operations/GetUserListResponse.md
  - docs/Models/Operations/GetUserRequest.md
  - docs/Models/Operations/GetUserResponse.md
  - docs/Models/Operations/GetUsersCountRequest.md
  - docs/Models/Operations/GetUsersCountResponse.md
  - docs/Models/Operations/InstanceGetOrganizationMembershipsRequest.md
  - docs/Models/Operations/InstanceGetOrganizationMembershipsResponse.md
  - docs/Models/Operations/ListAllowlistIdentifiersRequest.md
  - docs/Models/Operations/ListAllowlistIdentifiersResponse.md
  - docs/Models/Operations/ListBlocklistIdentifiersResponse.md
  - docs/Models/Operations/ListDomainsResponse.md
  - docs/Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.md
  - docs/Models/Operations/ListInstanceOrganizationInvitationsRequest.md
  - docs/Models/Operations/ListInstanceOrganizationInvitationsResponse.md
  - docs/Models/Operations/ListInvitationsQueryParamStatus.md
  - docs/Models/Operations/ListInvitationsRequest.md
  - docs/Models/Operations/ListInvitationsResponse.md
  - docs/Models/Operations/ListJWTTemplatesRequest.md
  - docs/Models/Operations/ListJWTTemplatesResponse.md
  - docs/Models/Operations/ListOAuthApplicationsRequest.md
  - docs/Models/Operations/ListOAuthApplicationsResponse.md
  - docs/Models/Operations/ListOrganizationDomainsRequest.md
  - docs/Models/Operations/ListOrganizationDomainsResponse.md
  - docs/Models/Operations/ListOrganizationInvitationsQueryParamStatus.md
  - docs/Models/Operations/ListOrganizationInvitationsRequest.md
  - docs/Models/Operations/ListOrganizationInvitationsResponse.md
  - docs/Models/Operations/ListOrganizationMembershipsRequest.md
  - docs/Models/Operations/ListOrganizationMembershipsResponse.md
  - docs/Models/Operations/ListOrganizationsRequest.md
  - docs/Models/Operations/ListOrganizationsResponse.md
  - docs/Models/Operations/ListPendingOrganizationInvitationsRequest.md
  - docs/Models/Operations/ListPendingOrganizationInvitationsResponse.md
  - docs/Models/Operations/ListRedirectURLsRequest.md
  - docs/Models/Operations/ListRedirectURLsResponse.md
  - docs/Models/Operations/ListSAMLConnectionsRequest.md
  - docs/Models/Operations/ListSAMLConnectionsResponse.md
  - docs/Models/Operations/ListWaitlistEntriesQueryParamStatus.md
  - docs/Models/Operations/ListWaitlistEntriesRequest.md
  - docs/Models/Operations/ListWaitlistEntriesResponse.md
  - docs/Models/Operations/LockUserRequest.md
  - docs/Models/Operations/LockUserResponse.md
  - docs/Models/Operations/MergeOrganizationMetadataRequest.md
  - docs/Models/Operations/MergeOrganizationMetadataRequestBody.md
  - docs/Models/Operations/MergeOrganizationMetadataResponse.md
  - docs/Models/Operations/Object.md
  - docs/Models/Operations/PathParamTemplateType.md
  - docs/Models/Operations/PreviewTemplateRequest.md
  - docs/Models/Operations/PreviewTemplateRequestBody.md
  - docs/Models/Operations/PreviewTemplateResponse.md
  - docs/Models/Operations/PreviewTemplateResponseBody.md
  - docs/Models/Operations/Provider.md
  - docs/Models/Operations/QueryParamStatus.md
  - docs/Models/Operations/RequestBody.md
  - docs/Models/Operations/ResponseBody.md
  - docs/Models/Operations/RevertTemplatePathParamTemplateType.md
  - docs/Models/Operations/RevertTemplateRequest.md
  - docs/Models/Operations/RevertTemplateResponse.md
  - docs/Models/Operations/RevokeActorTokenRequest.md
  - docs/Models/Operations/RevokeActorTokenResponse.md
  - docs/Models/Operations/RevokeInvitationRequest.md
  - docs/Models/Operations/RevokeInvitationResponse.md
  - docs/Models/Operations/RevokeOrganizationInvitationRequest.md
  - docs/Models/Operations/RevokeOrganizationInvitationRequestBody.md
  - docs/Models/Operations/RevokeOrganizationInvitationResponse.md
  - docs/Models/Operations/RevokeSessionRequest.md
  - docs/Models/Operations/RevokeSessionResponse.md
  - docs/Models/Operations/RevokeSignInTokenRequest.md
  - docs/Models/Operations/RevokeSignInTokenResponse.md
  - docs/Models/Operations/RotateOAuthApplicationSecretRequest.md
  - docs/Models/Operations/RotateOAuthApplicationSecretResponse.md
  - docs/Models/Operations/SetUserProfileImageRequest.md
  - docs/Models/Operations/SetUserProfileImageRequestBody.md
  - docs/Models/Operations/SetUserProfileImageResponse.md
  - docs/Models/Operations/Status.md
  - docs/Models/Operations/TemplateSlug.md
  - docs/Models/Operations/TemplateType.md
  - docs/Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.md
  - docs/Models/Operations/ToggleTemplateDeliveryRequest.md
  - docs/Models/Operations/ToggleTemplateDeliveryRequestBody.md
  - docs/Models/Operations/ToggleTemplateDeliveryResponse.md
  - docs/Models/Operations/UnbanUserRequest.md
  - docs/Models/Operations/UnbanUserResponse.md
  - docs/Models/Operations/UnlockUserRequest.md
  - docs/Models/Operations/UnlockUserResponse.md
  - docs/Models/Operations/UpdateDomainRequest.md
  - docs/Models/Operations/UpdateDomainRequestBody.md
  - docs/Models/Operations/UpdateDomainResponse.md
  - docs/Models/Operations/UpdateEmailAddressRequest.md
  - docs/Models/Operations/UpdateEmailAddressRequestBody.md
  - docs/Models/Operations/UpdateEmailAddressResponse.md
  - docs/Models/Operations/UpdateInstanceAuthConfigRequestBody.md
  - docs/Models/Operations/UpdateInstanceAuthConfigResponse.md
  - docs/Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.md
  - docs/Models/Operations/UpdateInstanceOrganizationSettingsResponse.md
  - docs/Models/Operations/UpdateInstanceRequestBody.md
  - docs/Models/Operations/UpdateInstanceResponse.md
  - docs/Models/Operations/UpdateInstanceRestrictionsRequestBody.md
  - docs/Models/Operations/UpdateInstanceRestrictionsResponse.md
  - docs/Models/Operations/UpdateJWTTemplateClaims.md
  - docs/Models/Operations/UpdateJWTTemplateRequest.md
  - docs/Models/Operations/UpdateJWTTemplateRequestBody.md
  - docs/Models/Operations/UpdateJWTTemplateResponse.md
  - docs/Models/Operations/UpdateOAuthApplicationRequest.md
  - docs/Models/Operations/UpdateOAuthApplicationRequestBody.md
  - docs/Models/Operations/UpdateOAuthApplicationResponse.md
  - docs/Models/Operations/UpdateOrganizationDomainRequest.md
  - docs/Models/Operations/UpdateOrganizationDomainRequestBody.md
  - docs/Models/Operations/UpdateOrganizationDomainResponse.md
  - docs/Models/Operations/UpdateOrganizationMembershipMetadataRequest.md
  - docs/Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.md
  - docs/Models/Operations/UpdateOrganizationMembershipMetadataResponse.md
  - docs/Models/Operations/UpdateOrganizationMembershipRequest.md
  - docs/Models/Operations/UpdateOrganizationMembershipRequestBody.md
  - docs/Models/Operations/UpdateOrganizationMembershipResponse.md
  - docs/Models/Operations/UpdateOrganizationRequest.md
  - docs/Models/Operations/UpdateOrganizationRequestBody.md
  - docs/Models/Operations/UpdateOrganizationResponse.md
  - docs/Models/Operations/UpdatePhoneNumberRequest.md
  - docs/Models/Operations/UpdatePhoneNumberRequestBody.md
  - docs/Models/Operations/UpdatePhoneNumberResponse.md
  - docs/Models/Operations/UpdateProductionInstanceDomainRequestBody.md
  - docs/Models/Operations/UpdateProductionInstanceDomainResponse.md
  - docs/Models/Operations/UpdateSAMLConnectionAttributeMapping.md
  - docs/Models/Operations/UpdateSAMLConnectionRequest.md
  - docs/Models/Operations/UpdateSAMLConnectionRequestBody.md
  - docs/Models/Operations/UpdateSAMLConnectionResponse.md
  - docs/Models/Operations/UpdateSignUpRequest.md
  - docs/Models/Operations/UpdateSignUpRequestBody.md
  - docs/Models/Operations/UpdateSignUpResponse.md
  - docs/Models/Operations/UpdateUserMetadataRequest.md
  - docs/Models/Operations/UpdateUserMetadataRequestBody.md
  - docs/Models/Operations/UpdateUserMetadataResponse.md
  - docs/Models/Operations/UpdateUserRequest.md
  - docs/Models/Operations/UpdateUserRequestBody.md
  - docs/Models/Operations/UpdateUserResponse.md
  - docs/Models/Operations/UploadOrganizationLogoFile.md
  - docs/Models/Operations/UploadOrganizationLogoRequest.md
  - docs/Models/Operations/UploadOrganizationLogoRequestBody.md
  - docs/Models/Operations/UploadOrganizationLogoResponse.md
  - docs/Models/Operations/UpsertTemplatePathParamTemplateType.md
  - docs/Models/Operations/UpsertTemplateRequest.md
  - docs/Models/Operations/UpsertTemplateRequestBody.md
  - docs/Models/Operations/UpsertTemplateResponse.md
  - docs/Models/Operations/UserPasskeyDeleteRequest.md
  - docs/Models/Operations/UserPasskeyDeleteResponse.md
  - docs/Models/Operations/UserWeb3WalletDeleteRequest.md
  - docs/Models/Operations/UserWeb3WalletDeleteResponse.md
  - docs/Models/Operations/UsersGetOrganizationInvitationsRequest.md
  - docs/Models/Operations/UsersGetOrganizationInvitationsResponse.md
  - docs/Models/Operations/UsersGetOrganizationMembershipsRequest.md
  - docs/Models/Operations/UsersGetOrganizationMembershipsResponse.md
  - docs/Models/Operations/VerifyClientRequestBody.md
  - docs/Models/Operations/VerifyClientResponse.md
  - docs/Models/Operations/VerifyDomainProxyRequestBody.md
  - docs/Models/Operations/VerifyDomainProxyResponse.md
  - docs/Models/Operations/VerifyPasswordRequest.md
  - docs/Models/Operations/VerifyPasswordRequestBody.md
  - docs/Models/Operations/VerifyPasswordResponse.md
  - docs/Models/Operations/VerifyPasswordResponseBody.md
  - docs/Models/Operations/VerifySessionRequest.md
  - docs/Models/Operations/VerifySessionRequestBody.md
  - docs/Models/Operations/VerifySessionResponse.md
  - docs/Models/Operations/VerifyTOTPRequest.md
  - docs/Models/Operations/VerifyTOTPRequestBody.md
  - docs/Models/Operations/VerifyTOTPResponse.md
  - docs/Models/Operations/VerifyTOTPResponseBody.md
  - docs/sdks/actortokens/README.md
  - docs/sdks/allowlistidentifiers/README.md
  - docs/sdks/betafeatures/README.md
  - docs/sdks/blocklistidentifiers/README.md
  - docs/sdks/clerkbackendapi/README.md
  - docs/sdks/clients/README.md
  - docs/sdks/domains/README.md
  - docs/sdks/emailaddresses/README.md
  - docs/sdks/emailandsmstemplates/README.md
  - docs/sdks/emailsmstemplates/README.md
  - docs/sdks/instancesettings/README.md
  - docs/sdks/invitations/README.md
  - docs/sdks/jwks/README.md
  - docs/sdks/jwttemplates/README.md
  - docs/sdks/miscellaneous/README.md
  - docs/sdks/oauthapplications/README.md
  - docs/sdks/organizationdomains/README.md
  - docs/sdks/organizationinvitations/README.md
  - docs/sdks/organizationmemberships/README.md
  - docs/sdks/organizations/README.md
  - docs/sdks/phonenumbers/README.md
  - docs/sdks/proxychecks/README.md
  - docs/sdks/redirecturls/README.md
  - docs/sdks/samlconnections/README.md
  - docs/sdks/sessions/README.md
  - docs/sdks/signintokens/README.md
  - docs/sdks/signups/README.md
  - docs/sdks/templates/README.md
  - docs/sdks/testingtokens/README.md
  - docs/sdks/users/README.md
  - docs/sdks/waitlistentries/README.md
  - docs/sdks/webhooks/README.md
  - global.json
  - src/Clerk/BackendAPI/ActorTokens.cs
  - src/Clerk/BackendAPI/AllowlistIdentifiers.cs
  - src/Clerk/BackendAPI/BetaFeatures.cs
  - src/Clerk/BackendAPI/BlocklistIdentifiers.cs
  - src/Clerk/BackendAPI/Clerk.BackendAPI.csproj
  - src/Clerk/BackendAPI/ClerkBackendApi.cs
  - src/Clerk/BackendAPI/Clients.cs
  - src/Clerk/BackendAPI/Domains.cs
  - src/Clerk/BackendAPI/EmailAddresses.cs
  - src/Clerk/BackendAPI/EmailAndSmsTemplates.cs
  - src/Clerk/BackendAPI/EmailSMSTemplates.cs
  - src/Clerk/BackendAPI/Hooks/HookTypes.cs
  - src/Clerk/BackendAPI/Hooks/SDKHooks.cs
  - src/Clerk/BackendAPI/InstanceSettings.cs
  - src/Clerk/BackendAPI/Invitations.cs
  - src/Clerk/BackendAPI/Jwks.cs
  - src/Clerk/BackendAPI/JwtTemplates.cs
  - src/Clerk/BackendAPI/Miscellaneous.cs
  - src/Clerk/BackendAPI/Models/Components/Actor.cs
  - src/Clerk/BackendAPI/Models/Components/ActorToken.cs
  - src/Clerk/BackendAPI/Models/Components/ActorTokenActor.cs
  - src/Clerk/BackendAPI/Models/Components/ActorTokenObject.cs
  - src/Clerk/BackendAPI/Models/Components/ActorTokenStatus.cs
  - src/Clerk/BackendAPI/Models/Components/Admin.cs
  - src/Clerk/BackendAPI/Models/Components/AdminVerificationPhoneNumberStatus.cs
  - src/Clerk/BackendAPI/Models/Components/AdminVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/AdminVerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/AdminVerificationWeb3WalletStatus.cs
  - src/Clerk/BackendAPI/Models/Components/AdminVerificationWeb3WalletStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/AllowlistIdentifier.cs
  - src/Clerk/BackendAPI/Models/Components/AllowlistIdentifierObject.cs
  - src/Clerk/BackendAPI/Models/Components/BlocklistIdentifier.cs
  - src/Clerk/BackendAPI/Models/Components/BlocklistIdentifierIdentifierType.cs
  - src/Clerk/BackendAPI/Models/Components/BlocklistIdentifierObject.cs
  - src/Clerk/BackendAPI/Models/Components/BlocklistIdentifiers.cs
  - src/Clerk/BackendAPI/Models/Components/CNameTarget.cs
  - src/Clerk/BackendAPI/Models/Components/Claims.cs
  - src/Clerk/BackendAPI/Models/Components/ClerkError.cs
  - src/Clerk/BackendAPI/Models/Components/ClerkErrorErrorMeta.cs
  - src/Clerk/BackendAPI/Models/Components/Client.cs
  - src/Clerk/BackendAPI/Models/Components/DeletedObject.cs
  - src/Clerk/BackendAPI/Models/Components/Domain.cs
  - src/Clerk/BackendAPI/Models/Components/DomainObject.cs
  - src/Clerk/BackendAPI/Models/Components/Domains.cs
  - src/Clerk/BackendAPI/Models/Components/DomainsEnrollmentModes.cs
  - src/Clerk/BackendAPI/Models/Components/EmailAddress.cs
  - src/Clerk/BackendAPI/Models/Components/EmailAddressObject.cs
  - src/Clerk/BackendAPI/Models/Components/EnrollmentMode.cs
  - src/Clerk/BackendAPI/Models/Components/Error.cs
  - src/Clerk/BackendAPI/Models/Components/ErrorClerkError.cs
  - src/Clerk/BackendAPI/Models/Components/ErrorMeta.cs
  - src/Clerk/BackendAPI/Models/Components/ExternalAccount.cs
  - src/Clerk/BackendAPI/Models/Components/ExternalAccounts.cs
  - src/Clerk/BackendAPI/Models/Components/FromOAuth.cs
  - src/Clerk/BackendAPI/Models/Components/FromOAuthVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/HTTPMetadata.cs
  - src/Clerk/BackendAPI/Models/Components/IdentificationLink.cs
  - src/Clerk/BackendAPI/Models/Components/IdentifierType.cs
  - src/Clerk/BackendAPI/Models/Components/Instance.cs
  - src/Clerk/BackendAPI/Models/Components/InstanceObject.cs
  - src/Clerk/BackendAPI/Models/Components/InstanceRestrictions.cs
  - src/Clerk/BackendAPI/Models/Components/InstanceRestrictionsObject.cs
  - src/Clerk/BackendAPI/Models/Components/InstanceSettings.cs
  - src/Clerk/BackendAPI/Models/Components/InstanceSettingsObject.cs
  - src/Clerk/BackendAPI/Models/Components/Invitation.cs
  - src/Clerk/BackendAPI/Models/Components/InvitationObject.cs
  - src/Clerk/BackendAPI/Models/Components/InvitationRevoked.cs
  - src/Clerk/BackendAPI/Models/Components/InvitationRevokedObject.cs
  - src/Clerk/BackendAPI/Models/Components/InvitationRevokedStatus.cs
  - src/Clerk/BackendAPI/Models/Components/InvitationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/JWTTemplate.cs
  - src/Clerk/BackendAPI/Models/Components/JWTTemplateObject.cs
  - src/Clerk/BackendAPI/Models/Components/Jwks.cs
  - src/Clerk/BackendAPI/Models/Components/Keys.cs
  - src/Clerk/BackendAPI/Models/Components/Meta.cs
  - src/Clerk/BackendAPI/Models/Components/NextAction.cs
  - src/Clerk/BackendAPI/Models/Components/Nonce.cs
  - src/Clerk/BackendAPI/Models/Components/OAuthApplication.cs
  - src/Clerk/BackendAPI/Models/Components/OAuthApplicationObject.cs
  - src/Clerk/BackendAPI/Models/Components/OAuthApplicationWithSecret.cs
  - src/Clerk/BackendAPI/Models/Components/OAuthApplicationWithSecretObject.cs
  - src/Clerk/BackendAPI/Models/Components/OAuthApplications.cs
  - src/Clerk/BackendAPI/Models/Components/OTPVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/OTPVerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/Object.cs
  - src/Clerk/BackendAPI/Models/Components/Organization.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationDomain.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationDomainObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationDomainStatus.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationDomainVerification.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationDomains.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitation.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitationObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitationPublicOrganizationData.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitationWithPublicOrganizationData.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitations.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationInvitationsWithPublicOrganizationData.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationMembership.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationMembershipObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationMembershipOrganization.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationMembershipOrganizationObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationMembershipPublicUserData.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationMemberships.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationSettings.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationSettingsObject.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationWithLogo.cs
  - src/Clerk/BackendAPI/Models/Components/OrganizationWithLogoObject.cs
  - src/Clerk/BackendAPI/Models/Components/Organizations.cs
  - src/Clerk/BackendAPI/Models/Components/Otp.cs
  - src/Clerk/BackendAPI/Models/Components/Passkey.cs
  - src/Clerk/BackendAPI/Models/Components/PasskeyVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/PasskeyVerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/PhoneNumber.cs
  - src/Clerk/BackendAPI/Models/Components/PhoneNumberObject.cs
  - src/Clerk/BackendAPI/Models/Components/PhoneNumberVerification.cs
  - src/Clerk/BackendAPI/Models/Components/ProxyCheck.cs
  - src/Clerk/BackendAPI/Models/Components/ProxyCheckObject.cs
  - src/Clerk/BackendAPI/Models/Components/RedirectURL.cs
  - src/Clerk/BackendAPI/Models/Components/RedirectURLObject.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLAccount.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLAccountObject.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLAccountVerification.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLConnectionAttributeMapping.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLConnectionSAMLConnection.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLConnections.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLErrorClerkError.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/SAMLVerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/Saml.cs
  - src/Clerk/BackendAPI/Models/Components/SamlConnection.cs
  - src/Clerk/BackendAPI/Models/Components/SchemasPasskey.cs
  - src/Clerk/BackendAPI/Models/Components/SchemasPasskeyObject.cs
  - src/Clerk/BackendAPI/Models/Components/SchemasPasskeyVerification.cs
  - src/Clerk/BackendAPI/Models/Components/SchemasSAMLConnection.cs
  - src/Clerk/BackendAPI/Models/Components/SchemasSAMLConnectionObject.cs
  - src/Clerk/BackendAPI/Models/Components/Security.cs
  - src/Clerk/BackendAPI/Models/Components/Session.cs
  - src/Clerk/BackendAPI/Models/Components/SessionActivityResponse.cs
  - src/Clerk/BackendAPI/Models/Components/SessionObject.cs
  - src/Clerk/BackendAPI/Models/Components/SignInToken.cs
  - src/Clerk/BackendAPI/Models/Components/SignInTokenObject.cs
  - src/Clerk/BackendAPI/Models/Components/SignInTokenStatus.cs
  - src/Clerk/BackendAPI/Models/Components/SignUp.cs
  - src/Clerk/BackendAPI/Models/Components/SignUpExternalAccount.cs
  - src/Clerk/BackendAPI/Models/Components/SignUpObject.cs
  - src/Clerk/BackendAPI/Models/Components/SignUpStatus.cs
  - src/Clerk/BackendAPI/Models/Components/SignUpVerification.cs
  - src/Clerk/BackendAPI/Models/Components/SignUpVerifications.cs
  - src/Clerk/BackendAPI/Models/Components/Status.cs
  - src/Clerk/BackendAPI/Models/Components/Strategy.cs
  - src/Clerk/BackendAPI/Models/Components/SvixURL.cs
  - src/Clerk/BackendAPI/Models/Components/Template.cs
  - src/Clerk/BackendAPI/Models/Components/TemplateObject.cs
  - src/Clerk/BackendAPI/Models/Components/TestingToken.cs
  - src/Clerk/BackendAPI/Models/Components/TestingTokenObject.cs
  - src/Clerk/BackendAPI/Models/Components/Ticket.cs
  - src/Clerk/BackendAPI/Models/Components/TicketVerificationSAMLAccountStatus.cs
  - src/Clerk/BackendAPI/Models/Components/TicketVerificationSAMLAccountStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/TicketVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/TicketVerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/TotalCount.cs
  - src/Clerk/BackendAPI/Models/Components/TotalCountObject.cs
  - src/Clerk/BackendAPI/Models/Components/User.cs
  - src/Clerk/BackendAPI/Models/Components/UserObject.cs
  - src/Clerk/BackendAPI/Models/Components/Verification.cs
  - src/Clerk/BackendAPI/Models/Components/VerificationAdmin.cs
  - src/Clerk/BackendAPI/Models/Components/VerificationError.cs
  - src/Clerk/BackendAPI/Models/Components/VerificationOTP.cs
  - src/Clerk/BackendAPI/Models/Components/VerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/VerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/VerificationTicket.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntries.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntry.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitation.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitationObject.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntryObject.cs
  - src/Clerk/BackendAPI/Models/Components/WaitlistEntryStatus.cs
  - src/Clerk/BackendAPI/Models/Components/Web3Signature.cs
  - src/Clerk/BackendAPI/Models/Components/Web3SignatureVerificationStatus.cs
  - src/Clerk/BackendAPI/Models/Components/Web3SignatureVerificationStrategy.cs
  - src/Clerk/BackendAPI/Models/Components/Web3Wallet.cs
  - src/Clerk/BackendAPI/Models/Components/Web3WalletObject.cs
  - src/Clerk/BackendAPI/Models/Components/Web3WalletVerification.cs
  - src/Clerk/BackendAPI/Models/Components/Web3WalletVerificationAdmin.cs
  - src/Clerk/BackendAPI/Models/Errors/ClerkErrors.cs
  - src/Clerk/BackendAPI/Models/Errors/Meta.cs
  - src/Clerk/BackendAPI/Models/Errors/SDKError.cs
  - src/Clerk/BackendAPI/Models/Operations/Actor.cs
  - src/Clerk/BackendAPI/Models/Operations/AddDomainRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/AddDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/AttributeMapping.cs
  - src/Clerk/BackendAPI/Models/Operations/BanUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/BanUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ChangeProductionInstanceDomainRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/ChangeProductionInstanceDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/Claims.cs
  - src/Clerk/BackendAPI/Models/Operations/CodeType.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateActorTokenRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateActorTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateAllowlistIdentifierRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateAllowlistIdentifierResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateBlocklistIdentifierRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateBlocklistIdentifierResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateBulkInvitationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateBulkInvitationsTemplateSlug.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateEmailAddressRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateEmailAddressResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateInvitationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateInvitationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateJWTTemplateRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateJWTTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOAuthApplicationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOAuthApplicationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateOrganizationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreatePhoneNumberRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreatePhoneNumberResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateRedirectURLRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateRedirectURLResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSAMLConnectionRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSAMLConnectionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateObject.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSignInTokenRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSignInTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateSvixAppResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateTestingTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateUserRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateWaitlistEntryRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/CreateWaitlistEntryResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteAllowlistIdentifierRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteAllowlistIdentifierResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteBlocklistIdentifierRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteBlocklistIdentifierResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteDomainRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteEmailAddressRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteEmailAddressResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteExternalAccountRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteExternalAccountResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteJWTTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteJWTTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOAuthApplicationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOAuthApplicationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationDomainRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationLogoRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationLogoResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationMembershipRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationMembershipResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeletePhoneNumberRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeletePhoneNumberResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteRedirectURLRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteRedirectURLResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteSAMLConnectionRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteSAMLConnectionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteSvixAppResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteTOTPRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteTOTPResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteTOTPResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteUserProfileImageRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteUserProfileImageResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DeleteUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DisableMFARequest.cs
  - src/Clerk/BackendAPI/Models/Operations/DisableMFAResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/DisableMFAResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/File.cs
  - src/Clerk/BackendAPI/Models/Operations/GenerateSvixAuthURLResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetClientListRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetClientListResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetClientRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetClientResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetEmailAddressRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetEmailAddressResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetInstanceResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetJWKSResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetJWTTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetJWTTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOAuthAccessTokenRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOAuthAccessTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOAuthApplicationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOAuthApplicationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOrganizationInvitationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOrganizationInvitationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOrganizationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetOrganizationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetPhoneNumberRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetPhoneNumberResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetPublicInterstitialRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetPublicInterstitialResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetRedirectURLRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetRedirectURLResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSAMLConnectionRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSAMLConnectionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSessionListRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSessionListResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSessionRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSessionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSignUpRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetSignUpResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetTemplateListRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetTemplateListResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetUserListRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetUserListResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/GetUsersCountRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/GetUsersCountResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/InstanceGetOrganizationMembershipsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/InstanceGetOrganizationMembershipsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListAllowlistIdentifiersRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListAllowlistIdentifiersResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListBlocklistIdentifiersResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListDomainsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.cs
  - src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListInvitationsQueryParamStatus.cs
  - src/Clerk/BackendAPI/Models/Operations/ListInvitationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListInvitationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListJWTTemplatesRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListJWTTemplatesResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOAuthApplicationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOAuthApplicationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationDomainsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationDomainsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsQueryParamStatus.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationMembershipsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationMembershipsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListOrganizationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListPendingOrganizationInvitationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListPendingOrganizationInvitationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListRedirectURLsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListRedirectURLsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListSAMLConnectionsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListSAMLConnectionsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesQueryParamStatus.cs
  - src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/LockUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/LockUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/Object.cs
  - src/Clerk/BackendAPI/Models/Operations/PathParamTemplateType.cs
  - src/Clerk/BackendAPI/Models/Operations/PreviewTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/PreviewTemplateRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/PreviewTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/PreviewTemplateResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/Provider.cs
  - src/Clerk/BackendAPI/Models/Operations/QueryParamStatus.cs
  - src/Clerk/BackendAPI/Models/Operations/RequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/ResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/RevertTemplatePathParamTemplateType.cs
  - src/Clerk/BackendAPI/Models/Operations/RevertTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RevertTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeActorTokenRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeActorTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeInvitationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeInvitationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeSessionRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeSessionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeSignInTokenRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RevokeSignInTokenResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/RotateOAuthApplicationSecretRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/RotateOAuthApplicationSecretResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/Status.cs
  - src/Clerk/BackendAPI/Models/Operations/TemplateSlug.cs
  - src/Clerk/BackendAPI/Models/Operations/TemplateType.cs
  - src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.cs
  - src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UnbanUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UnbanUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UnlockUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UnlockUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateDomainRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateDomainRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceAuthConfigRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceAuthConfigResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceOrganizationSettingsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRestrictionsRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRestrictionsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateClaims.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateProductionInstanceDomainRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateProductionInstanceDomainResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionAttributeMapping.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSignUpRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSignUpRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateSignUpResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateUserRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateUserRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpdateUserResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoFile.cs
  - src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UpsertTemplatePathParamTemplateType.cs
  - src/Clerk/BackendAPI/Models/Operations/UpsertTemplateRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UpsertTemplateRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/UpsertTemplateResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UserPasskeyDeleteRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UserPasskeyDeleteResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UserWeb3WalletDeleteRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UserWeb3WalletDeleteResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationInvitationsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationInvitationsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationMembershipsRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationMembershipsResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyClientRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyClientResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyDomainProxyRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyDomainProxyResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyPasswordRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyPasswordRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyPasswordResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyPasswordResponseBody.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifySessionRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifySessionRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifySessionResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyTOTPRequest.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyTOTPRequestBody.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyTOTPResponse.cs
  - src/Clerk/BackendAPI/Models/Operations/VerifyTOTPResponseBody.cs
  - src/Clerk/BackendAPI/OauthApplications.cs
  - src/Clerk/BackendAPI/OrganizationDomains.cs
  - src/Clerk/BackendAPI/OrganizationInvitations.cs
  - src/Clerk/BackendAPI/OrganizationMemberships.cs
  - src/Clerk/BackendAPI/Organizations.cs
  - src/Clerk/BackendAPI/PhoneNumbers.cs
  - src/Clerk/BackendAPI/ProxyChecks.cs
  - src/Clerk/BackendAPI/RedirectUrls.cs
  - src/Clerk/BackendAPI/SamlConnections.cs
  - src/Clerk/BackendAPI/Sessions.cs
  - src/Clerk/BackendAPI/SignInTokens.cs
  - src/Clerk/BackendAPI/SignUps.cs
  - src/Clerk/BackendAPI/Templates.cs
  - src/Clerk/BackendAPI/TestingTokens.cs
  - src/Clerk/BackendAPI/Users.cs
  - src/Clerk/BackendAPI/Utils/AnyDeserializer.cs
  - src/Clerk/BackendAPI/Utils/BigIntStrConverter.cs
  - src/Clerk/BackendAPI/Utils/DecimalStrConverter.cs
  - src/Clerk/BackendAPI/Utils/EnumConverter.cs
  - src/Clerk/BackendAPI/Utils/FlexibleObjectDeserializer.cs
  - src/Clerk/BackendAPI/Utils/HeaderSerializer.cs
  - src/Clerk/BackendAPI/Utils/IsoDateTimeSerializer.cs
  - src/Clerk/BackendAPI/Utils/RequestBodySerializer.cs
  - src/Clerk/BackendAPI/Utils/ResponseBodyDeserializer.cs
  - src/Clerk/BackendAPI/Utils/Retries/BackoffStrategy.cs
  - src/Clerk/BackendAPI/Utils/Retries/Retries.cs
  - src/Clerk/BackendAPI/Utils/Retries/RetryConfig.cs
  - src/Clerk/BackendAPI/Utils/SecurityMetadata.cs
  - src/Clerk/BackendAPI/Utils/SpeakeasyHttpClient.cs
  - src/Clerk/BackendAPI/Utils/SpeakeasyMetadata.cs
  - src/Clerk/BackendAPI/Utils/URLBuilder.cs
  - src/Clerk/BackendAPI/Utils/Utilities.cs
  - src/Clerk/BackendAPI/WaitlistEntries.cs
  - src/Clerk/BackendAPI/Webhooks.cs
examples:
  GetPublicInterstitial:
    speakeasy-default-get-public-interstitial:
      parameters:
        query:
          frontendApi: "frontend-api_1a2b3c4d"
          publishable_key: "pub_1a2b3c4d"
          frontend_api: "pub_1a2b3c4d"
  GetJWKS:
    speakeasy-default-get-JWKS:
      responses:
        "200":
          application/json: {}
  GetClientList:
    speakeasy-default-get-client-list:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"object": "client", "id": "client_123456789abcd", "session_ids": ["sess_123456789abcd", "sess_23456789abcd"], "sessions": [{"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}, {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}], "sign_in_id": "signin_123456789abcd", "sign_up_id": "signup_123456789abcd", "last_active_session_id": "session_123456789abcd", "updated_at": 1632580323, "created_at": 1622481123}, {"object": "client", "id": "client_123456789abcd", "session_ids": ["sess_123456789abcd", "sess_23456789abcd"], "sessions": [{"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}, {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}], "sign_in_id": "signin_123456789abcd", "sign_up_id": "signup_123456789abcd", "last_active_session_id": "session_123456789abcd", "updated_at": 1632580323, "created_at": 1622481123}, {"object": "client", "id": "client_123456789abcd", "session_ids": ["sess_123456789abcd", "sess_23456789abcd"], "sessions": [], "sign_in_id": "signin_123456789abcd", "sign_up_id": "signup_123456789abcd", "last_active_session_id": "session_123456789abcd", "updated_at": 1632580323, "created_at": 1622481123}]
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  VerifyClient:
    speakeasy-default-verify-client:
      requestBody:
        application/json: {"token": "jwt_token_example"}
      responses:
        "200":
          application/json: {"object": "client", "id": "client_123456789abcd", "session_ids": ["sess_123456789abcd", "sess_23456789abcd"], "sessions": [{"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}, {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}, {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}], "sign_in_id": "signin_123456789abcd", "sign_up_id": "signup_123456789abcd", "last_active_session_id": "session_123456789abcd", "updated_at": 1632580323, "created_at": 1622481123}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetClient:
    speakeasy-default-get-client:
      parameters:
        path:
          client_id: "cli_123456789"
      responses:
        "200":
          application/json: {"object": "client", "id": "client_123456789abcd", "session_ids": ["sess_123456789abcd", "sess_23456789abcd"], "sessions": [{"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}, {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}], "sign_in_id": "signin_123456789abcd", "sign_up_id": "signup_123456789abcd", "last_active_session_id": "session_123456789abcd", "updated_at": 1632580323, "created_at": 1622481123}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateEmailAddress:
    speakeasy-default-create-email-address:
      requestBody:
        application/json: {"user_id": "user_12345", "email_address": "example@clerk.com", "verified": false, "primary": true}
      responses:
        "200":
          application/json: {"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "error": {"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "meta": {}, "clerk_trace_id": "trace_123456789abcd"}, "expire_at": 1620000000, "attempts": 0}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetEmailAddress:
    speakeasy-default-get-email-address:
      parameters:
        path:
          email_address_id: "email_address_id_example"
      responses:
        "200":
          application/json: {"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "error": {"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "meta": {}, "clerk_trace_id": "trace_123456789abcd"}, "expire_at": 558834, "attempts": 544221}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteEmailAddress:
    speakeasy-default-delete-email-address:
      parameters:
        path:
          email_address_id: "email_address_id_example"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateEmailAddress:
    speakeasy-default-update-email-address:
      parameters:
        path:
          email_address_id: "email_address_id_example"
      requestBody:
        application/json: {"verified": false, "primary": true}
      responses:
        "200":
          application/json: {"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "error": {"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "meta": {}, "clerk_trace_id": "trace_123456789abcd"}, "expire_at": 597129, "attempts": 344620}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreatePhoneNumber:
    speakeasy-default-create-phone-number:
      requestBody:
        application/json: {"user_id": "usr_12345", "phone_number": "+11234567890", "verified": true, "primary": false, "reserved_for_second_factor": false}
      responses:
        "200":
          application/json: {"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetPhoneNumber:
    speakeasy-default-get-phone-number:
      parameters:
        path:
          phone_number_id: "phone_12345"
      responses:
        "200":
          application/json: {"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeletePhoneNumber:
    speakeasy-default-delete-phone-number:
      parameters:
        path:
          phone_number_id: "phone_12345"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdatePhoneNumber:
    speakeasy-default-update-phone-number:
      parameters:
        path:
          phone_number_id: "phone_12345"
      requestBody:
        application/json: {"verified": false, "primary": true, "reserved_for_second_factor": true}
      responses:
        "200":
          application/json: {"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetSessionList:
    speakeasy-default-get-session-list:
      parameters:
        query:
          client_id: "client_123"
          user_id: "user_456"
          status: "active"
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}]
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  createSession:
    speakeasy-default-create-session:
      responses:
        "200":
          application/json: {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetSession:
    speakeasy-default-get-session:
      parameters:
        path:
          session_id: "sess_1234567890abcdef"
      responses:
        "200":
          application/json: {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RevokeSession:
    speakeasy-default-revoke-session:
      parameters:
        path:
          session_id: "sess_1234567890abcdef"
      responses:
        "200":
          application/json: {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  VerifySession:
    speakeasy-default-verify-session:
      parameters:
        path:
          session_id: "sess_w8q4g9s60j28fghv00f3"
      requestBody:
        application/json: {"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoic2Vzc193OHF4ZzZzNm9qMjhmZ2h2MDBmMyIsImlhdCI6MTU4MjY0OTg2Mn0.J4KP2L6bEZ6YccHFW4E2vKbOLw_mmO0gF_GNRw-wtLM"}
      responses:
        "200":
          application/json: {"object": "session", "id": "sess_123456789abcd", "user_id": "user_123456789abcd", "client_id": "client_123456789abcd", "actor": null, "status": "active", "last_active_organization_id": "org_123456789abcd", "last_active_at": 1622471123, "expire_at": 1685471123, "abandon_at": 1630471123, "updated_at": 1622532323, "created_at": 1622470000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateSessionToken:
    speakeasy-default-create-session-token:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {}
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateSessionTokenFromTemplate:
    speakeasy-default-create-session-token-from-template:
      parameters:
        path:
          session_id: "ses_123abcd4567"
          template_name: "custom_hasura"
      responses:
        "200":
          application/json: {"object": "token", "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvZSBCbG9nZ3MiLCJpYXQiOjE1MTYyMzkwMjJ9.qKVwLLnbfqfM5VCfU8vDhXXXS0VklRcsErgTpELYgfw"}
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetTemplateList:
    "":
      parameters:
        path:
          template_type: "email"
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}, {"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}, {"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}]
        "400":
          application/json: {"errors": [{"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "clerk_trace_id": "trace_123456789abcd"}], "meta": {}}
  GetTemplate:
    speakeasy-default-get-template:
      parameters:
        path:
          template_type: "email"
          slug: "welcome-email"
      responses:
        "200":
          application/json: {"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ToggleTemplateDelivery:
    speakeasy-default-toggle-template-delivery:
      parameters:
        path:
          template_type: "email"
          slug: "welcome-email"
      requestBody:
        application/json: {"delivered_by_clerk": true}
      responses:
        "200":
          application/json: {"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpsertTemplate:
    speakeasy-default-upsert-template:
      parameters:
        path:
          template_type: "sms"
          slug: "verification-code"
      requestBody:
        application/json: {"name": "Verification Code", "subject": "Your Verification Code", "markup": "<p>Your code: {{code}}</p>", "body": "Use this code to verify your email: {{code}}", "delivered_by_clerk": true, "from_email_name": "hello", "reply_to_email_name": "support"}
      responses:
        "200":
          application/json: {"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RevertTemplate:
    speakeasy-default-revert-template:
      parameters:
        path:
          template_type: "email"
          slug: "welcome-email"
      responses:
        "200":
          application/json: {"id": "temp_12345", "object": "template", "instance_id": "inst_67890", "resource_type": "system", "template_type": "email", "name": "Welcome Email", "slug": "welcome_email", "position": 1, "can_revert": false, "can_delete": true, "subject": "Welcome to our service!", "markup": "<p>Hello, {{ user.name }}</p>", "body": "You are now signed up. Welcome!", "available_variables": ["user.name", "user.email"], "required_variables": ["user.name"], "from_email_name": "Clerk Support", "reply_to_email_name": "support@clerk.com", "delivered_by_clerk": true, "updated_at": 1610000000, "created_at": 1600000000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  PreviewTemplate:
    speakeasy-default-preview-template:
      parameters:
        path:
          template_type: "email"
          slug: "welcome-email"
      requestBody:
        application/json: {"subject": "Welcome to our service!", "body": "Hi, thank you for joining our service.", "from_email_name": "hello", "reply_to_email_name": "support"}
      responses:
        "200":
          application/json: {}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetUserList:
    "":
      parameters:
        query:
          email_address: ["test@example.com"]
          phone_number: ["+12345678901"]
          external_id: ["external-id-123"]
          username: ["user123"]
          web3_wallet: ["0x123456789abcdef0x123456789abcdef"]
          user_id: ["user-id-123"]
          organization_id: ["org-id-123"]
          query: "John"
          last_active_at_before: 1700690400000
          last_active_at_after: 1700690400000
          last_active_at_since: 1700690400000
          created_at_before: 1730160000000
          created_at_after: 1730160000000
          limit: 20
          offset: 10
          order_by: "-created_at"
      responses:
        "200":
          application/json: [{"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_123", "object": "email_address", "email_address": "john.doe@example.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "expire_at": 547272, "attempts": 678317}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1609459200, "updated_at": 1609459200}], "phone_numbers": [{"id": "phone_id_123", "object": "phone_number", "phone_number": "+12345678901", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "attempts": 2, "expire_at": 1622852400}, "linked_to": [{"type": "oauth_google", "id": "link_id_123"}], "created_at": 1609459200, "updated_at": 1609459200}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}, {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_123", "object": "email_address", "email_address": "john.doe@example.com", "reserved": false, "verification": {"status": "verified", "strategy": "email_link", "expire_at": 1615462399, "attempts": 1}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1609459200, "updated_at": 1609459200}], "phone_numbers": [{"id": "phone_id_123", "object": "phone_number", "phone_number": "+12345678901", "reserved": false, "verification": {"status": "verified", "strategy": "phone_code", "attempts": 2, "expire_at": 1622852400}, "linked_to": [{"type": "oauth_google", "id": "link_id_123"}], "created_at": 1609459200, "updated_at": 1609459200}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}, {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_123", "object": "email_address", "email_address": "john.doe@example.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "expire_at": 1620000000, "attempts": 0}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1609459200, "updated_at": 1609459200}], "phone_numbers": [{"id": "phone_id_123", "object": "phone_number", "phone_number": "+12345678901", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "attempts": 2, "expire_at": 1622852400}, "linked_to": [{"type": "oauth_google", "id": "link_id_123"}], "created_at": 1609459200, "updated_at": 1609459200}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}]
        "400":
          application/json: {"errors": [{"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "clerk_trace_id": "trace_123456789abcd"}], "meta": {}}
  CreateUser:
    speakeasy-default-create-user:
      requestBody:
        application/json: {"external_id": "ext-id-001", "first_name": "John", "last_name": "Doe", "email_address": ["john.doe@example.com"], "phone_number": ["+12345678901"], "web3_wallet": ["0x123456789abcdef0x123456789abcdef"], "username": "johndoe123", "password": "Secure*Pass4", "password_digest": "$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc", "skip_password_checks": false, "skip_password_requirement": false, "totp_secret": "base32totpsecretkey", "backup_codes": ["123456", "654321"], "public_metadata": {"role": "user"}, "private_metadata": {"internal_id": "789"}, "unsafe_metadata": {"preferences": {"theme": "dark"}}, "created_at": "2023-03-15T07:15:20.902Z"}
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "saml", "external_verification_redirect_url": "https://example.com/saml_callback", "error": null, "expire_at": 1622852400, "attempts": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetUsersCount:
    speakeasy-default-get-users-count:
      parameters:
        query:
          email_address: ["user@example.com"]
          phone_number: ["+1234567890"]
          external_id: ["external-id-123"]
          username: ["username123"]
          web3_wallet: ["0x123456789abcdef"]
          user_id: ["user-id-123"]
          query: "John Doe"
      responses:
        "200":
          application/json: {"object": "total_count", "total_count": 100}
        "422":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
    "":
      parameters:
        query:
          email_address: ["user@example.com"]
          phone_number: ["+1234567890"]
          external_id: ["external-id-123"]
          username: ["username123"]
          web3_wallet: ["0x123456789abcdef"]
          user_id: ["user-id-123"]
          organization_id: ["John Doe"]
          last_active_at_before: 1700690400000
          last_active_at_after: 1700690400000
          last_active_at_since: 1700690400000
          created_at_before: 1730160000000
          created_at_after: 1730160000000
      responses:
        "200":
          application/json: {"object": "total_count", "total_count": 100}
        "422":
          application/json: {"errors": [{"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "clerk_trace_id": "trace_123456789abcd"}], "meta": {}}
  GetUser:
    speakeasy-default-get-user:
      parameters:
        path:
          user_id: "usr_1"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "error": {"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "meta": {}, "clerk_trace_id": "trace_123456789abcd"}, "expire_at": 558834, "attempts": 544221}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateUser:
    speakeasy-default-update-user:
      parameters:
        path:
          user_id: "usr_1"
      requestBody:
        application/json: {"external_id": "ext_123", "first_name": "Jane", "last_name": "Doe", "primary_email_address_id": "eml_12345", "notify_primary_email_address_changed": true, "primary_phone_number_id": "phn_67890", "primary_web3_wallet_id": "wlt_123", "username": "janedoe", "profile_image_id": "img_789", "password": "secretPass123!", "password_digest": "$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc", "skip_password_checks": false, "sign_out_of_other_sessions": true, "totp_secret": "ABCD1234EFGH5678", "backup_codes": ["123456", "654321"], "public_metadata": {"theme": "dark"}, "private_metadata": {"vip": true}, "unsafe_metadata": {"age": 30}, "delete_self_enabled": true, "create_organization_enabled": false, "created_at": "2021-04-05T14:30:00.000Z"}
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "saml", "external_verification_redirect_url": "https://example.com/saml_callback", "error": null, "expire_at": 1622852400, "attempts": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteUser:
    speakeasy-default-delete-user:
      parameters:
        path:
          user_id: "usr_1"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  BanUser:
    speakeasy-default-ban-user:
      parameters:
        path:
          user_id: "user_12345"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "error": {"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "meta": {}, "clerk_trace_id": "trace_123456789abcd"}, "expire_at": 22794, "attempts": 431195}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "web3_metamask_signature", "nonce": "nonce_value", "attempts": null, "expire_at": null}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "saml", "external_verification_redirect_url": "https://example.com/saml_callback", "error": null, "expire_at": 1622852400, "attempts": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UnbanUser:
    speakeasy-default-unban-user:
      parameters:
        path:
          user_id: "user_12345"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "saml", "external_verification_redirect_url": "https://example.com/saml_callback", "error": null, "expire_at": 1622852400, "attempts": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  LockUser:
    speakeasy-default-lock-user:
      parameters:
        path:
          user_id: "user_123456789"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "saml", "external_verification_redirect_url": "https://example.com/saml_callback", "error": null, "expire_at": 1622852400, "attempts": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UnlockUser:
    speakeasy-default-unlock-user:
      parameters:
        path:
          user_id: "user_12345"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  SetUserProfileImage:
    speakeasy-default-set-user-profile-image:
      parameters:
        path:
          user_id: "usr_test123"
      requestBody:
        multipart/form-data: {}
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteUserProfileImage:
    speakeasy-default-delete-user-profile-image:
      parameters:
        path:
          user_id: "usr_test123"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "web3_metamask_signature", "nonce": "nonce_value", "attempts": null, "expire_at": null}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "ticket", "attempts": null, "expire_at": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateUserMetadata:
    speakeasy-default-update-user-metadata:
      parameters:
        path:
          user_id: "user_123456789"
      responses:
        "200":
          application/json: {"id": "user_id_123", "object": "user", "external_id": "external_user_id_123", "primary_email_address_id": "email_id_123", "primary_phone_number_id": "phone_id_123", "primary_web3_wallet_id": "wallet_id_123", "username": "john_doe", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/new-profile.jpg", "has_image": true, "public_metadata": {"role": "admin"}, "private_metadata": {"ssn": "123-45-6789"}, "unsafe_metadata": {"theme": "dark"}, "email_addresses": [{"id": "email_id_56789", "object": "email_address", "email_address": "example@clerk.com", "reserved": false, "verification": {"status": "verified", "strategy": "admin", "error": {"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "meta": {}, "clerk_trace_id": "trace_123456789abcd"}, "expire_at": 718607, "attempts": 86760}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "created_at": 1615458901, "updated_at": 1615459001}], "phone_numbers": [{"id": "ph_123456789", "object": "phone_number", "phone_number": "+11234567890", "reserved_for_second_factor": false, "default_second_factor": true, "reserved": false, "verification": {"status": "verified", "strategy": "email_code", "attempts": 1, "expire_at": 1615462399}, "linked_to": [{"type": "oauth_google", "id": "link_12345"}], "backup_codes": ["code1", "code2", "code3"], "created_at": 1594842023, "updated_at": 1604842023}], "web3_wallets": [{"id": "wallet_id_123", "object": "web3_wallet", "web3_wallet": "0x123456789abcdef", "verification": {"status": "verified", "strategy": "admin", "attempts": 0, "expire_at": 1620000000}, "created_at": 1609459200, "updated_at": 1609459200}], "passkeys": [{"id": "passkey_id_123", "object": "passkey", "name": "My Passkey", "last_used_at": 1615852800, "verification": {"status": "verified", "strategy": "passkey", "nonce": "nonce", "attempts": null, "expire_at": null}}], "password_enabled": true, "two_factor_enabled": true, "totp_enabled": true, "backup_code_enabled": true, "mfa_enabled_at": 1615852800, "mfa_disabled_at": null, "external_accounts": [{}], "saml_accounts": [{"id": "saml_account_id_123", "object": "saml_account", "provider": "SAML Provider", "active": true, "email_address": "user@example.com", "first_name": "John", "last_name": "Doe", "provider_user_id": "prov_user_id_123", "public_metadata": {"department": "IT"}, "verification": {"status": "verified", "strategy": "saml", "external_verification_redirect_url": "https://example.com/saml_callback", "error": null, "expire_at": 1622852400, "attempts": null}, "saml_connection": {"id": "sc_1234567890", "name": "My Company SAML Config", "domain": "mycompany.com", "active": true, "provider": "saml_custom", "sync_user_attributes": true, "allow_subdomains": false, "allow_idp_initiated": true, "created_at": 1614768000, "updated_at": 1622540800}}], "last_sign_in_at": 1622852400, "banned": false, "locked": false, "lockout_expires_in_seconds": null, "verification_attempts_remaining": 5, "updated_at": 1622852400, "created_at": 1609459200, "delete_self_enabled": true, "create_organization_enabled": true, "last_active_at": 1700690400000, "legal_accepted_at": 1700690400000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetOAuthAccessToken:
    speakeasy-default-get-O-auth-access-token:
      parameters:
        path:
          user_id: "user_123"
          provider: "oauth_google"
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"object": "oauth_access_token", "external_account_id": "external_account_456", "provider_user_id": "provider_user_789", "token": "access_token_123", "provider": "oauth_google", "label": "Primary account", "scopes": ["email", "profile"], "token_secret": "token_secret_xyz"}]
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UsersGetOrganizationMemberships:
    speakeasy-default-users-get-organization-memberships:
      parameters:
        path:
          user_id: "usr_1234567890"
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "profile_image_url": "https://glum-shoulder.name/", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}], "total_count": 1}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UsersGetOrganizationInvitations:
    speakeasy-default-users-get-organization-invitations:
      parameters:
        path:
          user_id: "<id>"
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{}], "total_count": 375907}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  VerifyPassword:
    speakeasy-default-verify-password:
      parameters:
        path:
          user_id: "user_123"
      requestBody:
        application/json: {"password": "securepassword123"}
      responses:
        "200":
          application/json: {"verified": true}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  VerifyTOTP:
    speakeasy-default-verify-TOTP:
      parameters:
        path:
          user_id: "usr_1a2b3c"
      requestBody:
        application/json: {"code": "123456"}
      responses:
        "200":
          application/json: {"verified": true, "code_type": "totp"}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DisableMFA:
    speakeasy-default-disable-MFA:
      parameters:
        path:
          user_id: "user_123456"
      responses:
        "200":
          application/json: {"user_id": "user_123456"}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteBackupCode:
    speakeasy-default-delete-backup-code:
      parameters:
        path:
          user_id: "<id>"
      responses:
        "200":
          application/json: {}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UserPasskeyDelete:
    speakeasy-default-user-passkey-delete:
      parameters:
        path:
          user_id: "<id>"
          passkey_identification_id: "<id>"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateUserTOTP:
    speakeasy-default-create-user-TOTP:
      parameters:
        path:
          user_id: "<id>"
      responses:
        "200":
          application/json: {"object": "<value>", "id": "<id>", "secret": "<value>", "uri": "https://golden-signature.com/", "verified": true, "key": "<value>", "key1": "<value>"}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteTOTP:
    speakeasy-default-delete-TOTP:
      parameters:
        path:
          user_id: "<id>"
      responses:
        "200":
          application/json: {}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteExternalAccount:
    speakeasy-default-delete-external-account:
      parameters:
        path:
          user_id: "<id>"
          external_account_id: "<id>"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UserWeb3WalletDelete:
    speakeasy-default-user-web3-wallet-delete:
      parameters:
        path:
          user_id: "<id>"
          web3_wallet_identification_id: "<id>"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateInvitation:
    speakeasy-default-create-invitation:
      requestBody:
        application/json: {"email_address": "user@example.com", "redirect_url": "https://example.com/welcome", "notify": true, "ignore_existing": "​false"}
      responses:
        "200":
          application/json: {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListInvitations:
    speakeasy-default-list-invitations:
      parameters:
        query:
          limit: 20
          offset: 10
          status: "pending"
          order_by: "pending"
      responses:
        "200":
          application/json: [{"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}, {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}, {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}]
  CreateBulkInvitations:
    speakeasy-default-create-bulk-invitations:
      responses:
        "200":
          application/json: [{"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}, {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}]
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RevokeInvitation:
    speakeasy-default-revoke-invitation:
      parameters:
        path:
          invitation_id: "inv_123"
      responses:
        "200":
          application/json: {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": true, "status": "revoked", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListInstanceOrganizationInvitations:
    speakeasy-default-list-instance-organization-invitations:
      parameters:
        query:
          limit: 20
          offset: 10
          order_by: "-created_at"
      responses:
        "200":
          application/json: {"data": [], "total_count": 255187}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateOrganizationInvitation:
    speakeasy-default-create-organization-invitation:
      parameters:
        path:
          organization_id: "org_12345"
      requestBody:
        application/json: {"email_address": "user@example.com", "inviter_user_id": "user_67890", "role": "admin", "public_metadata": {"key": "value"}, "private_metadata": {"private_key": "secret_value"}, "redirect_url": "https://example.com/welcome"}
      responses:
        "200":
          application/json: {"object": "organization_invitation", "id": "inv_12345", "email_address": "user@example.com", "role": "admin", "role_name": "<value>", "organization_id": "org_12345", "status": "pending", "public_metadata": {"key": "value"}, "private_metadata": {"private_key": "secret_value"}, "url": "https://probable-heating.com/", "expires_at": 69025, "created_at": 1622547600, "updated_at": 1622551200}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListOrganizationInvitations:
    speakeasy-default-list-organization-invitations:
      parameters:
        path:
          organization_id: "org_12345"
        query:
          limit: 20
          offset: 10
          status: "pending"
      responses:
        "200":
          application/json: {"data": [{"object": "organization_invitation", "id": "inv_12345", "email_address": "user@example.com", "role": "admin", "role_name": "<value>", "organization_id": "org_12345", "status": "pending", "public_metadata": {"key": "value"}, "private_metadata": {"private_key": "secret_value"}, "url": "https://neglected-plastic.biz", "expires_at": 229716, "created_at": 1622547600, "updated_at": 1622551200}], "total_count": 10}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateOrganizationInvitationBulk:
    speakeasy-default-create-organization-invitation-bulk:
      parameters:
        path:
          organization_id: "org_12345"
      requestBody:
        application/json: [{"email_address": "newmember@example.com", "inviter_user_id": "user_67890", "role": "admin", "redirect_url": "https://example.com/welcome"}]
      responses:
        "200":
          application/json: {"data": [{"object": "organization_invitation", "id": "inv_12345", "email_address": "user@example.com", "role": "admin", "role_name": "<value>", "organization_id": "org_12345", "status": "pending", "public_metadata": {"key": "value"}, "private_metadata": {"private_key": "secret_value"}, "url": "https://stormy-tribe.org/", "expires_at": 107149, "created_at": 1622547600, "updated_at": 1622551200}], "total_count": 10}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListPendingOrganizationInvitations:
    "":
      parameters:
        path:
          organization_id: "org_12345"
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{"object": "organization_invitation", "id": "inv_12345", "email_address": "user@example.com", "role": "member", "role_name": "<value>", "organization_id": "org_12345", "status": "pending", "public_metadata": {"key": "value"}, "url": "https://these-department.net/", "expires_at": 943319, "created_at": 1617981379, "updated_at": 1625581379}], "total_count": 10}
        "400":
          application/json: {"errors": [{"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "clerk_trace_id": "trace_123456789abcd"}], "meta": {}}
  GetOrganizationInvitation:
    speakeasy-default-get-organization-invitation:
      parameters:
        path:
          organization_id: "org_123456789"
          invitation_id: "inv_987654321"
      responses:
        "200":
          application/json: {"object": "organization_invitation", "id": "inv_12345", "email_address": "user@example.com", "role": "admin", "role_name": "<value>", "organization_id": "org_12345", "status": "pending", "public_metadata": {"key": "value"}, "private_metadata": {"private_key": "secret_value"}, "url": "https://normal-making.name", "expires_at": 969961, "created_at": 1622547600, "updated_at": 1622551200}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RevokeOrganizationInvitation:
    speakeasy-default-revoke-organization-invitation:
      parameters:
        path:
          organization_id: "org_123456"
          invitation_id: "inv_123456"
      requestBody:
        application/json: {"requesting_user_id": "usr_12345"}
      responses:
        "200":
          application/json: {"object": "organization_invitation", "id": "inv_12345", "email_address": "user@example.com", "role": "admin", "role_name": "<value>", "organization_id": "org_12345", "status": "pending", "public_metadata": {"key": "value"}, "private_metadata": {"private_key": "secret_value"}, "url": "https://anguished-cassava.biz", "expires_at": 968343, "created_at": 1622547600, "updated_at": 1622551200}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListAllowlistIdentifiers:
    speakeasy-default-list-allowlist-identifiers:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"object": "allowlist_identifier", "id": "alid_123456", "invitation_id": "inv_123456", "identifier": "user@example.com", "identifier_type": "email_address", "instance_id": "instance_12345", "created_at": 1622547600, "updated_at": 1622648600}, {"object": "allowlist_identifier", "id": "alid_123456", "invitation_id": "inv_123456", "identifier": "user@example.com", "identifier_type": "email_address", "instance_id": "instance_12345", "created_at": 1622547600, "updated_at": 1622648600}, {"object": "allowlist_identifier", "id": "alid_123456", "invitation_id": "inv_123456", "identifier": "user@example.com", "identifier_type": "email_address", "instance_id": "instance_12345", "created_at": 1622547600, "updated_at": 1622648600}]
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateAllowlistIdentifier:
    speakeasy-default-create-allowlist-identifier:
      requestBody:
        application/json: {"identifier": "user@example.com", "notify": true}
      responses:
        "200":
          application/json: {"object": "allowlist_identifier", "id": "alid_123456", "invitation_id": "inv_123456", "identifier": "user@example.com", "identifier_type": "email_address", "instance_id": "instance_12345", "created_at": 1622547600, "updated_at": 1622648600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteAllowlistIdentifier:
    speakeasy-default-delete-allowlist-identifier:
      parameters:
        path:
          identifier_id: "example_identifier_id"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListBlocklistIdentifiers:
    speakeasy-default-list-blocklist-identifiers:
      responses:
        "200":
          application/json: {"data": [{"object": "blocklist_identifier", "id": "identifier_id", "identifier": "blocked@example.com", "identifier_type": "email_address", "instance_id": "instance_id_here", "created_at": 1609459200, "updated_at": 1612137600}, {"object": "blocklist_identifier", "id": "identifier_id", "identifier": "blocked@example.com", "identifier_type": "email_address", "instance_id": "instance_id_here", "created_at": 1609459200, "updated_at": 1612137600}, {"object": "blocklist_identifier", "id": "identifier_id", "identifier": "blocked@example.com", "identifier_type": "email_address", "instance_id": "instance_id_here", "created_at": 1609459200, "updated_at": 1612137600}], "total_count": 100}
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateBlocklistIdentifier:
    speakeasy-default-create-blocklist-identifier:
      requestBody:
        application/json: {"identifier": "example@example.com"}
      responses:
        "200":
          application/json: {"object": "blocklist_identifier", "id": "identifier_id", "identifier": "blocked@example.com", "identifier_type": "email_address", "instance_id": "instance_id_here", "created_at": 1609459200, "updated_at": 1612137600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteBlocklistIdentifier:
    speakeasy-default-delete-blocklist-identifier:
      parameters:
        path:
          identifier_id: "identifier123"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateInstanceAuthConfig:
    speakeasy-default-update-instance-auth-config:
      requestBody:
        application/json: {"restricted_to_allowlist": false, "from_email_address": "noreply", "progressive_sign_up": true, "enhanced_email_deliverability": true, "test_mode": true}
      responses:
        "200":
          application/json: {"object": "instance_settings", "id": "inst_123456789", "restricted_to_allowlist": false, "from_email_address": "noreply@clerk.dev", "progressive_sign_up": true, "enhanced_email_deliverability": true}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateProductionInstanceDomain:
    speakeasy-default-update-production-instance-domain:
      requestBody:
        application/json: {"home_url": "https://www.example.com"}
      responses:
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ChangeProductionInstanceDomain:
    speakeasy-default-change-production-instance-domain:
      requestBody:
        application/json: {"home_url": "https://www.newdomain.com"}
      responses:
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateActorToken:
    speakeasy-default-create-actor-token:
      requestBody:
        application/json: {"user_id": "user_1a2b3c", "actor": {"sub": "user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb"}, "expires_in_seconds": 3600, "session_max_duration_in_seconds": 1800}
      responses:
        "200":
          application/json: {"object": "actor_token", "id": "actor_tok_1a2b3c", "status": "pending", "user_id": "user_1a2b3c", "actor": {}, "token": "token_string", "url": "https://example.com/token", "created_at": 1609459200, "updated_at": 1612137600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RevokeActorToken:
    speakeasy-default-revoke-actor-token:
      parameters:
        path:
          actor_token_id: "act_tok_abcdefghijk"
      responses:
        "200":
          application/json: {"object": "actor_token", "id": "actor_tok_1a2b3c", "status": "pending", "user_id": "user_1a2b3c", "actor": {}, "token": "token_string", "url": "https://example.com/token", "created_at": 1609459200, "updated_at": 1612137600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListDomains:
    speakeasy-default-list-domains:
      responses:
        "200":
          application/json: {"data": [{"object": "domain", "id": "domain_id", "name": "example.com", "is_satellite": false, "frontend_api_url": "https://frontend.example.com", "accounts_portal_url": null, "proxy_url": null, "development_origin": "http://localhost:3000", "cname_targets": [{"host": "cname.example.com", "value": "value.example.com", "required": true}]}, {"object": "domain", "id": "domain_id", "name": "example.com", "is_satellite": false, "frontend_api_url": "https://frontend.example.com", "accounts_portal_url": null, "proxy_url": null, "development_origin": "http://localhost:3000", "cname_targets": [{"host": "cname.example.com", "value": "value.example.com", "required": true}]}, {"object": "domain", "id": "domain_id", "name": "example.com", "is_satellite": false, "frontend_api_url": "https://frontend.example.com", "accounts_portal_url": null, "proxy_url": null, "development_origin": "http://localhost:3000", "cname_targets": [{"host": "cname.example.com", "value": "value.example.com", "required": true}]}], "total_count": 1}
  AddDomain:
    speakeasy-default-add-domain:
      requestBody:
        application/json: {"name": "example.com", "is_satellite": true, "proxy_url": "https://proxy.example.com"}
      responses:
        "200":
          application/json: {"object": "domain", "id": "domain_id", "name": "example.com", "is_satellite": false, "frontend_api_url": "https://frontend.example.com", "accounts_portal_url": null, "proxy_url": null, "development_origin": "http://localhost:3000", "cname_targets": [{"host": "cname.example.com", "value": "value.example.com", "required": true}]}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteDomain:
    speakeasy-default-delete-domain:
      parameters:
        path:
          domain_id: "domain_12345"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateDomain:
    speakeasy-default-update-domain:
      parameters:
        path:
          domain_id: "domain_12345"
      requestBody:
        application/json: {"name": "example.com", "proxy_url": "http://proxy.example.com"}
      responses:
        "200":
          application/json: {"object": "domain", "id": "domain_id", "name": "example.com", "is_satellite": false, "frontend_api_url": "https://frontend.example.com", "accounts_portal_url": null, "proxy_url": null, "development_origin": "http://localhost:3000", "cname_targets": [{"host": "cname.example.com", "value": "value.example.com", "required": true}]}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetInstance:
    speakeasy-default-get-instance:
      responses:
        "200":
          application/json: {"object": "instance", "id": "<id>", "environment_type": "development", "allowed_origins": ["http://localhost:3000", "https://some-domain"]}
  UpdateInstance:
    speakeasy-default-update-instance:
      requestBody:
        application/json: {"test_mode": true, "hibp": false, "enhanced_email_deliverability": true, "support_email": "support@example.com", "clerk_js_version": "2.3.1", "development_origin": "http://localhost:3000", "allowed_origins": ["http://localhost:3000", "chrome-extension://extension_uiid", "capacitor://localhost"], "url_based_session_syncing": true}
      responses:
        "422":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateInstanceRestrictions:
    speakeasy-default-update-instance-restrictions:
      requestBody:
        application/json: {"allowlist": false, "blocklist": true, "block_email_subaddresses": true, "block_disposable_email_domains": true, "ignore_dots_for_gmail_addresses": false}
      responses:
        "200":
          application/json: {"object": "instance_restrictions", "allowlist": false, "blocklist": true, "block_email_subaddresses": true, "block_disposable_email_domains": true, "ignore_dots_for_gmail_addresses": false}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateInstanceOrganizationSettings:
    speakeasy-default-update-instance-organization-settings:
      requestBody:
        application/json: {"enabled": true, "max_allowed_memberships": 10, "admin_delete_enabled": false, "domains_enabled": true, "domains_enrollment_modes": ["automatic_invitation", "automatic_suggestion"], "creator_role_id": "creator_role", "domains_default_role_id": "member_role"}
      responses:
        "200":
          application/json: {"object": "organization_settings", "enabled": true, "max_allowed_memberships": 5, "max_allowed_roles": 3, "max_allowed_permissions": 15, "creator_role": "admin", "admin_delete_enabled": true, "domains_enabled": true, "domains_enrollment_modes": ["automatic_invitation", "automatic_suggestion"], "domains_default_role": "member"}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateSvixApp:
    speakeasy-default-create-svix-app:
      responses:
        "200":
          application/json: {"svix_url": "https://app.svix.com/your-instance-url"}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteSvixApp:
    speakeasy-default-delete-svix-app:
      responses:
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GenerateSvixAuthURL:
    speakeasy-default-generate-svix-auth-URL:
      responses:
        "200":
          application/json: {"svix_url": "https://app.svix.com/your-instance-url"}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListJWTTemplates:
    speakeasy-default-list-JWT-templates:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"object": "jwt_template", "id": "jt_1234567890abcdef", "name": "My First JWT Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "created_at": 1609459200, "updated_at": 1612137600}, {"object": "jwt_template", "id": "jt_1234567890abcdef", "name": "My First JWT Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "created_at": 1609459200, "updated_at": 1612137600}, {"object": "jwt_template", "id": "jt_1234567890abcdef", "name": "My First JWT Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "created_at": 1609459200, "updated_at": 1612137600}]
  CreateJWTTemplate:
    speakeasy-default-create-JWT-template:
      requestBody:
        application/json: {"name": "Example Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "signing_key": "PRIVATE_KEY_PLACEHOLDER"}
      responses:
        "200":
          application/json: {"object": "jwt_template", "id": "jt_1234567890abcdef", "name": "My First JWT Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "created_at": 1609459200, "updated_at": 1612137600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetJWTTemplate:
    speakeasy-default-get-JWT-template:
      parameters:
        path:
          template_id: "template_123"
      responses:
        "200":
          application/json: {"object": "jwt_template", "id": "jt_1234567890abcdef", "name": "My First JWT Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "created_at": 1609459200, "updated_at": 1612137600}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateJWTTemplate:
    speakeasy-default-update-JWT-template:
      parameters:
        path:
          template_id: "<id>"
      responses:
        "200":
          application/json: {"object": "jwt_template", "id": "jt_1234567890abcdef", "name": "My First JWT Template", "claims": {}, "lifetime": 3600, "allowed_clock_skew": 5, "custom_signing_key": false, "signing_algorithm": "RS256", "created_at": 1609459200, "updated_at": 1612137600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteJWTTemplate:
    speakeasy-default-delete-JWT-template:
      parameters:
        path:
          template_id: "<id>"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListOrganizations:
    speakeasy-default-list-organizations:
      parameters:
        query:
          limit: 20
          offset: 10
          include_members_count: false
          query: "false"
          order_by: "-name"
          organization_id: ["-name"]
          user_id: ["clerk"]
      responses:
        "200":
          application/json: {"data": [{"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}], "total_count": 1}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateOrganization:
    speakeasy-default-create-organization:
      requestBody:
        application/json: {"name": "NewOrg", "created_by": "user_123", "private_metadata": {"internal_code": "ABC123"}, "public_metadata": {"public_event": "Annual Summit"}, "slug": "neworg", "max_allowed_memberships": 100}
      responses:
        "200":
          application/json: {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetOrganization:
    speakeasy-default-get-organization:
      parameters:
        path:
          organization_id: "org_123"
        query: {}
      responses:
        "200":
          application/json: {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateOrganization:
    speakeasy-default-update-organization:
      parameters:
        path:
          organization_id: "org_123_update"
      requestBody:
        application/json: {"name": "New Organization Name", "slug": "new-org-slug", "max_allowed_memberships": 100, "admin_delete_enabled": true}
      responses:
        "200":
          application/json: {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteOrganization:
    speakeasy-default-delete-organization:
      parameters:
        path:
          organization_id: "org_321_delete"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  MergeOrganizationMetadata:
    speakeasy-default-merge-organization-metadata:
      parameters:
        path:
          organization_id: "org_12345"
      requestBody:
        application/json: {"public_metadata": {"announcement": "We are opening a new office!"}, "private_metadata": {"internal_use_only": "Future plans discussion."}}
      responses:
        "200":
          application/json: {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UploadOrganizationLogo:
    speakeasy-default-upload-organization-logo:
      parameters:
        path:
          organization_id: "org_12345"
      requestBody:
        multipart/form-data: {"uploader_user_id": "user_67890", "file": {"": "path/to/your/logo.png"}}
      responses:
        "200":
          application/json: {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800, "image_url": "https://example.com/image_url.png", "has_image": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteOrganizationLogo:
    speakeasy-default-delete-organization-logo:
      parameters:
        path:
          organization_id: "org_12345"
      responses:
        "200":
          application/json: {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateOrganizationMembership:
    speakeasy-default-create-organization-membership:
      parameters:
        path:
          organization_id: "org_123"
      requestBody:
        application/json: {"user_id": "user_456", "role": "admin"}
      responses:
        "200":
          application/json: {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "profile_image_url": "https://probable-heating.com/", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListOrganizationMemberships:
    speakeasy-default-list-organization-memberships:
      parameters:
        path:
          organization_id: "org_789"
        query:
          limit: 20
          offset: 10
          order_by: "+created_at"
      responses:
        "200":
          application/json: {"data": [{"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}, {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}, {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}], "total_count": 1}
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
    "":
      parameters:
        path:
          organization_id: "org_789"
        query:
          email_address: ["+created_at"]
          last_active_at_before: 1700690400000
          last_active_at_after: 1700690400000
          created_at_before: 1730160000000
          created_at_after: 1730160000000
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read", "write"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "created_at": 1625078400, "updated_at": 1625164800}, {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read", "write"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "created_at": 1625078400, "updated_at": 1625164800}, {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read", "write"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "created_at": 1625078400, "updated_at": 1625164800}], "total_count": 1}
        "401":
          application/json: {"errors": [{"message": "Invalid input", "long_message": "The input provided does not meet the requirements.", "code": "400_bad_request", "clerk_trace_id": "trace_123456789abcd"}], "meta": {}}
  UpdateOrganizationMembership:
    speakeasy-default-update-organization-membership:
      parameters:
        path:
          organization_id: "org_12345"
          user_id: "user_67890"
      requestBody:
        application/json: {"role": "admin"}
      responses:
        "200":
          application/json: {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "profile_image_url": "https://passionate-flu.org", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteOrganizationMembership:
    speakeasy-default-delete-organization-membership:
      parameters:
        path:
          organization_id: "org_12345"
          user_id: "user_67890"
      responses:
        "200":
          application/json: {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "profile_image_url": "https://rundown-governance.org", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateOrganizationMembershipMetadata:
    speakeasy-default-update-organization-membership-metadata:
      parameters:
        path:
          organization_id: "org_123456"
          user_id: "user_654321"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {"id": "org_mem_123", "object": "organization_membership", "role": "member", "permissions": ["read"], "public_metadata": {}, "organization": {"object": "organization", "id": "org_123", "name": "Acme Corp", "slug": "acme-corp", "members_count": 150, "max_allowed_memberships": 300, "admin_delete_enabled": true, "public_metadata": {"public_info": "Info visible to everyone"}, "private_metadata": {"internal_use_only": "Sensitive data"}, "created_by": "user_123456", "created_at": 1625078400, "updated_at": 1625164800}, "public_user_data": {"user_id": "usr_123456", "first_name": "John", "last_name": "Doe", "profile_image_url": "https://secret-bob.name", "image_url": "https://example.com/path/to/image.jpg", "has_image": true, "identifier": "john.doe@example.com"}, "created_at": 1625078400, "updated_at": 1625164800}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  InstanceGetOrganizationMemberships:
    speakeasy-default-instance-get-organization-memberships:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [], "total_count": 1}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "500":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateOrganizationDomain:
    speakeasy-default-create-organization-domain:
      parameters:
        path:
          organization_id: "<id>"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListOrganizationDomains:
    speakeasy-default-list-organization-domains:
      parameters:
        path:
          organization_id: "<id>"
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{}, {}, {}], "total_count": 547272}
        "401":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteOrganizationDomain:
    speakeasy-default-delete-organization-domain:
      parameters:
        path:
          organization_id: "<id>"
          domain_id: "<id>"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateOrganizationDomain:
    speakeasy-default-update-organization-domain:
      parameters:
        path:
          organization_id: "<id>"
          domain_id: "<id>"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  VerifyDomainProxy:
    speakeasy-default-verify-domain-proxy:
      requestBody:
        application/json: {"domain_id": "domain_32hfu3e", "proxy_url": "https://example.com/__clerk"}
      responses:
        "200":
          application/json: {"object": "proxy_check", "id": "chk_3498fd", "domain_id": "domain_32hfu3e", "last_run_at": 1622547600, "proxy_url": "https://example.com/__clerk", "successful": true, "created_at": 1622547000, "updated_at": 1622547700}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListRedirectURLs:
    speakeasy-default-list-redirect-UR-ls:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: [{"object": "redirect_url", "id": "red_12345", "url": "https://my-app.com/oauth-callback", "created_at": 1610000000, "updated_at": 1620000000}, {"object": "redirect_url", "id": "red_12345", "url": "https://my-app.com/oauth-callback", "created_at": 1610000000, "updated_at": 1620000000}, {"object": "redirect_url", "id": "red_12345", "url": "https://my-app.com/oauth-callback", "created_at": 1610000000, "updated_at": 1620000000}]
  CreateRedirectURL:
    speakeasy-default-create-redirect-URL:
      requestBody:
        application/json: {"url": "https://my-app.com/oauth-callback"}
      responses:
        "200":
          application/json: {"object": "redirect_url", "id": "red_12345", "url": "https://my-app.com/oauth-callback", "created_at": 1610000000, "updated_at": 1620000000}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetRedirectURL:
    speakeasy-default-get-redirect-URL:
      parameters:
        path:
          id: "redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3"
      responses:
        "200":
          application/json: {"object": "redirect_url", "id": "red_12345", "url": "https://my-app.com/oauth-callback", "created_at": 1610000000, "updated_at": 1620000000}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteRedirectURL:
    speakeasy-default-delete-redirect-URL:
      parameters:
        path:
          id: "redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateSignInToken:
    speakeasy-default-create-sign-in-token:
      requestBody:
        application/json: {"user_id": "user_12345", "expires_in_seconds": 2592000}
      responses:
        "200":
          application/json: {"object": "sign_in_token", "id": "token_12345", "status": "pending", "user_id": "user_12345", "token": "secret_token", "url": "https://example.com/signin/token", "created_at": 1609459200, "updated_at": 1612137600}
        "404":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RevokeSignInToken:
    speakeasy-default-revoke-sign-in-token:
      parameters:
        path:
          sign_in_token_id: "tok_test_1234567890"
      responses:
        "200":
          application/json: {"object": "sign_in_token", "id": "token_12345", "status": "pending", "user_id": "user_12345", "token": "secret_token", "url": "https://example.com/signin/token", "created_at": 1609459200, "updated_at": 1612137600}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateSignUp:
    speakeasy-default-update-sign-up:
      parameters:
        path:
          id: "signup_1234567890abcdef"
      requestBody:
        application/json: {"external_id": "ext_id_7890abcdef123456", "custom_action": false}
      responses:
        "200":
          application/json: {"object": "sign_up_attempt", "id": "signup_1234567890abcdef", "status": "complete", "required_fields": ["email_address"], "optional_fields": ["first_name", "last_name"], "missing_fields": ["phone_number"], "unverified_fields": ["email_address"], "verifications": {"email_address": {}, "phone_number": {}, "web3_wallet": {}, "external_account": {}}, "username": "user_123456", "email_address": "user@example.com", "phone_number": "+1234567890", "web3_wallet": "0x1234567890abcdef1234567890abcdef12345678", "password_enabled": true, "first_name": "John", "last_name": "Doe", "custom_action": false, "external_id": "ext_id_7890abcdef123456", "created_session_id": "sess_1234567890abcdef", "created_user_id": "user_1234567890abcdef", "abandon_at": 1609459200, "legal_accepted_at": 1700690400000}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListOAuthApplications:
    speakeasy-default-list-O-auth-applications:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{"object": "oauth_application", "id": "oauth_app_1234", "instance_id": "instance_5678", "name": "Example OAuth App", "client_id": "client_12345", "public": false, "scopes": "profile email", "redirect_uris": ["<value>", "<value>", "<value>"], "callback_url": "https://example.com/oauth/callback", "authorize_url": "https://example.com/authorize", "token_fetch_url": "https://example.com/oauth/token", "user_info_url": "https://example.com/userinfo", "discovery_url": "https://remorseful-concentration.biz", "token_introspection_url": "https://primary-paintwork.com/", "created_at": 1609459200, "updated_at": 1612137600}], "total_count": 1}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateOAuthApplication:
    speakeasy-default-create-O-auth-application:
      requestBody:
        application/json: {"name": "Example App", "callback_url": "https://example.com/oauth/callback", "scopes": "profile email public_metadata", "public": true}
      responses:
        "200":
          application/json: {"object": "oauth_application", "id": "oauth_app_1234", "instance_id": "instance_5678", "name": "Example OAuth App", "client_id": "client_12345", "public": false, "scopes": "profile email", "redirect_uris": ["<value>"], "callback_url": "https://example.com/oauth/callback", "authorize_url": "https://example.com/authorize", "token_fetch_url": "https://example.com/oauth/token", "user_info_url": "https://example.com/userinfo", "discovery_url": "https://probable-heating.com/", "token_introspection_url": "https://standard-utilization.com/", "created_at": 1609459200, "updated_at": 1612137600, "client_secret": "secretXYZ123"}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetOAuthApplication:
    speakeasy-default-get-O-auth-application:
      parameters:
        path:
          oauth_application_id: "oauth_app_12345"
      responses:
        "200":
          application/json: {"object": "oauth_application", "id": "oauth_app_1234", "instance_id": "instance_5678", "name": "Example OAuth App", "client_id": "client_12345", "public": false, "scopes": "profile email", "redirect_uris": ["<value>", "<value>"], "callback_url": "https://example.com/oauth/callback", "authorize_url": "https://example.com/authorize", "token_fetch_url": "https://example.com/oauth/token", "user_info_url": "https://example.com/userinfo", "discovery_url": "https://normal-making.name", "token_introspection_url": "https://lavish-ice-cream.biz", "created_at": 1609459200, "updated_at": 1612137600}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateOAuthApplication:
    speakeasy-default-update-O-auth-application:
      parameters:
        path:
          oauth_application_id: "oauth_app_67890"
      requestBody:
        application/json: {"name": "Updated OAuth App Name", "callback_url": "https://example.com/oauth/callback", "scopes": "profile email public_metadata private_metadata"}
      responses:
        "200":
          application/json: {"object": "oauth_application", "id": "oauth_app_1234", "instance_id": "instance_5678", "name": "Example OAuth App", "client_id": "client_12345", "public": false, "scopes": "profile email", "redirect_uris": ["<value>", "<value>", "<value>"], "callback_url": "https://example.com/oauth/callback", "authorize_url": "https://example.com/authorize", "token_fetch_url": "https://example.com/oauth/token", "user_info_url": "https://example.com/userinfo", "discovery_url": "https://passionate-flu.org", "token_introspection_url": "https://lumbering-wheel.com", "created_at": 1609459200, "updated_at": 1612137600}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteOAuthApplication:
    speakeasy-default-delete-O-auth-application:
      parameters:
        path:
          oauth_application_id: "oauth_app_09876"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  RotateOAuthApplicationSecret:
    speakeasy-default-rotate-O-auth-application-secret:
      parameters:
        path:
          oauth_application_id: "oauth_application_12345"
      responses:
        "200":
          application/json: {"object": "oauth_application", "id": "oauth_app_1234", "instance_id": "instance_5678", "name": "Example OAuth App", "client_id": "client_12345", "public": false, "scopes": "profile email", "redirect_uris": ["<value>", "<value>", "<value>"], "callback_url": "https://example.com/oauth/callback", "authorize_url": "https://example.com/authorize", "token_fetch_url": "https://example.com/oauth/token", "user_info_url": "https://example.com/userinfo", "discovery_url": "https://enchanting-language.org", "token_introspection_url": "https://tempting-popularity.net/", "created_at": 1609459200, "updated_at": 1612137600, "client_secret": "secretXYZ123"}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  ListSAMLConnections:
    speakeasy-default-list-SAML-connections:
      parameters:
        query:
          limit: 20
          offset: 10
      responses:
        "200":
          application/json: {"data": [{"object": "saml_connection", "id": "<id>", "name": "<value>", "domain": "neglected-plastic.biz", "idp_entity_id": "<id>", "idp_sso_url": "https://crooked-overload.name/", "idp_certificate": "<value>", "acs_url": "https://secret-bob.com/", "sp_entity_id": "<id>", "sp_metadata_url": "https://memorable-overcoat.com", "active": true, "provider": "<value>", "user_count": 367745, "sync_user_attributes": true, "created_at": 73227, "updated_at": 931165}, {"object": "saml_connection", "id": "<id>", "name": "<value>", "domain": "odd-sustenance.info", "idp_entity_id": "<id>", "idp_sso_url": "https://glorious-strategy.com/", "idp_certificate": "<value>", "acs_url": "https://insistent-tinderbox.biz", "sp_entity_id": "<id>", "sp_metadata_url": "https://unpleasant-chairperson.info/", "active": true, "provider": "<value>", "user_count": 432930, "sync_user_attributes": true, "created_at": 103421, "updated_at": 523875}, {"object": "saml_connection", "id": "<id>", "name": "<value>", "domain": "tempting-handle.org", "idp_entity_id": "<id>", "idp_sso_url": "https://imaginative-cap.biz/", "idp_certificate": "<value>", "acs_url": "https://animated-ostrich.org", "sp_entity_id": "<id>", "sp_metadata_url": "https://bowed-poppy.name", "active": false, "provider": "<value>", "user_count": 816637, "sync_user_attributes": false, "created_at": 81309, "updated_at": 164965}], "total_count": 5}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateSAMLConnection:
    speakeasy-default-create-SAML-connection:
      requestBody:
        application/json: {"name": "My SAML Connection", "domain": "example.org", "provider": "saml_custom", "idp_entity_id": "http://idp.example.org/", "idp_sso_url": "http://idp.example.org/sso", "idp_certificate": "MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT...", "idp_metadata_url": "http://idp.example.org/metadata.xml", "idp_metadata": "<EntityDescriptor ...", "attribute_mapping": {"user_id": "nameid", "email_address": "mail", "first_name": "givenName", "last_name": "surname"}}
      responses:
        "200":
          application/json: {"object": "saml_connection", "id": "<id>", "name": "<value>", "domain": "low-packaging.info", "idp_entity_id": "<id>", "idp_sso_url": "https://black-and-white-secrecy.org/", "idp_certificate": "<value>", "acs_url": "https://deafening-bonnet.net/", "sp_entity_id": "<id>", "sp_metadata_url": "https://outrageous-resolve.org", "active": true, "provider": "<value>", "user_count": 259629, "sync_user_attributes": true, "created_at": 230313, "updated_at": 211337}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetSAMLConnection:
    speakeasy-default-get-SAML-connection:
      parameters:
        path:
          saml_connection_id: "saml_conn_123"
      responses:
        "200":
          application/json: {"object": "saml_connection", "id": "<id>", "name": "<value>", "domain": "rural-mathematics.name", "idp_entity_id": "<id>", "idp_sso_url": "https://willing-impostor.info", "idp_certificate": "<value>", "acs_url": "https://earnest-tuber.info/", "sp_entity_id": "<id>", "sp_metadata_url": "https://boiling-dash.biz", "active": true, "provider": "<value>", "user_count": 552582, "sync_user_attributes": false, "created_at": 380699, "updated_at": 746585}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  UpdateSAMLConnection:
    speakeasy-default-update-SAML-connection:
      parameters:
        path:
          saml_connection_id: "saml_conn_123_update"
      requestBody:
        application/json: {"name": "Example SAML Connection", "domain": "example.com", "idp_entity_id": "entity_123", "idp_sso_url": "https://idp.example.com/sso", "idp_certificate": "MIIDBTCCAe2gAwIBAgIQ...", "idp_metadata_url": "https://idp.example.com/metadata", "idp_metadata": "<EntityDescriptor>...</EntityDescriptor>", "attribute_mapping": {"user_id": "id123", "email_address": "user@example.com", "first_name": "Jane", "last_name": "Doe"}, "active": true, "sync_user_attributes": false, "allow_subdomains": true, "allow_idp_initiated": false}
      responses:
        "200":
          application/json: {"object": "saml_connection", "id": "<id>", "name": "<value>", "domain": "tinted-nectarine.info", "idp_entity_id": "<id>", "idp_sso_url": "https://powerless-juggernaut.org", "idp_certificate": "<value>", "acs_url": "https://unlucky-hydrolyze.biz/", "sp_entity_id": "<id>", "sp_metadata_url": "https://cool-scout.org/", "active": true, "provider": "<value>", "user_count": 464385, "sync_user_attributes": false, "created_at": 693508, "updated_at": 404265}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  DeleteSAMLConnection:
    speakeasy-default-delete-SAML-connection:
      parameters:
        path:
          saml_connection_id: "saml_conn_123_delete"
      responses:
        "200":
          application/json: {"object": "deleted_object", "id": "deleted_object_id_example", "slug": "deleted-object-slug", "deleted": true}
        "402":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  CreateTestingToken:
    speakeasy-default-create-testing-token:
      responses:
        "200":
          application/json: {"object": "testing_token", "token": "1713877200-c_2J2MvPu9PnXcuhbPZNao0LOXqK9A7YrnBn0HmIWxy", "expires_at": 1713880800}
  ListWaitlistEntries:
    speakeasy-default-list-waitlist-entries:
      parameters:
        query:
          limit: 20
          offset: 10
          order_by: "-created_at"
      responses:
        "200":
          application/json: {"data": [{"object": "waitlist_entry", "id": "<id>", "email_address": "Jaylen_Daniel-Haag@yahoo.com", "status": "pending", "created_at": 543511, "updated_at": 155167, "invitation": {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}}, {"object": "waitlist_entry", "id": "<id>", "email_address": "Enid.Bernhard5@gmail.com", "status": "pending", "created_at": 882329, "updated_at": 914872, "invitation": {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}}], "total_count": 843440}
  CreateWaitlistEntry:
    speakeasy-default-create-waitlist-entry:
      responses:
        "200":
          application/json: {"object": "waitlist_entry", "id": "<id>", "email_address": "Demond_Willms@hotmail.com", "status": "pending", "created_at": 469096, "updated_at": 843035, "invitation": {"object": "invitation", "id": "inv_f02930r3", "email_address": "invitee@example.com", "public_metadata": {}, "revoked": false, "status": "pending", "url": "https://example.com/invitations/accept?code=abcd1234", "created_at": 1622549600, "updated_at": 1622553200}}
        "400":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
  GetSignUp:
    speakeasy-default-get-sign-up:
      parameters:
        path:
          id: "<id>"
      responses:
        "200":
          application/json: {"object": "sign_up_attempt", "id": "signup_1234567890abcdef", "status": "complete", "required_fields": ["email_address"], "optional_fields": ["first_name", "last_name"], "missing_fields": ["phone_number"], "unverified_fields": ["email_address"], "verifications": {"email_address": {}, "phone_number": {}, "web3_wallet": {}, "external_account": {}}, "username": "user_123456", "email_address": "user@example.com", "phone_number": "+1234567890", "web3_wallet": "0x1234567890abcdef1234567890abcdef12345678", "password_enabled": true, "first_name": "John", "last_name": "Doe", "custom_action": false, "external_id": "ext_id_7890abcdef123456", "created_session_id": "sess_1234567890abcdef", "created_user_id": "user_1234567890abcdef", "abandon_at": 1609459200, "legal_accepted_at": 1700690400000}
        "403":
          application/json: {"errors": [{"message": "Error message", "long_message": "Longer error message with more details", "code": "error_code", "clerk_trace_id": "trace_id"}], "meta": {}}
examplesVersion: 1.0.0
generatedTests: {}

================
File: .speakeasy/gen.yaml
================
configVersion: 2.0.0
generation:
  sdkClassName: ClerkBackendApi
  maintainOpenAPIOrder: true
  usageSnippets:
    optionalPropertyRendering: withExample
  useClassNamesForArrayFields: true
  fixes:
    nameResolutionDec2023: true
    nameResolutionFeb2025: false
    parameterOrderingFeb2024: true
    requestResponseComponentNamesFeb2024: true
    securityFeb2025: false
  auth:
    oAuth2ClientCredentialsEnabled: true
    oAuth2PasswordEnabled: true
csharp:
  version: 0.6.1
  additionalDependencies:
    - package: Microsoft.AspNetCore
      version: 2.3.0
    - package: System.IdentityModel.Tokens.Jwt
      version: 8.2.0
  author: Clerk
  clientServerStatusCodesAsErrors: true
  defaultErrorName: SDKError
  disableNamespacePascalCasingApr2024: true
  dotnetVersion: net8.0
  enableSourceLink: true
  flattenGlobalSecurity: true
  flatteningOrder: parameters-first
  imports:
    option: openapi
    paths:
      callbacks: Models/Callbacks
      errors: Models/Errors
      operations: Models/Operations
      shared: Models/Components
      webhooks: Models/Webhooks
  includeDebugSymbols: true
  inputModelSuffix: input
  maxMethodParams: 4
  methodArguments: infer-optional-args
  outputModelSuffix: output
  packageName: Clerk.BackendAPI
  packageTags: Clerk SDK
  responseFormat: envelope-http
  sourceDirectory: src

================
File: .speakeasy/workflow.lock
================
speakeasyVersion: 1.509.1
sources:
    clerk-backend-api-OAS:
        sourceNamespace: clerk-openapi
        sourceRevisionDigest: sha256:556f51a93cea637ad2c41ffbdc933686514416b60cbe4c1c28f072577f43af3e
        sourceBlobDigest: sha256:65ff654fae9c0e5b09b29ab9388f006024a09c4189d0ca1289811224214d81fc
        tags:
            - latest
            - speakeasy-sdk-regen-1741121393
            - "2024-10-01"
targets:
    clerk-backend-api:
        source: clerk-backend-api-OAS
        sourceNamespace: clerk-openapi
        sourceRevisionDigest: sha256:556f51a93cea637ad2c41ffbdc933686514416b60cbe4c1c28f072577f43af3e
        sourceBlobDigest: sha256:65ff654fae9c0e5b09b29ab9388f006024a09c4189d0ca1289811224214d81fc
        codeSamplesNamespace: clerk-backend-api-oas-csharp-code-samples
        codeSamplesRevisionDigest: sha256:48d3ab4048648b01da264022fb38bd968d9f1427e8ff4c054c02240bf4d6e23d
workflow:
    workflowVersion: 1.0.0
    speakeasyVersion: latest
    sources:
        clerk-backend-api-OAS:
            inputs:
                - location: https://raw.githubusercontent.com/clerk/openapi-specs/refs/heads/main/bapi/2024-10-01.yml
            overlays:
                - location: ./examples.yaml
            registry:
                location: registry.speakeasyapi.dev/clerk/clerk/clerk-openapi
    targets:
        clerk-backend-api:
            target: csharp
            source: clerk-backend-api-OAS
            publish:
                nuget:
                    apiKey: $nuget_api_key
            codeSamples:
                registry:
                    location: registry.speakeasyapi.dev/clerk/clerk/clerk-backend-api-oas-csharp-code-samples
                blocking: false

================
File: .speakeasy/workflow.yaml
================
workflowVersion: 1.0.0
speakeasyVersion: latest
sources:
    clerk-backend-api-OAS:
        inputs:
            - location: https://raw.githubusercontent.com/clerk/openapi-specs/refs/heads/main/bapi/2024-10-01.yml
        overlays:
            - location: ./examples.yaml
        registry:
            location: registry.speakeasyapi.dev/clerk/clerk/clerk-openapi
targets:
    clerk-backend-api:
        target: csharp
        source: clerk-backend-api-OAS
        publish:
            nuget:
                apiKey: $nuget_api_key
        codeSamples:
            registry:
                location: registry.speakeasyapi.dev/clerk/clerk/clerk-backend-api-oas-csharp-code-samples
            blocking: false

================
File: Clerk.BackendAPI.sln
================
Microsoft Visual Studio Solution File, Format Version 12.00
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Clerk.BackendAPI", "src\Clerk\BackendAPI\Clerk.BackendAPI.csproj", "{F0CE92B5-F3CC-45A2-AA83-118C38724EB1}"
EndProject

Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F0CE92B5-F3CC-45A2-AA83-118C38724EB1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F0CE92B5-F3CC-45A2-AA83-118C38724EB1}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F0CE92B5-F3CC-45A2-AA83-118C38724EB1}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F0CE92B5-F3CC-45A2-AA83-118C38724EB1}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal

================
File: CONTRIBUTING.md
================
# Contributing to This Repository

Thank you for your interest in contributing to this repository. Please note that this repository contains generated code. As such, we do not accept direct changes or pull requests. Instead, we encourage you to follow the guidelines below to report issues and suggest improvements.

## How to Report Issues

If you encounter any bugs or have suggestions for improvements, please open an issue on GitHub. When reporting an issue, please provide as much detail as possible to help us reproduce the problem. This includes:

- A clear and descriptive title
- Steps to reproduce the issue
- Expected and actual behavior
- Any relevant logs, screenshots, or error messages
- Information about your environment (e.g., operating system, software versions)
    - For example can be collected using the `npx envinfo` command from your terminal if you have Node.js installed

## Issue Triage and Upstream Fixes

We will review and triage issues as quickly as possible. Our goal is to address bugs and incorporate improvements in the upstream source code. Fixes will be included in the next generation of the generated code.

## Contact

If you have any questions or need further assistance, please feel free to reach out by opening an issue.

Thank you for your understanding and cooperation!

The Maintainers

================
File: docs/Models/Components/Actor.md
================
# Actor


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/ActorToken.md
================
# ActorToken

Success


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     | Example                                                         |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `Object`                                                        | [ActorTokenObject](../../Models/Components/ActorTokenObject.md) | :heavy_check_mark:                                              | N/A                                                             | actor_token                                                     |
| `Id`                                                            | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | actor_tok_1a2b3c                                                |
| `Status`                                                        | [ActorTokenStatus](../../Models/Components/ActorTokenStatus.md) | :heavy_check_mark:                                              | N/A                                                             | pending                                                         |
| `UserId`                                                        | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | user_1a2b3c                                                     |
| `Actor`                                                         | [ActorTokenActor](../../Models/Components/ActorTokenActor.md)   | :heavy_check_mark:                                              | N/A                                                             | {<br/>"sub": "user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb"<br/>}           |
| `Token`                                                         | *string*                                                        | :heavy_minus_sign:                                              | N/A                                                             | token_string                                                    |
| `Url`                                                           | *string*                                                        | :heavy_minus_sign:                                              | N/A                                                             | https://example.com/token                                       |
| `CreatedAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of creation.<br/>                                | 1609459200                                                      |
| `UpdatedAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of last update.<br/>                             | 1612137600                                                      |

================
File: docs/Models/Components/ActorTokenActor.md
================
# ActorTokenActor


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/ActorTokenObject.md
================
# ActorTokenObject


## Values

| Name         | Value        |
| ------------ | ------------ |
| `ActorToken` | actor_token  |

================
File: docs/Models/Components/ActorTokenStatus.md
================
# ActorTokenStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |

================
File: docs/Models/Components/Admin.md
================
# Admin


## Fields

| Field                                                                         | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `Status`                                                                      | [AdminVerificationStatus](../../Models/Components/AdminVerificationStatus.md) | :heavy_check_mark:                                                            | N/A                                                                           | verified                                                                      |
| `Strategy`                                                                    | [VerificationStrategy](../../Models/Components/VerificationStrategy.md)       | :heavy_check_mark:                                                            | N/A                                                                           | admin                                                                         |
| `Attempts`                                                                    | *long*                                                                        | :heavy_check_mark:                                                            | N/A                                                                           | 0                                                                             |
| `ExpireAt`                                                                    | *long*                                                                        | :heavy_check_mark:                                                            | N/A                                                                           | 1620000000                                                                    |
| `VerifiedAtClient`                                                            | *string*                                                                      | :heavy_minus_sign:                                                            | N/A                                                                           |                                                                               |

================
File: docs/Models/Components/AdminVerificationPhoneNumberStatus.md
================
# AdminVerificationPhoneNumberStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Verified` | verified   |

================
File: docs/Models/Components/AdminVerificationStatus.md
================
# AdminVerificationStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Verified` | verified   |

================
File: docs/Models/Components/AdminVerificationStrategy.md
================
# AdminVerificationStrategy


## Values

| Name    | Value   |
| ------- | ------- |
| `Admin` | admin   |

================
File: docs/Models/Components/AdminVerificationWeb3WalletStatus.md
================
# AdminVerificationWeb3WalletStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Verified` | verified   |

================
File: docs/Models/Components/AdminVerificationWeb3WalletStrategy.md
================
# AdminVerificationWeb3WalletStrategy


## Values

| Name    | Value   |
| ------- | ------- |
| `Admin` | admin   |

================
File: docs/Models/Components/AllowlistIdentifier.md
================
# AllowlistIdentifier

Success


## Fields

| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |
| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `Object`                                                                               | [AllowlistIdentifierObject](../../Models/Components/AllowlistIdentifierObject.md)      | :heavy_minus_sign:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | allowlist_identifier                                                                   |
| `Id`                                                                                   | *string*                                                                               | :heavy_minus_sign:                                                                     | N/A                                                                                    | alid_123456                                                                            |
| `InvitationId`                                                                         | *string*                                                                               | :heavy_minus_sign:                                                                     | N/A                                                                                    | inv_123456                                                                             |
| `Identifier`                                                                           | *string*                                                                               | :heavy_minus_sign:                                                                     | An email address or a phone number.<br/>                                               | user@example.com                                                                       |
| `IdentifierType`                                                                       | [IdentifierType](../../Models/Components/IdentifierType.md)                            | :heavy_minus_sign:                                                                     | N/A                                                                                    | email_address                                                                          |
| `InstanceId`                                                                           | *string*                                                                               | :heavy_minus_sign:                                                                     | N/A                                                                                    | instance_12345                                                                         |
| `CreatedAt`                                                                            | *long*                                                                                 | :heavy_minus_sign:                                                                     | Unix timestamp of creation<br/>                                                        | 1622547600                                                                             |
| `UpdatedAt`                                                                            | *long*                                                                                 | :heavy_minus_sign:                                                                     | Unix timestamp of last update.<br/>                                                    | 1622648600                                                                             |

================
File: docs/Models/Components/AllowlistIdentifierObject.md
================
# AllowlistIdentifierObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name                  | Value                 |
| --------------------- | --------------------- |
| `AllowlistIdentifier` | allowlist_identifier  |

================
File: docs/Models/Components/BlocklistIdentifier.md
================
# BlocklistIdentifier


## Fields

| Field                                                                                             | Type                                                                                              | Required                                                                                          | Description                                                                                       | Example                                                                                           |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `Object`                                                                                          | [BlocklistIdentifierObject](../../Models/Components/BlocklistIdentifierObject.md)                 | :heavy_minus_sign:                                                                                | String representing the object's type. Objects of the same type share the same value.<br/>        | blocklist_identifier                                                                              |
| `Id`                                                                                              | *string*                                                                                          | :heavy_minus_sign:                                                                                | N/A                                                                                               | identifier_id                                                                                     |
| `Identifier`                                                                                      | *string*                                                                                          | :heavy_minus_sign:                                                                                | An email address, email domain, phone number or web3 wallet.<br/>                                 | blocked@example.com                                                                               |
| `IdentifierType`                                                                                  | [BlocklistIdentifierIdentifierType](../../Models/Components/BlocklistIdentifierIdentifierType.md) | :heavy_minus_sign:                                                                                | N/A                                                                                               | email_address                                                                                     |
| `InstanceId`                                                                                      | *string*                                                                                          | :heavy_minus_sign:                                                                                | N/A                                                                                               | instance_id_here                                                                                  |
| `CreatedAt`                                                                                       | *long*                                                                                            | :heavy_minus_sign:                                                                                | Unix timestamp of creation<br/>                                                                   | 1609459200                                                                                        |
| `UpdatedAt`                                                                                       | *long*                                                                                            | :heavy_minus_sign:                                                                                | Unix timestamp of last update.<br/>                                                               | 1612137600                                                                                        |

================
File: docs/Models/Components/BlocklistIdentifierIdentifierType.md
================
# BlocklistIdentifierIdentifierType


## Values

| Name           | Value          |
| -------------- | -------------- |
| `EmailAddress` | email_address  |
| `PhoneNumber`  | phone_number   |
| `Web3Wallet`   | web3_wallet    |

================
File: docs/Models/Components/BlocklistIdentifierObject.md
================
# BlocklistIdentifierObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name                  | Value                 |
| --------------------- | --------------------- |
| `BlocklistIdentifier` | blocklist_identifier  |

================
File: docs/Models/Components/BlocklistIdentifiers.md
================
# BlocklistIdentifiers

Success


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 | Example                                                                     |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `Data`                                                                      | List<[BlocklistIdentifier](../../Models/Components/BlocklistIdentifier.md)> | :heavy_check_mark:                                                          | N/A                                                                         |                                                                             |
| `TotalCount`                                                                | *long*                                                                      | :heavy_check_mark:                                                          | Total number of blocklist identifiers<br/>                                  | 100                                                                         |

================
File: docs/Models/Components/Claims.md
================
# Claims


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/ClerkError.md
================
# ClerkError


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               | Example                                                   |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `Message`                                                 | *string*                                                  | :heavy_check_mark:                                        | N/A                                                       | Invalid input                                             |
| `LongMessage`                                             | *string*                                                  | :heavy_check_mark:                                        | N/A                                                       | The input provided does not meet the requirements.        |
| `Code`                                                    | *string*                                                  | :heavy_check_mark:                                        | N/A                                                       | 400_bad_request                                           |
| `Meta`                                                    | [Models.Components.Meta](../../Models/Components/Meta.md) | :heavy_minus_sign:                                        | N/A                                                       | {}                                                        |
| `ClerkTraceId`                                            | *string*                                                  | :heavy_minus_sign:                                        | N/A                                                       | trace_123456789abcd                                       |

================
File: docs/Models/Components/ClerkErrorErrorMeta.md
================
# ClerkErrorErrorMeta


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/Client.md
================
# Client

Success


## Fields

| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |
| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `Object`                                                                               | [Models.Components.Object](../../Models/Components/Object.md)                          | :heavy_check_mark:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | client                                                                                 |
| `Id`                                                                                   | *string*                                                                               | :heavy_check_mark:                                                                     | String representing the identifier of the session.<br/>                                | client_123456789abcd                                                                   |
| `SessionIds`                                                                           | List<*string*>                                                                         | :heavy_check_mark:                                                                     | N/A                                                                                    | [<br/>"sess_123456789abcd",<br/>"sess_23456789abcd"<br/>]                              |
| `Sessions`                                                                             | List<[Session](../../Models/Components/Session.md)>                                    | :heavy_check_mark:                                                                     | N/A                                                                                    |                                                                                        |
| `SignInId`                                                                             | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | signin_123456789abcd                                                                   |
| `SignUpId`                                                                             | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | signup_123456789abcd                                                                   |
| `LastActiveSessionId`                                                                  | *string*                                                                               | :heavy_check_mark:                                                                     | Last active session_id.<br/>                                                           | session_123456789abcd                                                                  |
| `UpdatedAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of last update.<br/>                                                    | 1632580323                                                                             |
| `CreatedAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of creation.<br/>                                                       | 1622481123                                                                             |

================
File: docs/Models/Components/CNameTarget.md
================
# CNameTarget


## Fields

| Field                                                                                                       | Type                                                                                                        | Required                                                                                                    | Description                                                                                                 | Example                                                                                                     |
| ----------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- |
| `Host`                                                                                                      | *string*                                                                                                    | :heavy_check_mark:                                                                                          | N/A                                                                                                         | cname.example.com                                                                                           |
| `Value`                                                                                                     | *string*                                                                                                    | :heavy_check_mark:                                                                                          | N/A                                                                                                         | value.example.com                                                                                           |
| `Required`                                                                                                  | *bool*                                                                                                      | :heavy_check_mark:                                                                                          | Denotes whether this CNAME target is required to be set in order for the domain to be considered deployed.<br/> | true                                                                                                        |

================
File: docs/Models/Components/DeletedObject.md
================
# DeletedObject

Deleted Object


## Fields

| Field                     | Type                      | Required                  | Description               | Example                   |
| ------------------------- | ------------------------- | ------------------------- | ------------------------- | ------------------------- |
| `Object`                  | *string*                  | :heavy_check_mark:        | N/A                       | deleted_object            |
| `Id`                      | *string*                  | :heavy_minus_sign:        | N/A                       | deleted_object_id_example |
| `Slug`                    | *string*                  | :heavy_minus_sign:        | N/A                       | deleted-object-slug       |
| `Deleted`                 | *bool*                    | :heavy_check_mark:        | N/A                       | true                      |

================
File: docs/Models/Components/Domain.md
================
# Domain


## Fields

| Field                                                                                               | Type                                                                                                | Required                                                                                            | Description                                                                                         | Example                                                                                             |
| --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |
| `Object`                                                                                            | [DomainObject](../../Models/Components/DomainObject.md)                                             | :heavy_check_mark:                                                                                  | N/A                                                                                                 | domain                                                                                              |
| `Id`                                                                                                | *string*                                                                                            | :heavy_check_mark:                                                                                  | N/A                                                                                                 | domain_id                                                                                           |
| `Name`                                                                                              | *string*                                                                                            | :heavy_check_mark:                                                                                  | N/A                                                                                                 | example.com                                                                                         |
| `IsSatellite`                                                                                       | *bool*                                                                                              | :heavy_check_mark:                                                                                  | N/A                                                                                                 | false                                                                                               |
| `FrontendApiUrl`                                                                                    | *string*                                                                                            | :heavy_check_mark:                                                                                  | N/A                                                                                                 | https://frontend.example.com                                                                        |
| `AccountsPortalUrl`                                                                                 | *string*                                                                                            | :heavy_minus_sign:                                                                                  | Null for satellite domains.<br/>                                                                    | <nil>                                                                                               |
| `ProxyUrl`                                                                                          | *string*                                                                                            | :heavy_minus_sign:                                                                                  | N/A                                                                                                 | <nil>                                                                                               |
| `DevelopmentOrigin`                                                                                 | *string*                                                                                            | :heavy_check_mark:                                                                                  | N/A                                                                                                 | http://localhost:3000                                                                               |
| `CnameTargets`                                                                                      | List<[CNameTarget](../../Models/Components/CNameTarget.md)>                                         | :heavy_minus_sign:                                                                                  | N/A                                                                                                 | [<br/>{<br/>"host": "example-host.clerk.com",<br/>"value": "example-value.clerk.services",<br/>"required": true<br/>}<br/>] |

================
File: docs/Models/Components/DomainObject.md
================
# DomainObject


## Values

| Name     | Value    |
| -------- | -------- |
| `Domain` | domain   |

================
File: docs/Models/Components/Domains.md
================
# Domains

A list of domains


## Fields

| Field                                             | Type                                              | Required                                          | Description                                       | Example                                           |
| ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- |
| `Data`                                            | List<[Domain](../../Models/Components/Domain.md)> | :heavy_check_mark:                                | N/A                                               |                                                   |
| `TotalCount`                                      | *long*                                            | :heavy_check_mark:                                | Total number of domains<br/>                      | 1                                                 |

================
File: docs/Models/Components/DomainsEnrollmentModes.md
================
# DomainsEnrollmentModes


## Values

| Name                  | Value                 |
| --------------------- | --------------------- |
| `ManualInvitation`    | manual_invitation     |
| `AutomaticInvitation` | automatic_invitation  |
| `AutomaticSuggestion` | automatic_suggestion  |

================
File: docs/Models/Components/EmailAddress.md
================
# EmailAddress

Success


## Fields

| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |
| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `Id`                                                                                   | *string*                                                                               | :heavy_minus_sign:                                                                     | N/A                                                                                    | email_id_56789                                                                         |
| `Object`                                                                               | [EmailAddressObject](../../Models/Components/EmailAddressObject.md)                    | :heavy_check_mark:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | email_address                                                                          |
| `EmailAddress`                                                                         | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | example@clerk.com                                                                      |
| `Reserved`                                                                             | *bool*                                                                                 | :heavy_check_mark:                                                                     | N/A                                                                                    | false                                                                                  |
| `Verification`                                                                         | [Verification](../../Models/Components/Verification.md)                                | :heavy_check_mark:                                                                     | N/A                                                                                    | {<br/>"status": "verified",<br/>"strategy": "admin"<br/>}                              |
| `LinkedTo`                                                                             | List<[IdentificationLink](../../Models/Components/IdentificationLink.md)>              | :heavy_check_mark:                                                                     | N/A                                                                                    | [<br/>{<br/>"type": "oauth_google",<br/>"id": "link_12345"<br/>}<br/>]                 |
| `MatchesSsoConnection`                                                                 | *bool*                                                                                 | :heavy_minus_sign:                                                                     | Indicates whether this email address domain matches an active enterprise connection.<br/> |                                                                                        |
| `CreatedAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of creation<br/>                                                        | 1615458901                                                                             |
| `UpdatedAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of creation<br/>                                                        | 1615459001                                                                             |

================
File: docs/Models/Components/EmailAddressObject.md
================
# EmailAddressObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name           | Value          |
| -------------- | -------------- |
| `EmailAddress` | email_address  |

================
File: docs/Models/Components/EnrollmentMode.md
================
# EnrollmentMode

Mode of enrollment for the domain


## Values

| Name                  | Value                 |
| --------------------- | --------------------- |
| `ManualInvitation`    | manual_invitation     |
| `AutomaticInvitation` | automatic_invitation  |
| `AutomaticSuggestion` | automatic_suggestion  |

================
File: docs/Models/Components/Error.md
================
# Error


## Supported Types

### ErrorClerkError

```csharp
Error.CreateErrorClerkError(/* values here */);
```

================
File: docs/Models/Components/ErrorClerkError.md
================
# ErrorClerkError


## Fields

| Field                                              | Type                                               | Required                                           | Description                                        | Example                                            |
| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- |
| `Message`                                          | *string*                                           | :heavy_check_mark:                                 | N/A                                                | Invalid input                                      |
| `LongMessage`                                      | *string*                                           | :heavy_check_mark:                                 | N/A                                                | The input provided does not meet the requirements. |
| `Code`                                             | *string*                                           | :heavy_check_mark:                                 | N/A                                                | 400_bad_request                                    |
| `Meta`                                             | [ErrorMeta](../../Models/Components/ErrorMeta.md)  | :heavy_minus_sign:                                 | N/A                                                | {}                                                 |
| `ClerkTraceId`                                     | *string*                                           | :heavy_minus_sign:                                 | N/A                                                | trace_123456789abcd                                |

================
File: docs/Models/Components/ErrorMeta.md
================
# ErrorMeta


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/ExternalAccount.md
================
# ExternalAccount


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/ExternalAccounts.md
================
# ExternalAccounts


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/FromOAuth.md
================
# FromOAuth


## Fields

| Field                                                                                 | Type                                                                                  | Required                                                                              | Description                                                                           |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `Status`                                                                              | [FromOAuthVerificationStatus](../../Models/Components/FromOAuthVerificationStatus.md) | :heavy_check_mark:                                                                    | N/A                                                                                   |
| `Strategy`                                                                            | *string*                                                                              | :heavy_check_mark:                                                                    | N/A                                                                                   |
| `Error`                                                                               | [Error](../../Models/Components/Error.md)                                             | :heavy_minus_sign:                                                                    | N/A                                                                                   |
| `ExpireAt`                                                                            | *long*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   |
| `Attempts`                                                                            | *long*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   |
| `VerifiedAtClient`                                                                    | *string*                                                                              | :heavy_minus_sign:                                                                    | N/A                                                                                   |

================
File: docs/Models/Components/FromOAuthVerificationStatus.md
================
# FromOAuthVerificationStatus


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |

================
File: docs/Models/Components/HTTPMetadata.md
================
# HTTPMetadata


## Fields

| Field                                                                                                                | Type                                                                                                                 | Required                                                                                                             | Description                                                                                                          |
| -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| `Response`                                                                                                           | [HttpResponseMessage](https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpresponsemessage?view=net-5.0) | :heavy_check_mark:                                                                                                   | Raw HTTP response; suitable for custom response parsing                                                              |
| `Request`                                                                                                            | *HttpRequestMessage*                                                                                                 | :heavy_check_mark:                                                                                                   | Raw HTTP request; suitable for debugging                                                                             |

================
File: docs/Models/Components/IdentificationLink.md
================
# IdentificationLink


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `Type`             | *string*           | :heavy_check_mark: | N/A                | oauth_google       |
| `Id`               | *string*           | :heavy_check_mark: | N/A                | link_12345         |

================
File: docs/Models/Components/IdentifierType.md
================
# IdentifierType


## Values

| Name           | Value          |
| -------------- | -------------- |
| `EmailAddress` | email_address  |
| `PhoneNumber`  | phone_number   |
| `Web3Wallet`   | web3_wallet    |

================
File: docs/Models/Components/Instance.md
================
# Instance

Success


## Fields

| Field                                                                                 | Type                                                                                  | Required                                                                              | Description                                                                           | Example                                                                               |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `Object`                                                                              | [InstanceObject](../../Models/Components/InstanceObject.md)                           | :heavy_check_mark:                                                                    | String representing the object's type. Objects of the same type share the same value. |                                                                                       |
| `Id`                                                                                  | *string*                                                                              | :heavy_check_mark:                                                                    | N/A                                                                                   |                                                                                       |
| `EnvironmentType`                                                                     | *string*                                                                              | :heavy_check_mark:                                                                    | N/A                                                                                   | development                                                                           |
| `AllowedOrigins`                                                                      | List<*string*>                                                                        | :heavy_check_mark:                                                                    | N/A                                                                                   | [<br/>"http://localhost:3000",<br/>"https://some-domain"<br/>]                        |

================
File: docs/Models/Components/InstanceObject.md
================
# InstanceObject

String representing the object's type. Objects of the same type share the same value.


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Instance` | instance   |

================
File: docs/Models/Components/InstanceRestrictions.md
================
# InstanceRestrictions

Success


## Fields

| Field                                                                                 | Type                                                                                  | Required                                                                              | Description                                                                           | Example                                                                               |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `Object`                                                                              | [InstanceRestrictionsObject](../../Models/Components/InstanceRestrictionsObject.md)   | :heavy_check_mark:                                                                    | String representing the object's type. Objects of the same type share the same value. | instance_restrictions                                                                 |
| `Allowlist`                                                                           | *bool*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   | false                                                                                 |
| `Blocklist`                                                                           | *bool*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   | true                                                                                  |
| `BlockEmailSubaddresses`                                                              | *bool*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   | true                                                                                  |
| `BlockDisposableEmailDomains`                                                         | *bool*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   |                                                                                       |
| `IgnoreDotsForGmailAddresses`                                                         | *bool*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   | false                                                                                 |

================
File: docs/Models/Components/InstanceRestrictionsObject.md
================
# InstanceRestrictionsObject

String representing the object's type. Objects of the same type share the same value.


## Values

| Name                   | Value                  |
| ---------------------- | ---------------------- |
| `InstanceRestrictions` | instance_restrictions  |

================
File: docs/Models/Components/InstanceSettings.md
================
# InstanceSettings

InstanceSettings Server API


## Fields

| Field                                                                                 | Type                                                                                  | Required                                                                              | Description                                                                           | Example                                                                               |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `Object`                                                                              | [InstanceSettingsObject](../../Models/Components/InstanceSettingsObject.md)           | :heavy_minus_sign:                                                                    | String representing the object's type. Objects of the same type share the same value. | instance_settings                                                                     |
| `Id`                                                                                  | *string*                                                                              | :heavy_minus_sign:                                                                    | N/A                                                                                   | inst_123456789                                                                        |
| `RestrictedToAllowlist`                                                               | *bool*                                                                                | :heavy_minus_sign:                                                                    | N/A                                                                                   | false                                                                                 |
| `FromEmailAddress`                                                                    | *string*                                                                              | :heavy_minus_sign:                                                                    | N/A                                                                                   | noreply@clerk.dev                                                                     |
| `ProgressiveSignUp`                                                                   | *bool*                                                                                | :heavy_minus_sign:                                                                    | N/A                                                                                   | true                                                                                  |
| `EnhancedEmailDeliverability`                                                         | *bool*                                                                                | :heavy_minus_sign:                                                                    | N/A                                                                                   | true                                                                                  |

================
File: docs/Models/Components/InstanceSettingsObject.md
================
# InstanceSettingsObject

String representing the object's type. Objects of the same type share the same value.


## Values

| Name               | Value              |
| ------------------ | ------------------ |
| `InstanceSettings` | instance_settings  |

================
File: docs/Models/Components/Invitation.md
================
# Invitation

Success


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     | Example                                                         |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `Object`                                                        | [InvitationObject](../../Models/Components/InvitationObject.md) | :heavy_check_mark:                                              | N/A                                                             | invitation                                                      |
| `Id`                                                            | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | inv_f02930r3                                                    |
| `EmailAddress`                                                  | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | invitee@example.com                                             |
| `PublicMetadata`                                                | Dictionary<String, *object*>                                    | :heavy_check_mark:                                              | N/A                                                             | {}                                                              |
| `Revoked`                                                       | *bool*                                                          | :heavy_minus_sign:                                              | N/A                                                             | false                                                           |
| `Status`                                                        | [InvitationStatus](../../Models/Components/InvitationStatus.md) | :heavy_check_mark:                                              | N/A                                                             | pending                                                         |
| `Url`                                                           | *string*                                                        | :heavy_minus_sign:                                              | N/A                                                             | https://example.com/invitations/accept?code=abcd1234            |
| `ExpiresAt`                                                     | *long*                                                          | :heavy_minus_sign:                                              | Unix timestamp of expiration.<br/>                              |                                                                 |
| `CreatedAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of creation.<br/>                                | 1622549600                                                      |
| `UpdatedAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of last update.<br/>                             | 1622553200                                                      |

================
File: docs/Models/Components/InvitationObject.md
================
# InvitationObject


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Invitation` | invitation   |

================
File: docs/Models/Components/InvitationRevoked.md
================
# InvitationRevoked

Success


## Fields

| Field                                                                         | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `Object`                                                                      | [InvitationRevokedObject](../../Models/Components/InvitationRevokedObject.md) | :heavy_check_mark:                                                            | N/A                                                                           | invitation                                                                    |
| `Id`                                                                          | *string*                                                                      | :heavy_check_mark:                                                            | N/A                                                                           | inv_f02930r3                                                                  |
| `EmailAddress`                                                                | *string*                                                                      | :heavy_check_mark:                                                            | N/A                                                                           | invitee@example.com                                                           |
| `PublicMetadata`                                                              | Dictionary<String, *object*>                                                  | :heavy_check_mark:                                                            | N/A                                                                           | {}                                                                            |
| `Revoked`                                                                     | *bool*                                                                        | :heavy_minus_sign:                                                            | N/A                                                                           | true                                                                          |
| `Status`                                                                      | [InvitationRevokedStatus](../../Models/Components/InvitationRevokedStatus.md) | :heavy_check_mark:                                                            | N/A                                                                           | revoked                                                                       |
| `Url`                                                                         | *string*                                                                      | :heavy_minus_sign:                                                            | N/A                                                                           | https://example.com/invitations/accept?code=abcd1234                          |
| `ExpiresAt`                                                                   | *long*                                                                        | :heavy_minus_sign:                                                            | Unix timestamp of expiration.<br/>                                            |                                                                               |
| `CreatedAt`                                                                   | *long*                                                                        | :heavy_check_mark:                                                            | Unix timestamp of creation.<br/>                                              | 1622549600                                                                    |
| `UpdatedAt`                                                                   | *long*                                                                        | :heavy_check_mark:                                                            | Unix timestamp of last update.<br/>                                           | 1622553200                                                                    |

================
File: docs/Models/Components/InvitationRevokedObject.md
================
# InvitationRevokedObject


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Invitation` | invitation   |

================
File: docs/Models/Components/InvitationRevokedStatus.md
================
# InvitationRevokedStatus


## Values

| Name      | Value     |
| --------- | --------- |
| `Revoked` | revoked   |

================
File: docs/Models/Components/InvitationStatus.md
================
# InvitationStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |
| `Expired`  | expired    |

================
File: docs/Models/Components/Jwks.md
================
# Jwks

Get the JSON Web Key Set


## Fields

| Field                                         | Type                                          | Required                                      | Description                                   |
| --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- |
| `Keys`                                        | List<[Keys](../../Models/Components/Keys.md)> | :heavy_minus_sign:                            | N/A                                           |

================
File: docs/Models/Components/JWTTemplate.md
================
# JWTTemplate

List of JWT templates


## Fields

| Field                                                             | Type                                                              | Required                                                          | Description                                                       | Example                                                           |
| ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- |
| `Object`                                                          | [JWTTemplateObject](../../Models/Components/JWTTemplateObject.md) | :heavy_check_mark:                                                | N/A                                                               | jwt_template                                                      |
| `Id`                                                              | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | jt_1234567890abcdef                                               |
| `Name`                                                            | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | My First JWT Template                                             |
| `Claims`                                                          | [Models.Components.Claims](../../Models/Components/Claims.md)     | :heavy_check_mark:                                                | N/A                                                               | {}                                                                |
| `Lifetime`                                                        | *long*                                                            | :heavy_check_mark:                                                | N/A                                                               | 3600                                                              |
| `AllowedClockSkew`                                                | *long*                                                            | :heavy_check_mark:                                                | N/A                                                               | 5                                                                 |
| `CustomSigningKey`                                                | *bool*                                                            | :heavy_check_mark:                                                | N/A                                                               | false                                                             |
| `SigningAlgorithm`                                                | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | RS256                                                             |
| `CreatedAt`                                                       | *long*                                                            | :heavy_check_mark:                                                | Unix timestamp of creation.<br/>                                  | 1609459200                                                        |
| `UpdatedAt`                                                       | *long*                                                            | :heavy_check_mark:                                                | Unix timestamp of last update.<br/>                               | 1612137600                                                        |

================
File: docs/Models/Components/JWTTemplateObject.md
================
# JWTTemplateObject


## Values

| Name          | Value         |
| ------------- | ------------- |
| `JwtTemplate` | jwt_template  |

================
File: docs/Models/Components/Keys.md
================
# Keys


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `Use`              | *string*           | :heavy_minus_sign: | N/A                |
| `Kty`              | *string*           | :heavy_minus_sign: | N/A                |
| `Kid`              | *string*           | :heavy_minus_sign: | N/A                |
| `Alg`              | *string*           | :heavy_minus_sign: | N/A                |
| `N`                | *string*           | :heavy_minus_sign: | N/A                |
| `E`                | *string*           | :heavy_minus_sign: | N/A                |
| `X`                | *string*           | :heavy_minus_sign: | N/A                |
| `Crv`              | *string*           | :heavy_minus_sign: | N/A                |

================
File: docs/Models/Components/Meta.md
================
# Meta


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/NextAction.md
================
# NextAction


## Values

| Name           | Value          |
| -------------- | -------------- |
| `NeedsPrepare` | needs_prepare  |
| `NeedsAttempt` | needs_attempt  |
| `Unknown`      |                |

================
File: docs/Models/Components/Nonce.md
================
# Nonce


## Values

| Name    | Value   |
| ------- | ------- |
| `Nonce` | nonce   |

================
File: docs/Models/Components/OAuthApplication.md
================
# OAuthApplication


## Fields

| Field                                                                                                                                                            | Type                                                                                                                                                             | Required                                                                                                                                                         | Description                                                                                                                                                      | Example                                                                                                                                                          |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                                                         | [OAuthApplicationObject](../../Models/Components/OAuthApplicationObject.md)                                                                                      | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | oauth_application                                                                                                                                                |
| `Id`                                                                                                                                                             | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | oauth_app_1234                                                                                                                                                   |
| `InstanceId`                                                                                                                                                     | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | instance_5678                                                                                                                                                    |
| `Name`                                                                                                                                                           | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | Example OAuth App                                                                                                                                                |
| `ClientId`                                                                                                                                                       | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | client_12345                                                                                                                                                     |
| `Public`                                                                                                                                                         | *bool*                                                                                                                                                           | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | false                                                                                                                                                            |
| `Scopes`                                                                                                                                                         | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | profile email                                                                                                                                                    |
| `RedirectUris`                                                                                                                                                   | List<*string*>                                                                                                                                                   | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              |                                                                                                                                                                  |
| ~~`CallbackUrl`~~                                                                                                                                                | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Deprecated: Use redirect_uris instead.<br/> | https://example.com/oauth/callback                                                                                                                               |
| `AuthorizeUrl`                                                                                                                                                   | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | https://example.com/authorize                                                                                                                                    |
| `TokenFetchUrl`                                                                                                                                                  | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | https://example.com/oauth/token                                                                                                                                  |
| `UserInfoUrl`                                                                                                                                                    | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | https://example.com/userinfo                                                                                                                                     |
| `DiscoveryUrl`                                                                                                                                                   | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              |                                                                                                                                                                  |
| `TokenIntrospectionUrl`                                                                                                                                          | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              |                                                                                                                                                                  |
| `CreatedAt`                                                                                                                                                      | *long*                                                                                                                                                           | :heavy_check_mark:                                                                                                                                               | Unix timestamp of creation.<br/>                                                                                                                                 | 1609459200                                                                                                                                                       |
| `UpdatedAt`                                                                                                                                                      | *long*                                                                                                                                                           | :heavy_check_mark:                                                                                                                                               | Unix timestamp of last update.<br/>                                                                                                                              | 1612137600                                                                                                                                                       |

================
File: docs/Models/Components/OAuthApplicationObject.md
================
# OAuthApplicationObject


## Values

| Name               | Value              |
| ------------------ | ------------------ |
| `OauthApplication` | oauth_application  |

================
File: docs/Models/Components/OAuthApplications.md
================
# OAuthApplications

A list of OAuth applications


## Fields

| Field                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Required                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Example                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Data`                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | List<[OAuthApplication](../../Models/Components/OAuthApplication.md)>                                                                                                                                                                                                                                                                                                                                                                                                  | :heavy_check_mark:                                                                                                                                                                                                                                                                                                                                                                                                                                                     | N/A                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | [<br/>{<br/>"object": "oauth_application",<br/>"id": "oauth_app_1234",<br/>"instance_id": "instance_5678",<br/>"name": "Example OAuth App",<br/>"client_id": "client_12345",<br/>"public": false,<br/>"scopes": "profile email",<br/>"callback_url": "https://example.com/oauth/callback",<br/>"authorize_url": "https://example.com/authorize",<br/>"token_fetch_url": "https://example.com/oauth/token",<br/>"user_info_url": "https://example.com/userinfo",<br/>"created_at": 1609459200,<br/>"updated_at": 1612137600<br/>}<br/>] |
| `TotalCount`                                                                                                                                                                                                                                                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | :heavy_check_mark:                                                                                                                                                                                                                                                                                                                                                                                                                                                     | Total number of OAuth applications<br/>                                                                                                                                                                                                                                                                                                                                                                                                                                | 1                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |

================
File: docs/Models/Components/OAuthApplicationWithSecret.md
================
# OAuthApplicationWithSecret


## Fields

| Field                                                                                                                                                            | Type                                                                                                                                                             | Required                                                                                                                                                         | Description                                                                                                                                                      | Example                                                                                                                                                          |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                                                         | [OAuthApplicationWithSecretObject](../../Models/Components/OAuthApplicationWithSecretObject.md)                                                                  | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | oauth_application                                                                                                                                                |
| `Id`                                                                                                                                                             | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | oauth_app_1234                                                                                                                                                   |
| `InstanceId`                                                                                                                                                     | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | instance_5678                                                                                                                                                    |
| `Name`                                                                                                                                                           | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | Example OAuth App                                                                                                                                                |
| `ClientId`                                                                                                                                                       | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | client_12345                                                                                                                                                     |
| `Public`                                                                                                                                                         | *bool*                                                                                                                                                           | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | false                                                                                                                                                            |
| `Scopes`                                                                                                                                                         | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | profile email                                                                                                                                                    |
| `RedirectUris`                                                                                                                                                   | List<*string*>                                                                                                                                                   | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              |                                                                                                                                                                  |
| ~~`CallbackUrl`~~                                                                                                                                                | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Deprecated: Use redirect_uris instead.<br/> | https://example.com/oauth/callback                                                                                                                               |
| `AuthorizeUrl`                                                                                                                                                   | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | https://example.com/authorize                                                                                                                                    |
| `TokenFetchUrl`                                                                                                                                                  | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | https://example.com/oauth/token                                                                                                                                  |
| `UserInfoUrl`                                                                                                                                                    | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              | https://example.com/userinfo                                                                                                                                     |
| `DiscoveryUrl`                                                                                                                                                   | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              |                                                                                                                                                                  |
| `TokenIntrospectionUrl`                                                                                                                                          | *string*                                                                                                                                                         | :heavy_check_mark:                                                                                                                                               | N/A                                                                                                                                                              |                                                                                                                                                                  |
| `CreatedAt`                                                                                                                                                      | *long*                                                                                                                                                           | :heavy_check_mark:                                                                                                                                               | Unix timestamp of creation.<br/>                                                                                                                                 | 1609459200                                                                                                                                                       |
| `UpdatedAt`                                                                                                                                                      | *long*                                                                                                                                                           | :heavy_check_mark:                                                                                                                                               | Unix timestamp of last update.<br/>                                                                                                                              | 1612137600                                                                                                                                                       |
| `ClientSecret`                                                                                                                                                   | *string*                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                               | Empty if public client.<br/>                                                                                                                                     | secretXYZ123                                                                                                                                                     |

================
File: docs/Models/Components/OAuthApplicationWithSecretObject.md
================
# OAuthApplicationWithSecretObject


## Values

| Name               | Value              |
| ------------------ | ------------------ |
| `OauthApplication` | oauth_application  |

================
File: docs/Models/Components/Object.md
================
# Object

String representing the object's type. Objects of the same type share the same value.



## Values

| Name     | Value    |
| -------- | -------- |
| `Client` | client   |

================
File: docs/Models/Components/Organization.md
================
# Organization


## Fields

| Field                                                               | Type                                                                | Required                                                            | Description                                                         | Example                                                             |
| ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `Object`                                                            | [OrganizationObject](../../Models/Components/OrganizationObject.md) | :heavy_check_mark:                                                  | N/A                                                                 | organization                                                        |
| `Id`                                                                | *string*                                                            | :heavy_check_mark:                                                  | N/A                                                                 | org_123                                                             |
| `Name`                                                              | *string*                                                            | :heavy_check_mark:                                                  | N/A                                                                 | Acme Corp                                                           |
| `Slug`                                                              | *string*                                                            | :heavy_check_mark:                                                  | N/A                                                                 | acme-corp                                                           |
| `MembersCount`                                                      | *long*                                                              | :heavy_minus_sign:                                                  | N/A                                                                 | 150                                                                 |
| `MissingMemberWithElevatedPermissions`                              | *bool*                                                              | :heavy_minus_sign:                                                  | N/A                                                                 |                                                                     |
| `PendingInvitationsCount`                                           | *long*                                                              | :heavy_minus_sign:                                                  | N/A                                                                 |                                                                     |
| `MaxAllowedMemberships`                                             | *long*                                                              | :heavy_check_mark:                                                  | N/A                                                                 | 300                                                                 |
| `AdminDeleteEnabled`                                                | *bool*                                                              | :heavy_check_mark:                                                  | N/A                                                                 | true                                                                |
| `PublicMetadata`                                                    | Dictionary<String, *object*>                                        | :heavy_check_mark:                                                  | N/A                                                                 | {<br/>"public_info": "Info visible to everyone"<br/>}               |
| `PrivateMetadata`                                                   | Dictionary<String, *object*>                                        | :heavy_check_mark:                                                  | N/A                                                                 | {<br/>"internal_use_only": "Sensitive data"<br/>}                   |
| `CreatedBy`                                                         | *string*                                                            | :heavy_minus_sign:                                                  | N/A                                                                 | user_123456                                                         |
| `CreatedAt`                                                         | *long*                                                              | :heavy_check_mark:                                                  | Unix timestamp of creation.<br/>                                    | 1625078400                                                          |
| `UpdatedAt`                                                         | *long*                                                              | :heavy_check_mark:                                                  | Unix timestamp of last update.<br/>                                 | 1625164800                                                          |

================
File: docs/Models/Components/OrganizationDomain.md
================
# OrganizationDomain

An organization domain


## Fields

| Field                                                                                                               | Type                                                                                                                | Required                                                                                                            | Description                                                                                                         |
| ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                            | [OrganizationDomainObject](../../Models/Components/OrganizationDomainObject.md)                                     | :heavy_check_mark:                                                                                                  | String representing the object's type. Objects of the same type share the same value. Always `organization_domain`<br/> |
| `Id`                                                                                                                | *string*                                                                                                            | :heavy_check_mark:                                                                                                  | Unique identifier for the organization domain                                                                       |
| `OrganizationId`                                                                                                    | *string*                                                                                                            | :heavy_check_mark:                                                                                                  | Unique identifier for the organization                                                                              |
| `Name`                                                                                                              | *string*                                                                                                            | :heavy_check_mark:                                                                                                  | Name of the organization domain                                                                                     |
| `EnrollmentMode`                                                                                                    | [EnrollmentMode](../../Models/Components/EnrollmentMode.md)                                                         | :heavy_check_mark:                                                                                                  | Mode of enrollment for the domain                                                                                   |
| `AffiliationEmailAddress`                                                                                           | *string*                                                                                                            | :heavy_check_mark:                                                                                                  | Affiliation email address for the domain, if available.                                                             |
| `Verification`                                                                                                      | [OrganizationDomainVerification](../../Models/Components/OrganizationDomainVerification.md)                         | :heavy_check_mark:                                                                                                  | Verification details for the domain                                                                                 |
| `TotalPendingInvitations`                                                                                           | *int*                                                                                                               | :heavy_check_mark:                                                                                                  | Total number of pending invitations associated with this domain                                                     |
| `TotalPendingSuggestions`                                                                                           | *int*                                                                                                               | :heavy_check_mark:                                                                                                  | Total number of pending suggestions associated with this domain                                                     |
| `CreatedAt`                                                                                                         | *long*                                                                                                              | :heavy_check_mark:                                                                                                  | Unix timestamp when the domain was created                                                                          |
| `UpdatedAt`                                                                                                         | *long*                                                                                                              | :heavy_check_mark:                                                                                                  | Unix timestamp of the last update to the domain                                                                     |

================
File: docs/Models/Components/OrganizationDomainObject.md
================
# OrganizationDomainObject

String representing the object's type. Objects of the same type share the same value. Always `organization_domain`



## Values

| Name                 | Value                |
| -------------------- | -------------------- |
| `OrganizationDomain` | organization_domain  |

================
File: docs/Models/Components/OrganizationDomains.md
================
# OrganizationDomains

A list of organization domains


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `Data`                                                                    | List<[OrganizationDomain](../../Models/Components/OrganizationDomain.md)> | :heavy_check_mark:                                                        | N/A                                                                       |
| `TotalCount`                                                              | *long*                                                                    | :heavy_check_mark:                                                        | Total number of organization domains<br/>                                 |

================
File: docs/Models/Components/OrganizationDomainStatus.md
================
# OrganizationDomainStatus

Status of the verification. It can be `unverified` or `verified`


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |

================
File: docs/Models/Components/OrganizationDomainVerification.md
================
# OrganizationDomainVerification

Verification details for the domain


## Fields

| Field                                                                           | Type                                                                            | Required                                                                        | Description                                                                     |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `Status`                                                                        | [OrganizationDomainStatus](../../Models/Components/OrganizationDomainStatus.md) | :heavy_check_mark:                                                              | Status of the verification. It can be `unverified` or `verified`                |
| `Strategy`                                                                      | *string*                                                                        | :heavy_check_mark:                                                              | Name of the strategy used to verify the domain                                  |
| `Attempts`                                                                      | *long*                                                                          | :heavy_check_mark:                                                              | How many attempts have been made to verify the domain                           |
| `ExpireAt`                                                                      | *long*                                                                          | :heavy_check_mark:                                                              | Unix timestamp of when the verification will expire                             |

================
File: docs/Models/Components/OrganizationInvitation.md
================
# OrganizationInvitation

An organization invitation


## Fields

| Field                                                                                   | Type                                                                                    | Required                                                                                | Description                                                                             | Example                                                                                 |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `Object`                                                                                | [OrganizationInvitationObject](../../Models/Components/OrganizationInvitationObject.md) | :heavy_check_mark:                                                                      | String representing the object's type. Objects of the same type share the same value.<br/> | organization_invitation                                                                 |
| `Id`                                                                                    | *string*                                                                                | :heavy_check_mark:                                                                      | N/A                                                                                     | inv_12345                                                                               |
| `EmailAddress`                                                                          | *string*                                                                                | :heavy_check_mark:                                                                      | N/A                                                                                     | user@example.com                                                                        |
| `Role`                                                                                  | *string*                                                                                | :heavy_check_mark:                                                                      | N/A                                                                                     | admin                                                                                   |
| `RoleName`                                                                              | *string*                                                                                | :heavy_check_mark:                                                                      | N/A                                                                                     |                                                                                         |
| `OrganizationId`                                                                        | *string*                                                                                | :heavy_minus_sign:                                                                      | N/A                                                                                     | org_12345                                                                               |
| `Status`                                                                                | *string*                                                                                | :heavy_minus_sign:                                                                      | N/A                                                                                     | pending                                                                                 |
| `PublicMetadata`                                                                        | Dictionary<String, *object*>                                                            | :heavy_check_mark:                                                                      | N/A                                                                                     | {<br/>"key": "value"<br/>}                                                              |
| `PrivateMetadata`                                                                       | Dictionary<String, *object*>                                                            | :heavy_minus_sign:                                                                      | N/A                                                                                     | {<br/>"private_key": "secret_value"<br/>}                                               |
| `Url`                                                                                   | *string*                                                                                | :heavy_check_mark:                                                                      | N/A                                                                                     |                                                                                         |
| `ExpiresAt`                                                                             | *long*                                                                                  | :heavy_check_mark:                                                                      | Unix timestamp of expiration.                                                           |                                                                                         |
| `CreatedAt`                                                                             | *long*                                                                                  | :heavy_check_mark:                                                                      | Unix timestamp of creation.                                                             | 1622547600                                                                              |
| `UpdatedAt`                                                                             | *long*                                                                                  | :heavy_check_mark:                                                                      | Unix timestamp of last update.                                                          | 1622551200                                                                              |

================
File: docs/Models/Components/OrganizationInvitationObject.md
================
# OrganizationInvitationObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name                     | Value                    |
| ------------------------ | ------------------------ |
| `OrganizationInvitation` | organization_invitation  |

================
File: docs/Models/Components/OrganizationInvitationPublicOrganizationData.md
================
# OrganizationInvitationPublicOrganizationData


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `Id`               | *string*           | :heavy_check_mark: | N/A                |
| `Name`             | *string*           | :heavy_check_mark: | N/A                |
| `Slug`             | *string*           | :heavy_check_mark: | N/A                |
| `ImageUrl`         | *string*           | :heavy_minus_sign: | N/A                |
| `HasImage`         | *bool*             | :heavy_check_mark: | N/A                |

================
File: docs/Models/Components/OrganizationInvitations.md
================
# OrganizationInvitations

A list of organization invitations


## Fields

| Field                                                                                                                                                                                                                          | Type                                                                                                                                                                                                                           | Required                                                                                                                                                                                                                       | Description                                                                                                                                                                                                                    | Example                                                                                                                                                                                                                        |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `Data`                                                                                                                                                                                                                         | List<[OrganizationInvitation](../../Models/Components/OrganizationInvitation.md)>                                                                                                                                              | :heavy_check_mark:                                                                                                                                                                                                             | N/A                                                                                                                                                                                                                            | [<br/>{<br/>"id": "inv_12345",<br/>"object": "organization_invitation",<br/>"email_address": "user@example.com",<br/>"role": "member",<br/>"organization_id": "org_12345",<br/>"status": "pending",<br/>"created_at": 1617981379,<br/>"updated_at": 1625581379<br/>}<br/>] |
| `TotalCount`                                                                                                                                                                                                                   | *long*                                                                                                                                                                                                                         | :heavy_check_mark:                                                                                                                                                                                                             | Total number of organization invitations<br/>                                                                                                                                                                                  | 10                                                                                                                                                                                                                             |

================
File: docs/Models/Components/OrganizationInvitationsWithPublicOrganizationData.md
================
# OrganizationInvitationsWithPublicOrganizationData

A list of organization invitations with public organization data


## Fields

| Field                                                                                                                                 | Type                                                                                                                                  | Required                                                                                                                              | Description                                                                                                                           |
| ------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| `Data`                                                                                                                                | List<[OrganizationInvitationWithPublicOrganizationData](../../Models/Components/OrganizationInvitationWithPublicOrganizationData.md)> | :heavy_check_mark:                                                                                                                    | N/A                                                                                                                                   |
| `TotalCount`                                                                                                                          | *long*                                                                                                                                | :heavy_check_mark:                                                                                                                    | Total number of organization invitations<br/>                                                                                         |

================
File: docs/Models/Components/OrganizationInvitationWithPublicOrganizationData.md
================
# OrganizationInvitationWithPublicOrganizationData

An organization invitation with public organization data populated


## Fields

| Field                                                                                                                                       | Type                                                                                                                                        | Required                                                                                                                                    | Description                                                                                                                                 |
| ------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                                    | [OrganizationInvitationWithPublicOrganizationDataObject](../../Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.md) | :heavy_check_mark:                                                                                                                          | String representing the object's type. Objects of the same type share the same value.<br/>                                                  |
| `Id`                                                                                                                                        | *string*                                                                                                                                    | :heavy_check_mark:                                                                                                                          | N/A                                                                                                                                         |
| `EmailAddress`                                                                                                                              | *string*                                                                                                                                    | :heavy_check_mark:                                                                                                                          | N/A                                                                                                                                         |
| `Role`                                                                                                                                      | *string*                                                                                                                                    | :heavy_check_mark:                                                                                                                          | N/A                                                                                                                                         |
| `RoleName`                                                                                                                                  | *string*                                                                                                                                    | :heavy_check_mark:                                                                                                                          | N/A                                                                                                                                         |
| `OrganizationId`                                                                                                                            | *string*                                                                                                                                    | :heavy_minus_sign:                                                                                                                          | N/A                                                                                                                                         |
| `Status`                                                                                                                                    | *string*                                                                                                                                    | :heavy_minus_sign:                                                                                                                          | N/A                                                                                                                                         |
| `PublicMetadata`                                                                                                                            | Dictionary<String, *object*>                                                                                                                | :heavy_check_mark:                                                                                                                          | N/A                                                                                                                                         |
| `PrivateMetadata`                                                                                                                           | Dictionary<String, *object*>                                                                                                                | :heavy_minus_sign:                                                                                                                          | N/A                                                                                                                                         |
| `Url`                                                                                                                                       | *string*                                                                                                                                    | :heavy_check_mark:                                                                                                                          | N/A                                                                                                                                         |
| `ExpiresAt`                                                                                                                                 | *long*                                                                                                                                      | :heavy_check_mark:                                                                                                                          | Unix timestamp of expiration.                                                                                                               |
| `CreatedAt`                                                                                                                                 | *long*                                                                                                                                      | :heavy_check_mark:                                                                                                                          | Unix timestamp of creation.                                                                                                                 |
| `UpdatedAt`                                                                                                                                 | *long*                                                                                                                                      | :heavy_check_mark:                                                                                                                          | Unix timestamp of last update.                                                                                                              |
| `PublicOrganizationData`                                                                                                                    | [OrganizationInvitationPublicOrganizationData](../../Models/Components/OrganizationInvitationPublicOrganizationData.md)                     | :heavy_minus_sign:                                                                                                                          | N/A                                                                                                                                         |

================
File: docs/Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.md
================
# OrganizationInvitationWithPublicOrganizationDataObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name                     | Value                    |
| ------------------------ | ------------------------ |
| `OrganizationInvitation` | organization_invitation  |

================
File: docs/Models/Components/OrganizationMembership.md
================
# OrganizationMembership

Hello world


## Fields

| Field                                                                                                   | Type                                                                                                    | Required                                                                                                | Description                                                                                             | Example                                                                                                 |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| `Id`                                                                                                    | *string*                                                                                                | :heavy_check_mark:                                                                                      | N/A                                                                                                     | org_mem_123                                                                                             |
| `Object`                                                                                                | [OrganizationMembershipObject](../../Models/Components/OrganizationMembershipObject.md)                 | :heavy_check_mark:                                                                                      | String representing the object's type. Objects of the same type share the same value.<br/>              | organization_membership                                                                                 |
| `Role`                                                                                                  | *string*                                                                                                | :heavy_check_mark:                                                                                      | N/A                                                                                                     | member                                                                                                  |
| `RoleName`                                                                                              | *string*                                                                                                | :heavy_minus_sign:                                                                                      | N/A                                                                                                     |                                                                                                         |
| `Permissions`                                                                                           | List<*string*>                                                                                          | :heavy_check_mark:                                                                                      | N/A                                                                                                     | [<br/>"read",<br/>"write"<br/>]                                                                         |
| `PublicMetadata`                                                                                        | Dictionary<String, *object*>                                                                            | :heavy_check_mark:                                                                                      | Metadata saved on the organization membership, accessible from both Frontend and Backend APIs           | {}                                                                                                      |
| `PrivateMetadata`                                                                                       | Dictionary<String, *object*>                                                                            | :heavy_minus_sign:                                                                                      | Metadata saved on the organization membership, accessible only from the Backend API                     | {}                                                                                                      |
| `Organization`                                                                                          | [OrganizationMembershipOrganization](../../Models/Components/OrganizationMembershipOrganization.md)     | :heavy_check_mark:                                                                                      | N/A                                                                                                     |                                                                                                         |
| `PublicUserData`                                                                                        | [OrganizationMembershipPublicUserData](../../Models/Components/OrganizationMembershipPublicUserData.md) | :heavy_minus_sign:                                                                                      | An organization membership with public user data populated                                              |                                                                                                         |
| `CreatedAt`                                                                                             | *long*                                                                                                  | :heavy_check_mark:                                                                                      | Unix timestamp of creation.                                                                             | 1625078400                                                                                              |
| `UpdatedAt`                                                                                             | *long*                                                                                                  | :heavy_check_mark:                                                                                      | Unix timestamp of last update.                                                                          | 1625164800                                                                                              |

================
File: docs/Models/Components/OrganizationMembershipObject.md
================
# OrganizationMembershipObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name                     | Value                    |
| ------------------------ | ------------------------ |
| `OrganizationMembership` | organization_membership  |

================
File: docs/Models/Components/OrganizationMembershipOrganization.md
================
# OrganizationMembershipOrganization


## Fields

| Field                                                                                                           | Type                                                                                                            | Required                                                                                                        | Description                                                                                                     | Example                                                                                                         |
| --------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                        | [OrganizationMembershipOrganizationObject](../../Models/Components/OrganizationMembershipOrganizationObject.md) | :heavy_check_mark:                                                                                              | N/A                                                                                                             | organization                                                                                                    |
| `Id`                                                                                                            | *string*                                                                                                        | :heavy_check_mark:                                                                                              | N/A                                                                                                             | org_123                                                                                                         |
| `Name`                                                                                                          | *string*                                                                                                        | :heavy_check_mark:                                                                                              | N/A                                                                                                             | Acme Corp                                                                                                       |
| `Slug`                                                                                                          | *string*                                                                                                        | :heavy_check_mark:                                                                                              | N/A                                                                                                             | acme-corp                                                                                                       |
| `MembersCount`                                                                                                  | *long*                                                                                                          | :heavy_minus_sign:                                                                                              | N/A                                                                                                             | 150                                                                                                             |
| `MissingMemberWithElevatedPermissions`                                                                          | *bool*                                                                                                          | :heavy_minus_sign:                                                                                              | N/A                                                                                                             |                                                                                                                 |
| `PendingInvitationsCount`                                                                                       | *long*                                                                                                          | :heavy_minus_sign:                                                                                              | N/A                                                                                                             |                                                                                                                 |
| `MaxAllowedMemberships`                                                                                         | *long*                                                                                                          | :heavy_check_mark:                                                                                              | N/A                                                                                                             | 300                                                                                                             |
| `AdminDeleteEnabled`                                                                                            | *bool*                                                                                                          | :heavy_check_mark:                                                                                              | N/A                                                                                                             | true                                                                                                            |
| `PublicMetadata`                                                                                                | Dictionary<String, *object*>                                                                                    | :heavy_check_mark:                                                                                              | N/A                                                                                                             | {<br/>"public_info": "Info visible to everyone"<br/>}                                                           |
| `PrivateMetadata`                                                                                               | Dictionary<String, *object*>                                                                                    | :heavy_check_mark:                                                                                              | N/A                                                                                                             | {<br/>"internal_use_only": "Sensitive data"<br/>}                                                               |
| `CreatedBy`                                                                                                     | *string*                                                                                                        | :heavy_minus_sign:                                                                                              | N/A                                                                                                             | user_123456                                                                                                     |
| `CreatedAt`                                                                                                     | *long*                                                                                                          | :heavy_check_mark:                                                                                              | Unix timestamp of creation.<br/>                                                                                | 1625078400                                                                                                      |
| `UpdatedAt`                                                                                                     | *long*                                                                                                          | :heavy_check_mark:                                                                                              | Unix timestamp of last update.<br/>                                                                             | 1625164800                                                                                                      |

================
File: docs/Models/Components/OrganizationMembershipOrganizationObject.md
================
# OrganizationMembershipOrganizationObject


## Values

| Name           | Value          |
| -------------- | -------------- |
| `Organization` | organization   |

================
File: docs/Models/Components/OrganizationMembershipPublicUserData.md
================
# OrganizationMembershipPublicUserData

An organization membership with public user data populated


## Fields

| Field                                                                                                                   | Type                                                                                                                    | Required                                                                                                                | Description                                                                                                             |
| ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     |
| `FirstName`                                                                                                             | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     |
| `LastName`                                                                                                              | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     |
| ~~`ProfileImageUrl`~~                                                                                                   | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible. |
| `ImageUrl`                                                                                                              | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     |
| `HasImage`                                                                                                              | *bool*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     |
| `Identifier`                                                                                                            | *string*                                                                                                                | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     |

================
File: docs/Models/Components/OrganizationMemberships.md
================
# OrganizationMemberships

A list of organization memberships


## Fields

| Field                                                                             | Type                                                                              | Required                                                                          | Description                                                                       | Example                                                                           |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `Data`                                                                            | List<[OrganizationMembership](../../Models/Components/OrganizationMembership.md)> | :heavy_check_mark:                                                                | N/A                                                                               |                                                                                   |
| `TotalCount`                                                                      | *long*                                                                            | :heavy_check_mark:                                                                | Total number of organization memberships<br/>                                     | 1                                                                                 |

================
File: docs/Models/Components/OrganizationObject.md
================
# OrganizationObject


## Values

| Name           | Value          |
| -------------- | -------------- |
| `Organization` | organization   |

================
File: docs/Models/Components/Organizations.md
================
# Organizations

A list of organizations


## Fields

| Field                                                         | Type                                                          | Required                                                      | Description                                                   | Example                                                       |
| ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- |
| `Data`                                                        | List<[Organization](../../Models/Components/Organization.md)> | :heavy_check_mark:                                            | N/A                                                           | [<br/>{<br/>"id": "org_1234",<br/>"name": "Sample Organization"<br/>}<br/>] |
| `TotalCount`                                                  | *long*                                                        | :heavy_check_mark:                                            | Total number of organizations<br/>                            | 1                                                             |

================
File: docs/Models/Components/OrganizationSettings.md
================
# OrganizationSettings

Success


## Fields

| Field                                                                                          | Type                                                                                           | Required                                                                                       | Description                                                                                    | Example                                                                                        |
| ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |
| `Object`                                                                                       | [OrganizationSettingsObject](../../Models/Components/OrganizationSettingsObject.md)            | :heavy_check_mark:                                                                             | String representing the object's type. Objects of the same type share the same value.          | organization_settings                                                                          |
| `Enabled`                                                                                      | *bool*                                                                                         | :heavy_check_mark:                                                                             | N/A                                                                                            | true                                                                                           |
| `MaxAllowedMemberships`                                                                        | *long*                                                                                         | :heavy_check_mark:                                                                             | N/A                                                                                            | 5                                                                                              |
| `MaxAllowedRoles`                                                                              | *long*                                                                                         | :heavy_check_mark:                                                                             | N/A                                                                                            | 3                                                                                              |
| `MaxAllowedPermissions`                                                                        | *long*                                                                                         | :heavy_check_mark:                                                                             | N/A                                                                                            | 15                                                                                             |
| `CreatorRole`                                                                                  | *string*                                                                                       | :heavy_check_mark:                                                                             | The role key that a user will be assigned after creating an organization.                      | admin                                                                                          |
| `AdminDeleteEnabled`                                                                           | *bool*                                                                                         | :heavy_check_mark:                                                                             | The default for whether an admin can delete an organization with the Frontend API.             | true                                                                                           |
| `DomainsEnabled`                                                                               | *bool*                                                                                         | :heavy_check_mark:                                                                             | N/A                                                                                            | true                                                                                           |
| `DomainsEnrollmentModes`                                                                       | List<[DomainsEnrollmentModes](../../Models/Components/DomainsEnrollmentModes.md)>              | :heavy_check_mark:                                                                             | N/A                                                                                            | [<br/>"automatic_invitation",<br/>"automatic_suggestion"<br/>]                                 |
| `DomainsDefaultRole`                                                                           | *string*                                                                                       | :heavy_check_mark:                                                                             | The role key that it will be used in order to create an organization invitation or suggestion. | member                                                                                         |

================
File: docs/Models/Components/OrganizationSettingsObject.md
================
# OrganizationSettingsObject

String representing the object's type. Objects of the same type share the same value.


## Values

| Name                   | Value                  |
| ---------------------- | ---------------------- |
| `OrganizationSettings` | organization_settings  |

================
File: docs/Models/Components/OrganizationWithLogo.md
================
# OrganizationWithLogo


## Fields

| Field                                                                                                                   | Type                                                                                                                    | Required                                                                                                                | Description                                                                                                             | Example                                                                                                                 |
| ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                | [OrganizationWithLogoObject](../../Models/Components/OrganizationWithLogoObject.md)                                     | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | organization                                                                                                            |
| `Id`                                                                                                                    | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | org_123                                                                                                                 |
| `Name`                                                                                                                  | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | Acme Corp                                                                                                               |
| `Slug`                                                                                                                  | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | acme-corp                                                                                                               |
| `MembersCount`                                                                                                          | *long*                                                                                                                  | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     | 150                                                                                                                     |
| `MissingMemberWithElevatedPermissions`                                                                                  | *bool*                                                                                                                  | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     |                                                                                                                         |
| `PendingInvitationsCount`                                                                                               | *long*                                                                                                                  | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     |                                                                                                                         |
| `MaxAllowedMemberships`                                                                                                 | *long*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | 300                                                                                                                     |
| `AdminDeleteEnabled`                                                                                                    | *bool*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | true                                                                                                                    |
| `PublicMetadata`                                                                                                        | Dictionary<String, *object*>                                                                                            | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | {<br/>"public_info": "Info visible to everyone"<br/>}                                                                   |
| `PrivateMetadata`                                                                                                       | Dictionary<String, *object*>                                                                                            | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | {<br/>"internal_use_only": "Sensitive data"<br/>}                                                                       |
| `CreatedBy`                                                                                                             | *string*                                                                                                                | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     | user_123456                                                                                                             |
| `CreatedAt`                                                                                                             | *long*                                                                                                                  | :heavy_check_mark:                                                                                                      | Unix timestamp of creation.<br/>                                                                                        | 1625078400                                                                                                              |
| `UpdatedAt`                                                                                                             | *long*                                                                                                                  | :heavy_check_mark:                                                                                                      | Unix timestamp of last update.<br/>                                                                                     | 1625164800                                                                                                              |
| ~~`LogoUrl`~~                                                                                                           | *string*                                                                                                                | :heavy_minus_sign:                                                                                                      | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible. | https://example.com/logo_url.png                                                                                        |
| `ImageUrl`                                                                                                              | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | https://example.com/image_url.png                                                                                       |
| `HasImage`                                                                                                              | *bool*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | true                                                                                                                    |

================
File: docs/Models/Components/OrganizationWithLogoObject.md
================
# OrganizationWithLogoObject


## Values

| Name           | Value          |
| -------------- | -------------- |
| `Organization` | organization   |

================
File: docs/Models/Components/Otp.md
================
# Otp


## Fields

| Field                                                               | Type                                                                | Required                                                            | Description                                                         | Example                                                             |
| ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `Status`                                                            | [VerificationStatus](../../Models/Components/VerificationStatus.md) | :heavy_check_mark:                                                  | N/A                                                                 | verified                                                            |
| `Strategy`                                                          | [Strategy](../../Models/Components/Strategy.md)                     | :heavy_check_mark:                                                  | N/A                                                                 | email_code                                                          |
| `Attempts`                                                          | *long*                                                              | :heavy_check_mark:                                                  | N/A                                                                 | 1                                                                   |
| `ExpireAt`                                                          | *long*                                                              | :heavy_check_mark:                                                  | N/A                                                                 | 1615462399                                                          |
| `VerifiedAtClient`                                                  | *string*                                                            | :heavy_minus_sign:                                                  | N/A                                                                 |                                                                     |

================
File: docs/Models/Components/OTPVerificationStatus.md
================
# OTPVerificationStatus


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |
| `Failed`     | failed       |
| `Expired`    | expired      |

================
File: docs/Models/Components/OTPVerificationStrategy.md
================
# OTPVerificationStrategy


## Values

| Name                      | Value                     |
| ------------------------- | ------------------------- |
| `PhoneCode`               | phone_code                |
| `EmailCode`               | email_code                |
| `ResetPasswordEmailCode`  | reset_password_email_code |

================
File: docs/Models/Components/Passkey.md
================
# Passkey


## Fields

| Field                                                                                 | Type                                                                                  | Required                                                                              | Description                                                                           | Example                                                                               |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `Status`                                                                              | [PasskeyVerificationStatus](../../Models/Components/PasskeyVerificationStatus.md)     | :heavy_check_mark:                                                                    | N/A                                                                                   | verified                                                                              |
| `Strategy`                                                                            | [PasskeyVerificationStrategy](../../Models/Components/PasskeyVerificationStrategy.md) | :heavy_check_mark:                                                                    | N/A                                                                                   | passkey                                                                               |
| `Nonce`                                                                               | [Nonce](../../Models/Components/Nonce.md)                                             | :heavy_minus_sign:                                                                    | N/A                                                                                   | nonce_value                                                                           |
| `Message`                                                                             | *string*                                                                              | :heavy_minus_sign:                                                                    | N/A                                                                                   |                                                                                       |
| `Attempts`                                                                            | *long*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   | <nil>                                                                                 |
| `ExpireAt`                                                                            | *long*                                                                                | :heavy_check_mark:                                                                    | N/A                                                                                   | <nil>                                                                                 |
| `VerifiedAtClient`                                                                    | *string*                                                                              | :heavy_minus_sign:                                                                    | N/A                                                                                   |                                                                                       |

================
File: docs/Models/Components/PasskeyVerificationStatus.md
================
# PasskeyVerificationStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Verified` | verified   |

================
File: docs/Models/Components/PasskeyVerificationStrategy.md
================
# PasskeyVerificationStrategy


## Values

| Name      | Value     |
| --------- | --------- |
| `Passkey` | passkey   |

================
File: docs/Models/Components/PhoneNumber.md
================
# PhoneNumber

Success


## Fields

| Field                                                                                      | Type                                                                                       | Required                                                                                   | Description                                                                                | Example                                                                                    |
| ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ |
| `Id`                                                                                       | *string*                                                                                   | :heavy_minus_sign:                                                                         | N/A                                                                                        | ph_123456789                                                                               |
| `Object`                                                                                   | [PhoneNumberObject](../../Models/Components/PhoneNumberObject.md)                          | :heavy_check_mark:                                                                         | String representing the object's type. Objects of the same type share the same value.<br/> | phone_number                                                                               |
| `PhoneNumber`                                                                              | *string*                                                                                   | :heavy_check_mark:                                                                         | N/A                                                                                        | +11234567890                                                                               |
| `ReservedForSecondFactor`                                                                  | *bool*                                                                                     | :heavy_minus_sign:                                                                         | N/A                                                                                        | false                                                                                      |
| `DefaultSecondFactor`                                                                      | *bool*                                                                                     | :heavy_minus_sign:                                                                         | N/A                                                                                        | true                                                                                       |
| `Reserved`                                                                                 | *bool*                                                                                     | :heavy_check_mark:                                                                         | N/A                                                                                        | false                                                                                      |
| `Verification`                                                                             | [PhoneNumberVerification](../../Models/Components/PhoneNumberVerification.md)              | :heavy_check_mark:                                                                         | N/A                                                                                        | {<br/>"status": "verified",<br/>"strategy": "phone_code",<br/>"attempts": 2,<br/>"expire_at": 1622852400<br/>} |
| `LinkedTo`                                                                                 | List<[IdentificationLink](../../Models/Components/IdentificationLink.md)>                  | :heavy_check_mark:                                                                         | N/A                                                                                        | [<br/>{<br/>"type": "oauth_google",<br/>"id": "link_id_123"<br/>}<br/>]                    |
| `BackupCodes`                                                                              | List<*string*>                                                                             | :heavy_minus_sign:                                                                         | N/A                                                                                        | [<br/>"code1",<br/>"code2",<br/>"code3"<br/>]                                              |
| `CreatedAt`                                                                                | *long*                                                                                     | :heavy_check_mark:                                                                         | Unix timestamp of creation<br/>                                                            | 1594842023                                                                                 |
| `UpdatedAt`                                                                                | *long*                                                                                     | :heavy_check_mark:                                                                         | Unix timestamp of creation<br/>                                                            | 1604842023                                                                                 |

================
File: docs/Models/Components/PhoneNumberObject.md
================
# PhoneNumberObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name          | Value         |
| ------------- | ------------- |
| `PhoneNumber` | phone_number  |

================
File: docs/Models/Components/PhoneNumberVerification.md
================
# PhoneNumberVerification


## Supported Types

### VerificationOTP

```csharp
PhoneNumberVerification.CreateVerificationOTP(/* values here */);
```

### VerificationAdmin

```csharp
PhoneNumberVerification.CreateVerificationAdmin(/* values here */);
```

================
File: docs/Models/Components/ProxyCheck.md
================
# ProxyCheck

Health check information about a domain's proxy configuration validation attempt.


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     | Example                                                         |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `Object`                                                        | [ProxyCheckObject](../../Models/Components/ProxyCheckObject.md) | :heavy_check_mark:                                              | N/A                                                             | proxy_check                                                     |
| `Id`                                                            | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | chk_3498fd                                                      |
| `DomainId`                                                      | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | domain_32hfu3e                                                  |
| `LastRunAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of last run.<br/>                                | 1622547600                                                      |
| `ProxyUrl`                                                      | *string*                                                        | :heavy_check_mark:                                              | N/A                                                             | https://example.com/__clerk                                     |
| `Successful`                                                    | *bool*                                                          | :heavy_check_mark:                                              | N/A                                                             | true                                                            |
| `CreatedAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of creation.<br/>                                | 1622547000                                                      |
| `UpdatedAt`                                                     | *long*                                                          | :heavy_check_mark:                                              | Unix timestamp of last update.<br/>                             | 1622547700                                                      |

================
File: docs/Models/Components/ProxyCheckObject.md
================
# ProxyCheckObject


## Values

| Name         | Value        |
| ------------ | ------------ |
| `ProxyCheck` | proxy_check  |

================
File: docs/Models/Components/RedirectURL.md
================
# RedirectURL

List of Redirect URLs


## Fields

| Field                                                             | Type                                                              | Required                                                          | Description                                                       | Example                                                           |
| ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- |
| `Object`                                                          | [RedirectURLObject](../../Models/Components/RedirectURLObject.md) | :heavy_check_mark:                                                | N/A                                                               | redirect_url                                                      |
| `Id`                                                              | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | red_12345                                                         |
| `Url`                                                             | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | https://my-app.com/oauth-callback                                 |
| `CreatedAt`                                                       | *long*                                                            | :heavy_check_mark:                                                | Unix timestamp of creation.<br/>                                  | 1610000000                                                        |
| `UpdatedAt`                                                       | *long*                                                            | :heavy_check_mark:                                                | Unix timestamp of last update.<br/>                               | 1620000000                                                        |

================
File: docs/Models/Components/RedirectURLObject.md
================
# RedirectURLObject


## Values

| Name          | Value         |
| ------------- | ------------- |
| `RedirectUrl` | redirect_url  |

================
File: docs/Models/Components/Saml.md
================
# Saml


## Fields

| Field                                                                           | Type                                                                            | Required                                                                        | Description                                                                     | Example                                                                         |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `Status`                                                                        | [SAMLVerificationStatus](../../Models/Components/SAMLVerificationStatus.md)     | :heavy_check_mark:                                                              | N/A                                                                             | verified                                                                        |
| `Strategy`                                                                      | [SAMLVerificationStrategy](../../Models/Components/SAMLVerificationStrategy.md) | :heavy_check_mark:                                                              | N/A                                                                             | saml                                                                            |
| `ExternalVerificationRedirectUrl`                                               | *string*                                                                        | :heavy_check_mark:                                                              | N/A                                                                             | https://example.com/saml_callback                                               |
| `Error`                                                                         | [VerificationError](../../Models/Components/VerificationError.md)               | :heavy_minus_sign:                                                              | N/A                                                                             | <nil>                                                                           |
| `ExpireAt`                                                                      | *long*                                                                          | :heavy_check_mark:                                                              | N/A                                                                             | 1622852400                                                                      |
| `Attempts`                                                                      | *long*                                                                          | :heavy_check_mark:                                                              | N/A                                                                             | <nil>                                                                           |
| `VerifiedAtClient`                                                              | *string*                                                                        | :heavy_minus_sign:                                                              | N/A                                                                             |                                                                                 |

================
File: docs/Models/Components/SAMLAccount.md
================
# SAMLAccount


## Fields

| Field                                                                                                                   | Type                                                                                                                    | Required                                                                                                                | Description                                                                                                             | Example                                                                                                                 |
| ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `Id`                                                                                                                    | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | saml_account_id_123                                                                                                     |
| `Object`                                                                                                                | [SAMLAccountObject](../../Models/Components/SAMLAccountObject.md)                                                       | :heavy_check_mark:                                                                                                      | String representing the object's type. Objects of the same type share the same value.<br/>                              | saml_account                                                                                                            |
| `Provider`                                                                                                              | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | SAML Provider                                                                                                           |
| `Active`                                                                                                                | *bool*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | true                                                                                                                    |
| `EmailAddress`                                                                                                          | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | user@example.com                                                                                                        |
| `FirstName`                                                                                                             | *string*                                                                                                                | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     | John                                                                                                                    |
| `LastName`                                                                                                              | *string*                                                                                                                | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     | Doe                                                                                                                     |
| `ProviderUserId`                                                                                                        | *string*                                                                                                                | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     | prov_user_id_123                                                                                                        |
| `PublicMetadata`                                                                                                        | Dictionary<String, *object*>                                                                                            | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     | {<br/>"department": "IT"<br/>}                                                                                          |
| `Verification`                                                                                                          | [SAMLAccountVerification](../../Models/Components/SAMLAccountVerification.md)                                           | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | {<br/>"status": "verified",<br/>"strategy": "saml",<br/>"external_verification_redirect_url": "https://example.com/saml_callback"<br/>} |
| `SamlConnection`                                                                                                        | [SamlConnection](../../Models/Components/SamlConnection.md)                                                             | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     |                                                                                                                         |

================
File: docs/Models/Components/SAMLAccountObject.md
================
# SAMLAccountObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name          | Value         |
| ------------- | ------------- |
| `SamlAccount` | saml_account  |

================
File: docs/Models/Components/SAMLAccountVerification.md
================
# SAMLAccountVerification


## Supported Types

### Saml

```csharp
SAMLAccountVerification.CreateSaml(/* values here */);
```

### VerificationTicket

```csharp
SAMLAccountVerification.CreateVerificationTicket(/* values here */);
```

================
File: docs/Models/Components/SamlConnection.md
================
# SamlConnection


## Supported Types

### SAMLConnectionSAMLConnection

```csharp
SamlConnection.CreateSAMLConnectionSAMLConnection(/* values here */);
```

================
File: docs/Models/Components/SAMLConnectionAttributeMapping.md
================
# SAMLConnectionAttributeMapping


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `UserId`           | *string*           | :heavy_check_mark: | N/A                |
| `EmailAddress`     | *string*           | :heavy_check_mark: | N/A                |
| `FirstName`        | *string*           | :heavy_check_mark: | N/A                |
| `LastName`         | *string*           | :heavy_check_mark: | N/A                |

================
File: docs/Models/Components/SAMLConnections.md
================
# SAMLConnections

A list of SAML Connections


## Fields

| Field                                                                           | Type                                                                            | Required                                                                        | Description                                                                     | Example                                                                         |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `Data`                                                                          | List<[SchemasSAMLConnection](../../Models/Components/SchemasSAMLConnection.md)> | :heavy_check_mark:                                                              | N/A                                                                             |                                                                                 |
| `TotalCount`                                                                    | *long*                                                                          | :heavy_check_mark:                                                              | Total number of SAML Connections<br/>                                           | 5                                                                               |

================
File: docs/Models/Components/SAMLConnectionSAMLConnection.md
================
# SAMLConnectionSAMLConnection


## Fields

| Field                              | Type                               | Required                           | Description                        | Example                            |
| ---------------------------------- | ---------------------------------- | ---------------------------------- | ---------------------------------- | ---------------------------------- |
| `Id`                               | *string*                           | :heavy_check_mark:                 | N/A                                | sc_1234567890                      |
| `Name`                             | *string*                           | :heavy_check_mark:                 | N/A                                | My Company SAML Config             |
| `Domain`                           | *string*                           | :heavy_check_mark:                 | N/A                                | mycompany.com                      |
| `Active`                           | *bool*                             | :heavy_check_mark:                 | N/A                                | true                               |
| `Provider`                         | *string*                           | :heavy_check_mark:                 | N/A                                | saml_custom                        |
| `SyncUserAttributes`               | *bool*                             | :heavy_check_mark:                 | N/A                                | true                               |
| `AllowSubdomains`                  | *bool*                             | :heavy_minus_sign:                 | N/A                                | false                              |
| `AllowIdpInitiated`                | *bool*                             | :heavy_minus_sign:                 | N/A                                | true                               |
| `DisableAdditionalIdentifications` | *bool*                             | :heavy_minus_sign:                 | N/A                                |                                    |
| `CreatedAt`                        | *long*                             | :heavy_check_mark:                 | Unix timestamp of creation.<br/>   | 1614768000                         |
| `UpdatedAt`                        | *long*                             | :heavy_check_mark:                 | Unix timestamp of last update.<br/> | 1622540800                         |

================
File: docs/Models/Components/SAMLErrorClerkError.md
================
# SAMLErrorClerkError


## Fields

| Field                                                                 | Type                                                                  | Required                                                              | Description                                                           | Example                                                               |
| --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- |
| `Message`                                                             | *string*                                                              | :heavy_check_mark:                                                    | N/A                                                                   | Invalid input                                                         |
| `LongMessage`                                                         | *string*                                                              | :heavy_check_mark:                                                    | N/A                                                                   | The input provided does not meet the requirements.                    |
| `Code`                                                                | *string*                                                              | :heavy_check_mark:                                                    | N/A                                                                   | 400_bad_request                                                       |
| `Meta`                                                                | [ClerkErrorErrorMeta](../../Models/Components/ClerkErrorErrorMeta.md) | :heavy_minus_sign:                                                    | N/A                                                                   | {}                                                                    |
| `ClerkTraceId`                                                        | *string*                                                              | :heavy_minus_sign:                                                    | N/A                                                                   | trace_123456789abcd                                                   |

================
File: docs/Models/Components/SAMLVerificationStatus.md
================
# SAMLVerificationStatus


## Values

| Name           | Value          |
| -------------- | -------------- |
| `Unverified`   | unverified     |
| `Verified`     | verified       |
| `Failed`       | failed         |
| `Expired`      | expired        |
| `Transferable` | transferable   |

================
File: docs/Models/Components/SAMLVerificationStrategy.md
================
# SAMLVerificationStrategy


## Values

| Name   | Value  |
| ------ | ------ |
| `Saml` | saml   |

================
File: docs/Models/Components/SchemasPasskey.md
================
# SchemasPasskey


## Fields

| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |
| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `Id`                                                                                   | *string*                                                                               | :heavy_minus_sign:                                                                     | N/A                                                                                    | passkey_id_123                                                                         |
| `Object`                                                                               | [SchemasPasskeyObject](../../Models/Components/SchemasPasskeyObject.md)                | :heavy_check_mark:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | passkey                                                                                |
| `Name`                                                                                 | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | My Passkey                                                                             |
| `LastUsedAt`                                                                           | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of when the passkey was last used.<br/>                                 | 1615852800                                                                             |
| `Verification`                                                                         | [SchemasPasskeyVerification](../../Models/Components/SchemasPasskeyVerification.md)    | :heavy_check_mark:                                                                     | N/A                                                                                    | {<br/>"status": "verified",<br/>"strategy": "passkey",<br/>"nonce": "nonce_value"<br/>} |

================
File: docs/Models/Components/SchemasPasskeyObject.md
================
# SchemasPasskeyObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name      | Value     |
| --------- | --------- |
| `Passkey` | passkey   |

================
File: docs/Models/Components/SchemasPasskeyVerification.md
================
# SchemasPasskeyVerification


## Supported Types

### Passkey

```csharp
SchemasPasskeyVerification.CreatePasskey(/* values here */);
```

================
File: docs/Models/Components/SchemasSAMLConnection.md
================
# SchemasSAMLConnection


## Fields

| Field                                                                                       | Type                                                                                        | Required                                                                                    | Description                                                                                 |
| ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |
| `Object`                                                                                    | [SchemasSAMLConnectionObject](../../Models/Components/SchemasSAMLConnectionObject.md)       | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `Id`                                                                                        | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `Name`                                                                                      | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `Domain`                                                                                    | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `IdpEntityId`                                                                               | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `IdpSsoUrl`                                                                                 | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `IdpCertificate`                                                                            | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `IdpMetadataUrl`                                                                            | *string*                                                                                    | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `IdpMetadata`                                                                               | *string*                                                                                    | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `AcsUrl`                                                                                    | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `SpEntityId`                                                                                | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `SpMetadataUrl`                                                                             | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `OrganizationId`                                                                            | *string*                                                                                    | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `AttributeMapping`                                                                          | [SAMLConnectionAttributeMapping](../../Models/Components/SAMLConnectionAttributeMapping.md) | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `Active`                                                                                    | *bool*                                                                                      | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `Provider`                                                                                  | *string*                                                                                    | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `UserCount`                                                                                 | *long*                                                                                      | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `SyncUserAttributes`                                                                        | *bool*                                                                                      | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `AllowSubdomains`                                                                           | *bool*                                                                                      | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `AllowIdpInitiated`                                                                         | *bool*                                                                                      | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `DisableAdditionalIdentifications`                                                          | *bool*                                                                                      | :heavy_minus_sign:                                                                          | N/A                                                                                         |
| `CreatedAt`                                                                                 | *long*                                                                                      | :heavy_check_mark:                                                                          | Unix timestamp of creation.<br/>                                                            |
| `UpdatedAt`                                                                                 | *long*                                                                                      | :heavy_check_mark:                                                                          | Unix timestamp of last update.<br/>                                                         |

================
File: docs/Models/Components/SchemasSAMLConnectionObject.md
================
# SchemasSAMLConnectionObject


## Values

| Name             | Value            |
| ---------------- | ---------------- |
| `SamlConnection` | saml_connection  |

================
File: docs/Models/Components/Security.md
================
# Security


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `BearerAuth`       | *string*           | :heavy_minus_sign: | N/A                |

================
File: docs/Models/Components/Session.md
================
# Session


## Fields

| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |
| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `Object`                                                                               | [SessionObject](../../Models/Components/SessionObject.md)                              | :heavy_check_mark:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | session                                                                                |
| `Id`                                                                                   | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | sess_123456789abcd                                                                     |
| `UserId`                                                                               | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | user_123456789abcd                                                                     |
| `ClientId`                                                                             | *string*                                                                               | :heavy_check_mark:                                                                     | N/A                                                                                    | client_123456789abcd                                                                   |
| `Actor`                                                                                | [Models.Components.Actor](../../Models/Components/Actor.md)                            | :heavy_minus_sign:                                                                     | N/A                                                                                    | <nil>                                                                                  |
| `Status`                                                                               | [Models.Components.Status](../../Models/Components/Status.md)                          | :heavy_check_mark:                                                                     | N/A                                                                                    | active                                                                                 |
| `LastActiveOrganizationId`                                                             | *string*                                                                               | :heavy_minus_sign:                                                                     | N/A                                                                                    | org_123456789abcd                                                                      |
| `LastActiveAt`                                                                         | *long*                                                                                 | :heavy_check_mark:                                                                     | N/A                                                                                    | 1622471123                                                                             |
| `LatestActivity`                                                                       | [SessionActivityResponse](../../Models/Components/SessionActivityResponse.md)          | :heavy_minus_sign:                                                                     | N/A                                                                                    |                                                                                        |
| `ExpireAt`                                                                             | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of expiration.<br/>                                                     | 1685471123                                                                             |
| `AbandonAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of abandonment.<br/>                                                    | 1630471123                                                                             |
| `UpdatedAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of last update.<br/>                                                    | 1622532323                                                                             |
| `CreatedAt`                                                                            | *long*                                                                                 | :heavy_check_mark:                                                                     | Unix timestamp of creation.<br/>                                                       | 1622470000                                                                             |

================
File: docs/Models/Components/SessionActivityResponse.md
================
# SessionActivityResponse


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `Object`           | *string*           | :heavy_check_mark: | N/A                |
| `Id`               | *string*           | :heavy_check_mark: | N/A                |
| `DeviceType`       | *string*           | :heavy_minus_sign: | N/A                |
| `IsMobile`         | *bool*             | :heavy_check_mark: | N/A                |
| `BrowserName`      | *string*           | :heavy_minus_sign: | N/A                |
| `BrowserVersion`   | *string*           | :heavy_minus_sign: | N/A                |
| `IpAddress`        | *string*           | :heavy_minus_sign: | N/A                |
| `City`             | *string*           | :heavy_minus_sign: | N/A                |
| `Country`          | *string*           | :heavy_minus_sign: | N/A                |

================
File: docs/Models/Components/SessionObject.md
================
# SessionObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name      | Value     |
| --------- | --------- |
| `Session` | session   |

================
File: docs/Models/Components/SignInToken.md
================
# SignInToken

Success


## Fields

| Field                                                             | Type                                                              | Required                                                          | Description                                                       | Example                                                           |
| ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- |
| `Object`                                                          | [SignInTokenObject](../../Models/Components/SignInTokenObject.md) | :heavy_check_mark:                                                | N/A                                                               | sign_in_token                                                     |
| `Id`                                                              | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | token_12345                                                       |
| `Status`                                                          | [SignInTokenStatus](../../Models/Components/SignInTokenStatus.md) | :heavy_check_mark:                                                | N/A                                                               | pending                                                           |
| `UserId`                                                          | *string*                                                          | :heavy_check_mark:                                                | N/A                                                               | user_12345                                                        |
| `Token`                                                           | *string*                                                          | :heavy_minus_sign:                                                | N/A                                                               | secret_token                                                      |
| `Url`                                                             | *string*                                                          | :heavy_minus_sign:                                                | N/A                                                               | https://example.com/signin/token                                  |
| `CreatedAt`                                                       | *long*                                                            | :heavy_check_mark:                                                | Unix timestamp of creation.<br/>                                  | 1609459200                                                        |
| `UpdatedAt`                                                       | *long*                                                            | :heavy_check_mark:                                                | Unix timestamp of last update.<br/>                               | 1612137600                                                        |

================
File: docs/Models/Components/SignInTokenObject.md
================
# SignInTokenObject


## Values

| Name          | Value         |
| ------------- | ------------- |
| `SignInToken` | sign_in_token |

================
File: docs/Models/Components/SignInTokenStatus.md
================
# SignInTokenStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |

================
File: docs/Models/Components/SignUp.md
================
# SignUp

Success


## Fields

| Field                                                                                                                   | Type                                                                                                                    | Required                                                                                                                | Description                                                                                                             | Example                                                                                                                 |
| ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                | [SignUpObject](../../Models/Components/SignUpObject.md)                                                                 | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | sign_up_attempt                                                                                                         |
| `Id`                                                                                                                    | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | signup_1234567890abcdef                                                                                                 |
| `Status`                                                                                                                | [SignUpStatus](../../Models/Components/SignUpStatus.md)                                                                 | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | complete                                                                                                                |
| `RequiredFields`                                                                                                        | List<*string*>                                                                                                          | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | [<br/>"email_address"<br/>]                                                                                             |
| `OptionalFields`                                                                                                        | List<*string*>                                                                                                          | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | [<br/>"first_name",<br/>"last_name"<br/>]                                                                               |
| `MissingFields`                                                                                                         | List<*string*>                                                                                                          | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | [<br/>"phone_number"<br/>]                                                                                              |
| `UnverifiedFields`                                                                                                      | List<*string*>                                                                                                          | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | [<br/>"email_address"<br/>]                                                                                             |
| `Verifications`                                                                                                         | [SignUpVerifications](../../Models/Components/SignUpVerifications.md)                                                   | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     |                                                                                                                         |
| `Username`                                                                                                              | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | user_123456                                                                                                             |
| `EmailAddress`                                                                                                          | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | user@example.com                                                                                                        |
| `PhoneNumber`                                                                                                           | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | +1234567890                                                                                                             |
| `Web3Wallet`                                                                                                            | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | 0x1234567890abcdef1234567890abcdef12345678                                                                              |
| `PasswordEnabled`                                                                                                       | *bool*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | true                                                                                                                    |
| `FirstName`                                                                                                             | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | John                                                                                                                    |
| `LastName`                                                                                                              | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | Doe                                                                                                                     |
| `UnsafeMetadata`                                                                                                        | Dictionary<String, *object*>                                                                                            | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     |                                                                                                                         |
| `PublicMetadata`                                                                                                        | Dictionary<String, *object*>                                                                                            | :heavy_minus_sign:                                                                                                      | N/A                                                                                                                     |                                                                                                                         |
| `CustomAction`                                                                                                          | *bool*                                                                                                                  | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | false                                                                                                                   |
| `ExternalId`                                                                                                            | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | ext_id_7890abcdef123456                                                                                                 |
| `CreatedSessionId`                                                                                                      | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | sess_1234567890abcdef                                                                                                   |
| `CreatedUserId`                                                                                                         | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | N/A                                                                                                                     | user_1234567890abcdef                                                                                                   |
| `AbandonAt`                                                                                                             | *long*                                                                                                                  | :heavy_check_mark:                                                                                                      | Unix timestamp at which the user abandoned the sign up attempt.<br/>                                                    | 1609459200                                                                                                              |
| `LegalAcceptedAt`                                                                                                       | *long*                                                                                                                  | :heavy_check_mark:                                                                                                      | Unix timestamp at which the user accepted the legal requirements.<br/>                                                  | 1700690400000                                                                                                           |
| ~~`ExternalAccount`~~                                                                                                   | [SignUpExternalAccount](../../Models/Components/SignUpExternalAccount.md)                                               | :heavy_minus_sign:                                                                                                      | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible. |                                                                                                                         |

================
File: docs/Models/Components/SignUpExternalAccount.md
================
# ~~SignUpExternalAccount~~

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Components/SignUpObject.md
================
# SignUpObject


## Values

| Name            | Value           |
| --------------- | --------------- |
| `SignUpAttempt` | sign_up_attempt |

================
File: docs/Models/Components/SignUpStatus.md
================
# SignUpStatus


## Values

| Name                  | Value                 |
| --------------------- | --------------------- |
| `MissingRequirements` | missing_requirements  |
| `Complete`            | complete              |
| `Abandoned`           | abandoned             |

================
File: docs/Models/Components/SignUpVerification.md
================
# SignUpVerification


## Fields

| Field                                               | Type                                                | Required                                            | Description                                         |
| --------------------------------------------------- | --------------------------------------------------- | --------------------------------------------------- | --------------------------------------------------- |
| `NextAction`                                        | [NextAction](../../Models/Components/NextAction.md) | :heavy_minus_sign:                                  | N/A                                                 |
| `SupportedStrategies`                               | List<*string*>                                      | :heavy_minus_sign:                                  | N/A                                                 |
| `AdditionalProperties`                              | Dictionary<String, *object*>                        | :heavy_minus_sign:                                  | N/A                                                 |

================
File: docs/Models/Components/SignUpVerifications.md
================
# SignUpVerifications


## Fields

| Field                                                               | Type                                                                | Required                                                            | Description                                                         |
| ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `EmailAddress`                                                      | [SignUpVerification](../../Models/Components/SignUpVerification.md) | :heavy_check_mark:                                                  | N/A                                                                 |
| `PhoneNumber`                                                       | [SignUpVerification](../../Models/Components/SignUpVerification.md) | :heavy_check_mark:                                                  | N/A                                                                 |
| `Web3Wallet`                                                        | [SignUpVerification](../../Models/Components/SignUpVerification.md) | :heavy_check_mark:                                                  | N/A                                                                 |
| `ExternalAccount`                                                   | [ExternalAccount](../../Models/Components/ExternalAccount.md)       | :heavy_check_mark:                                                  | N/A                                                                 |

================
File: docs/Models/Components/Status.md
================
# Status


## Values

| Name        | Value       |
| ----------- | ----------- |
| `Active`    | active      |
| `Revoked`   | revoked     |
| `Ended`     | ended       |
| `Expired`   | expired     |
| `Removed`   | removed     |
| `Abandoned` | abandoned   |
| `Replaced`  | replaced    |

================
File: docs/Models/Components/Strategy.md
================
# Strategy


## Values

| Name                      | Value                     |
| ------------------------- | ------------------------- |
| `PhoneCode`               | phone_code                |
| `EmailCode`               | email_code                |
| `ResetPasswordEmailCode`  | reset_password_email_code |

================
File: docs/Models/Components/SvixURL.md
================
# SvixURL

Response that contains a temporary Svix URL to access management dashboard


## Fields

| Field                                  | Type                                   | Required                               | Description                            | Example                                |
| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |
| `SvixUrl`                              | *string*                               | :heavy_check_mark:                     | N/A                                    | https://app.svix.com/your-instance-url |

================
File: docs/Models/Components/Template.md
================
# Template

Success


## Fields

| Field                                                                                      | Type                                                                                       | Required                                                                                   | Description                                                                                | Example                                                                                    |
| ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ |
| `Id`                                                                                       | *string*                                                                                   | :heavy_minus_sign:                                                                         | N/A                                                                                        | temp_12345                                                                                 |
| `Object`                                                                                   | [TemplateObject](../../Models/Components/TemplateObject.md)                                | :heavy_minus_sign:                                                                         | String representing the object's type. Objects of the same type share the same value.<br/> | template                                                                                   |
| `InstanceId`                                                                               | *string*                                                                                   | :heavy_minus_sign:                                                                         | the id of the instance the template belongs to                                             | inst_67890                                                                                 |
| `ResourceType`                                                                             | *string*                                                                                   | :heavy_minus_sign:                                                                         | whether this is a system (default) or user overridden) template                            | system                                                                                     |
| `TemplateType`                                                                             | *string*                                                                                   | :heavy_minus_sign:                                                                         | whether this is an email or SMS template                                                   | email                                                                                      |
| `Name`                                                                                     | *string*                                                                                   | :heavy_minus_sign:                                                                         | user-friendly name of the template                                                         | Welcome Email                                                                              |
| `Slug`                                                                                     | *string*                                                                                   | :heavy_minus_sign:                                                                         | machine-friendly name of the template                                                      | welcome_email                                                                              |
| `Position`                                                                                 | *long*                                                                                     | :heavy_minus_sign:                                                                         | position with the listing of templates                                                     | 1                                                                                          |
| `CanRevert`                                                                                | *bool*                                                                                     | :heavy_minus_sign:                                                                         | whether this template can be reverted to the corresponding system default                  | false                                                                                      |
| `CanDelete`                                                                                | *bool*                                                                                     | :heavy_minus_sign:                                                                         | whether this template can be deleted                                                       | true                                                                                       |
| `CanToggle`                                                                                | *bool*                                                                                     | :heavy_minus_sign:                                                                         | whether this template can be enabled or disabled, true only for notification SMS templates |                                                                                            |
| `Subject`                                                                                  | *string*                                                                                   | :heavy_minus_sign:                                                                         | email subject                                                                              | Welcome to our service!                                                                    |
| `Markup`                                                                                   | *string*                                                                                   | :heavy_minus_sign:                                                                         | the editor markup used to generate the body of the template                                | <p>Hello, {{ user.name }}</p>                                                              |
| `Body`                                                                                     | *string*                                                                                   | :heavy_minus_sign:                                                                         | the template body before variable interpolation                                            | You are now signed up. Welcome!                                                            |
| `AvailableVariables`                                                                       | List<*string*>                                                                             | :heavy_minus_sign:                                                                         | list of variables that are available for use in the template body                          | [<br/>"user.name",<br/>"user.email"<br/>]                                                  |
| `RequiredVariables`                                                                        | List<*string*>                                                                             | :heavy_minus_sign:                                                                         | list of variables that must be contained in the template body                              | [<br/>"user.name"<br/>]                                                                    |
| `FromEmailName`                                                                            | *string*                                                                                   | :heavy_minus_sign:                                                                         | N/A                                                                                        | Clerk Support                                                                              |
| `ReplyToEmailName`                                                                         | *string*                                                                                   | :heavy_minus_sign:                                                                         | N/A                                                                                        | support@clerk.com                                                                          |
| `DeliveredByClerk`                                                                         | *bool*                                                                                     | :heavy_minus_sign:                                                                         | N/A                                                                                        | true                                                                                       |
| `Enabled`                                                                                  | *bool*                                                                                     | :heavy_minus_sign:                                                                         | N/A                                                                                        |                                                                                            |
| `UpdatedAt`                                                                                | *long*                                                                                     | :heavy_minus_sign:                                                                         | Unix timestamp of last update.<br/>                                                        | 1610000000                                                                                 |
| `CreatedAt`                                                                                | *long*                                                                                     | :heavy_minus_sign:                                                                         | Unix timestamp of creation.<br/>                                                           | 1600000000                                                                                 |

================
File: docs/Models/Components/TemplateObject.md
================
# TemplateObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name       | Value      |
| ---------- | ---------- |
| `Template` | template   |

================
File: docs/Models/Components/TestingToken.md
================
# TestingToken

A Testing Token


## Fields

| Field                                                                                                                                | Type                                                                                                                                 | Required                                                                                                                             | Description                                                                                                                          | Example                                                                                                                              |
| ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ |
| `Object`                                                                                                                             | [TestingTokenObject](../../Models/Components/TestingTokenObject.md)                                                                  | :heavy_check_mark:                                                                                                                   | N/A                                                                                                                                  | testing_token                                                                                                                        |
| `Token`                                                                                                                              | *string*                                                                                                                             | :heavy_check_mark:                                                                                                                   | The actual token. This value is meant to be passed in the `__clerk_testing_token` query parameter with requests to the Frontend API. | 1713877200-c_2J2MvPu9PnXcuhbPZNao0LOXqK9A7YrnBn0HmIWxy                                                                               |
| `ExpiresAt`                                                                                                                          | *long*                                                                                                                               | :heavy_check_mark:                                                                                                                   | Unix timestamp of the token's expiration time.<br/>                                                                                  | 1713880800                                                                                                                           |

================
File: docs/Models/Components/TestingTokenObject.md
================
# TestingTokenObject


## Values

| Name           | Value          |
| -------------- | -------------- |
| `TestingToken` | testing_token  |

================
File: docs/Models/Components/Ticket.md
================
# Ticket


## Fields

| Field                                                                               | Type                                                                                | Required                                                                            | Description                                                                         | Example                                                                             |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `Status`                                                                            | [TicketVerificationStatus](../../Models/Components/TicketVerificationStatus.md)     | :heavy_check_mark:                                                                  | N/A                                                                                 | verified                                                                            |
| `Strategy`                                                                          | [TicketVerificationStrategy](../../Models/Components/TicketVerificationStrategy.md) | :heavy_check_mark:                                                                  | N/A                                                                                 | ticket                                                                              |
| `Attempts`                                                                          | *long*                                                                              | :heavy_check_mark:                                                                  | N/A                                                                                 | <nil>                                                                               |
| `ExpireAt`                                                                          | *long*                                                                              | :heavy_check_mark:                                                                  | N/A                                                                                 | <nil>                                                                               |
| `VerifiedAtClient`                                                                  | *string*                                                                            | :heavy_minus_sign:                                                                  | N/A                                                                                 |                                                                                     |

================
File: docs/Models/Components/TicketVerificationSAMLAccountStatus.md
================
# TicketVerificationSAMLAccountStatus


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |
| `Expired`    | expired      |

================
File: docs/Models/Components/TicketVerificationSAMLAccountStrategy.md
================
# TicketVerificationSAMLAccountStrategy


## Values

| Name     | Value    |
| -------- | -------- |
| `Ticket` | ticket   |

================
File: docs/Models/Components/TicketVerificationStatus.md
================
# TicketVerificationStatus


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |
| `Expired`    | expired      |

================
File: docs/Models/Components/TicketVerificationStrategy.md
================
# TicketVerificationStrategy


## Values

| Name     | Value    |
| -------- | -------- |
| `Ticket` | ticket   |

================
File: docs/Models/Components/TotalCount.md
================
# TotalCount

Success


## Fields

| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |
| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `Object`                                                                               | [TotalCountObject](../../Models/Components/TotalCountObject.md)                        | :heavy_check_mark:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | total_count                                                                            |
| `TotalCount`                                                                           | *long*                                                                                 | :heavy_check_mark:                                                                     | N/A                                                                                    | 100                                                                                    |

================
File: docs/Models/Components/TotalCountObject.md
================
# TotalCountObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name         | Value        |
| ------------ | ------------ |
| `TotalCount` | total_count  |

================
File: docs/Models/Components/User.md
================
# User

Success


## Fields

| Field                                                                                                                                                                                                                                                    | Type                                                                                                                                                                                                                                                     | Required                                                                                                                                                                                                                                                 | Description                                                                                                                                                                                                                                              | Example                                                                                                                                                                                                                                                  |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Id`                                                                                                                                                                                                                                                     | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | user_id_123                                                                                                                                                                                                                                              |
| `Object`                                                                                                                                                                                                                                                 | [UserObject](../../Models/Components/UserObject.md)                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                       | String representing the object's type. Objects of the same type share the same value.<br/>                                                                                                                                                               | user                                                                                                                                                                                                                                                     |
| `ExternalId`                                                                                                                                                                                                                                             | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | external_user_id_123                                                                                                                                                                                                                                     |
| `PrimaryEmailAddressId`                                                                                                                                                                                                                                  | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | email_id_123                                                                                                                                                                                                                                             |
| `PrimaryPhoneNumberId`                                                                                                                                                                                                                                   | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | phone_id_123                                                                                                                                                                                                                                             |
| `PrimaryWeb3WalletId`                                                                                                                                                                                                                                    | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | wallet_id_123                                                                                                                                                                                                                                            |
| `Username`                                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | john_doe                                                                                                                                                                                                                                                 |
| `FirstName`                                                                                                                                                                                                                                              | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | John                                                                                                                                                                                                                                                     |
| `LastName`                                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | Doe                                                                                                                                                                                                                                                      |
| ~~`ProfileImageUrl`~~                                                                                                                                                                                                                                    | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.                                                                                                                                  | https://example.com/profile.jpg                                                                                                                                                                                                                          |
| `ImageUrl`                                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | https://example.com/new-profile.jpg                                                                                                                                                                                                                      |
| `HasImage`                                                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | true                                                                                                                                                                                                                                                     |
| `PublicMetadata`                                                                                                                                                                                                                                         | Dictionary<String, *object*>                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | {<br/>"role": "admin"<br/>}                                                                                                                                                                                                                              |
| `PrivateMetadata`                                                                                                                                                                                                                                        | Dictionary<String, *object*>                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | {<br/>"ssn": "123-45-6789"<br/>}                                                                                                                                                                                                                         |
| `UnsafeMetadata`                                                                                                                                                                                                                                         | Dictionary<String, *object*>                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | {<br/>"theme": "dark"<br/>}                                                                                                                                                                                                                              |
| `EmailAddresses`                                                                                                                                                                                                                                         | List<[EmailAddress](../../Models/Components/EmailAddress.md)>                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | [<br/>{<br/>"id": "email_id_123",<br/>"object": "email_address",<br/>"email_address": "john.doe@example.com",<br/>"verification": {<br/>"status": "verified",<br/>"strategy": "email_code"<br/>},<br/>"created_at": 1609459200,<br/>"updated_at": 1609459200<br/>}<br/>] |
| `PhoneNumbers`                                                                                                                                                                                                                                           | List<[PhoneNumber](../../Models/Components/PhoneNumber.md)>                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | [<br/>{<br/>"id": "phone_id_123",<br/>"object": "phone_number",<br/>"phone_number": "+12345678901",<br/>"verification": {<br/>"status": "verified",<br/>"strategy": "phone_code"<br/>},<br/>"created_at": 1609459200,<br/>"updated_at": 1609459200<br/>}<br/>] |
| `Web3Wallets`                                                                                                                                                                                                                                            | List<[Web3Wallet](../../Models/Components/Web3Wallet.md)>                                                                                                                                                                                                | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | [<br/>{<br/>"id": "wallet_id_123",<br/>"object": "web3_wallet",<br/>"web3_wallet": "0x123456789abcdef",<br/>"verification": {<br/>"status": "verified",<br/>"strategy": "web3_metamask_signature"<br/>},<br/>"created_at": 1609459200,<br/>"updated_at": 1609459200<br/>}<br/>] |
| `Passkeys`                                                                                                                                                                                                                                               | List<[SchemasPasskey](../../Models/Components/SchemasPasskey.md)>                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | [<br/>{<br/>"id": "passkey_id_123",<br/>"object": "passkey",<br/>"name": "My Passkey",<br/>"last_used_at": 1615852800,<br/>"verification": {<br/>"status": "verified",<br/>"strategy": "passkey"<br/>}<br/>}<br/>]                                       |
| `PasswordEnabled`                                                                                                                                                                                                                                        | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | true                                                                                                                                                                                                                                                     |
| `TwoFactorEnabled`                                                                                                                                                                                                                                       | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | true                                                                                                                                                                                                                                                     |
| `TotpEnabled`                                                                                                                                                                                                                                            | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | true                                                                                                                                                                                                                                                     |
| `BackupCodeEnabled`                                                                                                                                                                                                                                      | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | true                                                                                                                                                                                                                                                     |
| `MfaEnabledAt`                                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.<br/>                                                                                                                  | 1615852800                                                                                                                                                                                                                                               |
| `MfaDisabledAt`                                                                                                                                                                                                                                          | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.<br/>                                                                                                            | <nil>                                                                                                                                                                                                                                                    |
| `ExternalAccounts`                                                                                                                                                                                                                                       | List<[ExternalAccounts](../../Models/Components/ExternalAccounts.md)>                                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | [<br/>{<br/>"id": "ext_account_id_123",<br/>"provider": "Facebook",<br/>"user_id": "user_id_at_provider"<br/>}<br/>]                                                                                                                                     |
| `SamlAccounts`                                                                                                                                                                                                                                           | List<[SAMLAccount](../../Models/Components/SAMLAccount.md)>                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | [<br/>{<br/>"id": "saml_account_id_123",<br/>"object": "saml_account",<br/>"provider": "SAML Provider",<br/>"active": true,<br/>"email_address": "user@example.com",<br/>"public_metadata": {<br/>"department": "IT"<br/>},<br/>"verification": {<br/>"status": "verified",<br/>"strategy": "saml"<br/>}<br/>}<br/>] |
| `LastSignInAt`                                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of last sign-in.<br/>                                                                                                                                                                                                                     | 1622852400                                                                                                                                                                                                                                               |
| `Banned`                                                                                                                                                                                                                                                 | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Flag to denote whether user is banned or not.<br/>                                                                                                                                                                                                       | false                                                                                                                                                                                                                                                    |
| `Locked`                                                                                                                                                                                                                                                 | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Flag to denote whether user is currently locked, i.e. restricted from signing in or not.<br/>                                                                                                                                                            | false                                                                                                                                                                                                                                                    |
| `LockoutExpiresInSeconds`                                                                                                                                                                                                                                | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.<br/>                                                                                            | <nil>                                                                                                                                                                                                                                                    |
| `VerificationAttemptsRemaining`                                                                                                                                                                                                                          | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.<br/>                      | 5                                                                                                                                                                                                                                                        |
| `UpdatedAt`                                                                                                                                                                                                                                              | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of last update.<br/>                                                                                                                                                                                                                      | 1622852400                                                                                                                                                                                                                                               |
| `CreatedAt`                                                                                                                                                                                                                                              | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of creation.<br/>                                                                                                                                                                                                                         | 1609459200                                                                                                                                                                                                                                               |
| `DeleteSelfEnabled`                                                                                                                                                                                                                                      | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | If enabled, user can delete themselves via FAPI.<br/>                                                                                                                                                                                                    | true                                                                                                                                                                                                                                                     |
| `CreateOrganizationEnabled`                                                                                                                                                                                                                              | *bool*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | If enabled, user can create organizations via FAPI.<br/>                                                                                                                                                                                                 | true                                                                                                                                                                                                                                                     |
| `CreateOrganizationsLimit`                                                                                                                                                                                                                               | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | The maximum number of organizations the user can create. 0 means unlimited.<br/>                                                                                                                                                                         |                                                                                                                                                                                                                                                          |
| `LastActiveAt`                                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of the latest session activity, with day precision.<br/>                                                                                                                                                                                  | 1700690400000                                                                                                                                                                                                                                            |
| `LegalAcceptedAt`                                                                                                                                                                                                                                        | *long*                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                       | Unix timestamp of when the user accepted the legal requirements.<br/>                                                                                                                                                                                    | 1700690400000                                                                                                                                                                                                                                            |

================
File: docs/Models/Components/UserObject.md
================
# UserObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name   | Value  |
| ------ | ------ |
| `User` | user   |

================
File: docs/Models/Components/Verification.md
================
# Verification


## Supported Types

### Otp

```csharp
Verification.CreateOtp(/* values here */);
```

### Admin

```csharp
Verification.CreateAdmin(/* values here */);
```

### FromOAuth

```csharp
Verification.CreateFromOAuth(/* values here */);
```

### Ticket

```csharp
Verification.CreateTicket(/* values here */);
```

================
File: docs/Models/Components/VerificationAdmin.md
================
# VerificationAdmin


## Fields

| Field                                                                                               | Type                                                                                                | Required                                                                                            | Description                                                                                         | Example                                                                                             |
| --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |
| `Status`                                                                                            | [AdminVerificationPhoneNumberStatus](../../Models/Components/AdminVerificationPhoneNumberStatus.md) | :heavy_check_mark:                                                                                  | N/A                                                                                                 | verified                                                                                            |
| `Strategy`                                                                                          | [AdminVerificationStrategy](../../Models/Components/AdminVerificationStrategy.md)                   | :heavy_check_mark:                                                                                  | N/A                                                                                                 | admin                                                                                               |
| `Attempts`                                                                                          | *long*                                                                                              | :heavy_check_mark:                                                                                  | N/A                                                                                                 | 0                                                                                                   |
| `ExpireAt`                                                                                          | *long*                                                                                              | :heavy_check_mark:                                                                                  | N/A                                                                                                 | 1620000000                                                                                          |
| `VerifiedAtClient`                                                                                  | *string*                                                                                            | :heavy_minus_sign:                                                                                  | N/A                                                                                                 |                                                                                                     |

================
File: docs/Models/Components/VerificationError.md
================
# VerificationError


## Supported Types

### SAMLErrorClerkError

```csharp
VerificationError.CreateSAMLErrorClerkError(/* values here */);
```

================
File: docs/Models/Components/VerificationOTP.md
================
# VerificationOTP


## Fields

| Field                                                                         | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `Status`                                                                      | [OTPVerificationStatus](../../Models/Components/OTPVerificationStatus.md)     | :heavy_check_mark:                                                            | N/A                                                                           | verified                                                                      |
| `Strategy`                                                                    | [OTPVerificationStrategy](../../Models/Components/OTPVerificationStrategy.md) | :heavy_check_mark:                                                            | N/A                                                                           | email_code                                                                    |
| `Attempts`                                                                    | *long*                                                                        | :heavy_check_mark:                                                            | N/A                                                                           | 1                                                                             |
| `ExpireAt`                                                                    | *long*                                                                        | :heavy_check_mark:                                                            | N/A                                                                           | 1615462399                                                                    |
| `VerifiedAtClient`                                                            | *string*                                                                      | :heavy_minus_sign:                                                            | N/A                                                                           |                                                                               |

================
File: docs/Models/Components/VerificationStatus.md
================
# VerificationStatus


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |
| `Failed`     | failed       |
| `Expired`    | expired      |

================
File: docs/Models/Components/VerificationStrategy.md
================
# VerificationStrategy


## Values

| Name    | Value   |
| ------- | ------- |
| `Admin` | admin   |

================
File: docs/Models/Components/VerificationTicket.md
================
# VerificationTicket


## Fields

| Field                                                                                                     | Type                                                                                                      | Required                                                                                                  | Description                                                                                               | Example                                                                                                   |
| --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- |
| `Status`                                                                                                  | [TicketVerificationSAMLAccountStatus](../../Models/Components/TicketVerificationSAMLAccountStatus.md)     | :heavy_check_mark:                                                                                        | N/A                                                                                                       | verified                                                                                                  |
| `Strategy`                                                                                                | [TicketVerificationSAMLAccountStrategy](../../Models/Components/TicketVerificationSAMLAccountStrategy.md) | :heavy_check_mark:                                                                                        | N/A                                                                                                       | ticket                                                                                                    |
| `Attempts`                                                                                                | *long*                                                                                                    | :heavy_check_mark:                                                                                        | N/A                                                                                                       | <nil>                                                                                                     |
| `ExpireAt`                                                                                                | *long*                                                                                                    | :heavy_check_mark:                                                                                        | N/A                                                                                                       | <nil>                                                                                                     |
| `VerifiedAtClient`                                                                                        | *string*                                                                                                  | :heavy_minus_sign:                                                                                        | N/A                                                                                                       |                                                                                                           |

================
File: docs/Models/Components/WaitlistEntries.md
================
# WaitlistEntries

List of waitlist entries


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `Data`                                                          | List<[WaitlistEntry](../../Models/Components/WaitlistEntry.md)> | :heavy_check_mark:                                              | N/A                                                             |
| `TotalCount`                                                    | *long*                                                          | :heavy_check_mark:                                              | Total number of waitlist entries                                |

================
File: docs/Models/Components/WaitlistEntry.md
================
# WaitlistEntry


## Fields

| Field                                                                                                                                   | Type                                                                                                                                    | Required                                                                                                                                | Description                                                                                                                             | Example                                                                                                                                 |
| --------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                                | [WaitlistEntryObject](../../Models/Components/WaitlistEntryObject.md)                                                                   | :heavy_check_mark:                                                                                                                      | N/A                                                                                                                                     |                                                                                                                                         |
| `Id`                                                                                                                                    | *string*                                                                                                                                | :heavy_check_mark:                                                                                                                      | N/A                                                                                                                                     |                                                                                                                                         |
| `EmailAddress`                                                                                                                          | *string*                                                                                                                                | :heavy_check_mark:                                                                                                                      | N/A                                                                                                                                     |                                                                                                                                         |
| `Status`                                                                                                                                | [WaitlistEntryStatus](../../Models/Components/WaitlistEntryStatus.md)                                                                   | :heavy_check_mark:                                                                                                                      | N/A                                                                                                                                     | pending                                                                                                                                 |
| `IsLocked`                                                                                                                              | *bool*                                                                                                                                  | :heavy_minus_sign:                                                                                                                      | Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.<br/> |                                                                                                                                         |
| `CreatedAt`                                                                                                                             | *long*                                                                                                                                  | :heavy_check_mark:                                                                                                                      | Unix timestamp of creation.<br/>                                                                                                        |                                                                                                                                         |
| `UpdatedAt`                                                                                                                             | *long*                                                                                                                                  | :heavy_check_mark:                                                                                                                      | Unix timestamp of last update.<br/>                                                                                                     |                                                                                                                                         |
| `Invitation`                                                                                                                            | [WaitlistEntryInvitation](../../Models/Components/WaitlistEntryInvitation.md)                                                           | :heavy_minus_sign:                                                                                                                      | N/A                                                                                                                                     |                                                                                                                                         |

================
File: docs/Models/Components/WaitlistEntryInvitation.md
================
# WaitlistEntryInvitation


## Fields

| Field                                                                                     | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `Object`                                                                                  | [WaitlistEntryInvitationObject](../../Models/Components/WaitlistEntryInvitationObject.md) | :heavy_check_mark:                                                                        | N/A                                                                                       | invitation                                                                                |
| `Id`                                                                                      | *string*                                                                                  | :heavy_check_mark:                                                                        | N/A                                                                                       | inv_f02930r3                                                                              |
| `EmailAddress`                                                                            | *string*                                                                                  | :heavy_check_mark:                                                                        | N/A                                                                                       | invitee@example.com                                                                       |
| `PublicMetadata`                                                                          | Dictionary<String, *object*>                                                              | :heavy_check_mark:                                                                        | N/A                                                                                       | {}                                                                                        |
| `Revoked`                                                                                 | *bool*                                                                                    | :heavy_minus_sign:                                                                        | N/A                                                                                       | false                                                                                     |
| `Status`                                                                                  | [WaitlistEntryInvitationStatus](../../Models/Components/WaitlistEntryInvitationStatus.md) | :heavy_check_mark:                                                                        | N/A                                                                                       | pending                                                                                   |
| `Url`                                                                                     | *string*                                                                                  | :heavy_minus_sign:                                                                        | N/A                                                                                       | https://example.com/invitations/accept?code=abcd1234                                      |
| `ExpiresAt`                                                                               | *long*                                                                                    | :heavy_minus_sign:                                                                        | Unix timestamp of expiration.<br/>                                                        |                                                                                           |
| `CreatedAt`                                                                               | *long*                                                                                    | :heavy_check_mark:                                                                        | Unix timestamp of creation.<br/>                                                          | 1622549600                                                                                |
| `UpdatedAt`                                                                               | *long*                                                                                    | :heavy_check_mark:                                                                        | Unix timestamp of last update.<br/>                                                       | 1622553200                                                                                |

================
File: docs/Models/Components/WaitlistEntryInvitationObject.md
================
# WaitlistEntryInvitationObject


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Invitation` | invitation   |

================
File: docs/Models/Components/WaitlistEntryInvitationStatus.md
================
# WaitlistEntryInvitationStatus


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |
| `Expired`  | expired    |

================
File: docs/Models/Components/WaitlistEntryObject.md
================
# WaitlistEntryObject


## Values

| Name            | Value           |
| --------------- | --------------- |
| `WaitlistEntry` | waitlist_entry  |

================
File: docs/Models/Components/WaitlistEntryStatus.md
================
# WaitlistEntryStatus


## Values

| Name        | Value       |
| ----------- | ----------- |
| `Pending`   | pending     |
| `Invited`   | invited     |
| `Rejected`  | rejected    |
| `Completed` | completed   |

================
File: docs/Models/Components/Web3Signature.md
================
# Web3Signature


## Fields

| Field                                                                                             | Type                                                                                              | Required                                                                                          | Description                                                                                       | Example                                                                                           |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `Status`                                                                                          | [Web3SignatureVerificationStatus](../../Models/Components/Web3SignatureVerificationStatus.md)     | :heavy_check_mark:                                                                                | N/A                                                                                               | verified                                                                                          |
| `Strategy`                                                                                        | [Web3SignatureVerificationStrategy](../../Models/Components/Web3SignatureVerificationStrategy.md) | :heavy_check_mark:                                                                                | N/A                                                                                               | web3_metamask_signature                                                                           |
| `Nonce`                                                                                           | *string*                                                                                          | :heavy_minus_sign:                                                                                | N/A                                                                                               | nonce_value                                                                                       |
| `Message`                                                                                         | *string*                                                                                          | :heavy_minus_sign:                                                                                | N/A                                                                                               |                                                                                                   |
| `Attempts`                                                                                        | *long*                                                                                            | :heavy_check_mark:                                                                                | N/A                                                                                               | <nil>                                                                                             |
| `ExpireAt`                                                                                        | *long*                                                                                            | :heavy_check_mark:                                                                                | N/A                                                                                               | <nil>                                                                                             |
| `VerifiedAtClient`                                                                                | *string*                                                                                          | :heavy_minus_sign:                                                                                | N/A                                                                                               |                                                                                                   |

================
File: docs/Models/Components/Web3SignatureVerificationStatus.md
================
# Web3SignatureVerificationStatus


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Unverified` | unverified   |
| `Verified`   | verified     |
| `Failed`     | failed       |
| `Expired`    | expired      |

================
File: docs/Models/Components/Web3SignatureVerificationStrategy.md
================
# Web3SignatureVerificationStrategy


## Values

| Name                           | Value                          |
| ------------------------------ | ------------------------------ |
| `Web3MetamaskSignature`        | web3_metamask_signature        |
| `Web3CoinbaseWalletSignature`  | web3_coinbase_wallet_signature |
| `Web3OkxWalletSignature`       | web3_okx_wallet_signature      |

================
File: docs/Models/Components/Web3Wallet.md
================
# Web3Wallet


## Fields

| Field                                                                                   | Type                                                                                    | Required                                                                                | Description                                                                             | Example                                                                                 |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `Id`                                                                                    | *string*                                                                                | :heavy_minus_sign:                                                                      | N/A                                                                                     | wallet_id_123                                                                           |
| `Object`                                                                                | [Web3WalletObject](../../Models/Components/Web3WalletObject.md)                         | :heavy_check_mark:                                                                      | String representing the object's type. Objects of the same type share the same value.<br/> | web3_wallet                                                                             |
| `Web3Wallet`                                                                            | *string*                                                                                | :heavy_check_mark:                                                                      | N/A                                                                                     | 0x123456789abcdef                                                                       |
| `Verification`                                                                          | [Web3WalletVerification](../../Models/Components/Web3WalletVerification.md)             | :heavy_check_mark:                                                                      | N/A                                                                                     | {<br/>"status": "verified",<br/>"strategy": "web3_metamask_signature",<br/>"nonce": "nonce_value"<br/>} |
| `CreatedAt`                                                                             | *long*                                                                                  | :heavy_check_mark:                                                                      | Unix timestamp of creation<br/>                                                         | 1609459200                                                                              |
| `UpdatedAt`                                                                             | *long*                                                                                  | :heavy_check_mark:                                                                      | Unix timestamp of creation<br/>                                                         | 1609459200                                                                              |

================
File: docs/Models/Components/Web3WalletObject.md
================
# Web3WalletObject

String representing the object's type. Objects of the same type share the same value.



## Values

| Name         | Value        |
| ------------ | ------------ |
| `Web3Wallet` | web3_wallet  |

================
File: docs/Models/Components/Web3WalletVerification.md
================
# Web3WalletVerification


## Supported Types

### Web3Signature

```csharp
Web3WalletVerification.CreateWeb3Signature(/* values here */);
```

### Web3WalletVerificationAdmin

```csharp
Web3WalletVerification.CreateWeb3WalletVerificationAdmin(/* values here */);
```

================
File: docs/Models/Components/Web3WalletVerificationAdmin.md
================
# Web3WalletVerificationAdmin


## Fields

| Field                                                                                                 | Type                                                                                                  | Required                                                                                              | Description                                                                                           | Example                                                                                               |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `Status`                                                                                              | [AdminVerificationWeb3WalletStatus](../../Models/Components/AdminVerificationWeb3WalletStatus.md)     | :heavy_check_mark:                                                                                    | N/A                                                                                                   | verified                                                                                              |
| `Strategy`                                                                                            | [AdminVerificationWeb3WalletStrategy](../../Models/Components/AdminVerificationWeb3WalletStrategy.md) | :heavy_check_mark:                                                                                    | N/A                                                                                                   | admin                                                                                                 |
| `Attempts`                                                                                            | *long*                                                                                                | :heavy_check_mark:                                                                                    | N/A                                                                                                   | 0                                                                                                     |
| `ExpireAt`                                                                                            | *long*                                                                                                | :heavy_check_mark:                                                                                    | N/A                                                                                                   | 1620000000                                                                                            |
| `VerifiedAtClient`                                                                                    | *string*                                                                                              | :heavy_minus_sign:                                                                                    | N/A                                                                                                   |                                                                                                       |

================
File: docs/Models/Errors/ClerkErrors.md
================
# ClerkErrors

Request was not successful


## Fields

| Field                                                                                                                                                                        | Type                                                                                                                                                                         | Required                                                                                                                                                                     | Description                                                                                                                                                                  | Example                                                                                                                                                                      |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Errors`                                                                                                                                                                     | List<[ClerkError](../../Models/Components/ClerkError.md)>                                                                                                                    | :heavy_check_mark:                                                                                                                                                           | N/A                                                                                                                                                                          | [<br/>{<br/>"message": "Invalid input",<br/>"long_message": "The input provided does not meet the requirements.",<br/>"code": "400_bad_request",<br/>"clerk_trace_id": "trace_123456789abcd"<br/>}<br/>] |
| `Meta`                                                                                                                                                                       | [Models.Errors.Meta](../../Models/Errors/Meta.md)                                                                                                                            | :heavy_minus_sign:                                                                                                                                                           | N/A                                                                                                                                                                          | {}                                                                                                                                                                           |

================
File: docs/Models/Errors/Meta.md
================
# Meta


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Operations/Actor.md
================
# Actor

The actor payload. It needs to include a sub property which should contain the ID of the actor.
This whole payload will be also included in the JWT session token.


## Fields

| Field                                         | Type                                          | Required                                      | Description                                   | Example                                       |
| --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- |
| `Sub`                                         | *string*                                      | :heavy_check_mark:                            | The ID of the actor.                          |                                               |
| `AdditionalProperties`                        | Dictionary<String, *object*>                  | :heavy_minus_sign:                            | N/A                                           | {<br/>"sub": "user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb"<br/>} |

================
File: docs/Models/Operations/AddDomainRequestBody.md
================
# AddDomainRequestBody


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                                    | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The new domain name. Can contain the port for development instances.                                                                      | example.com                                                                                                                               |
| `IsSatellite`                                                                                                                             | *bool*                                                                                                                                    | :heavy_check_mark:                                                                                                                        | Marks the new domain as satellite. Only `true` is accepted at the moment.                                                                 | true                                                                                                                                      |
| `ProxyUrl`                                                                                                                                | *string*                                                                                                                                  | :heavy_minus_sign:                                                                                                                        | The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances. | https://proxy.example.com                                                                                                                 |

================
File: docs/Models/Operations/AddDomainResponse.md
================
# AddDomainResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Domain`                                                | [Domain](../../Models/Components/Domain.md)             | :heavy_minus_sign:                                      | A domain                                                |

================
File: docs/Models/Operations/AttributeMapping.md
================
# AttributeMapping

Define the attribute name mapping between Identity Provider and Clerk's user properties


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `UserId`           | *string*           | :heavy_minus_sign: | N/A                | nameid             |
| `EmailAddress`     | *string*           | :heavy_minus_sign: | N/A                | mail               |
| `FirstName`        | *string*           | :heavy_minus_sign: | N/A                | givenName          |
| `LastName`         | *string*           | :heavy_minus_sign: | N/A                | surname            |

================
File: docs/Models/Operations/BanUserRequest.md
================
# BanUserRequest


## Fields

| Field                     | Type                      | Required                  | Description               | Example                   |
| ------------------------- | ------------------------- | ------------------------- | ------------------------- | ------------------------- |
| `UserId`                  | *string*                  | :heavy_check_mark:        | The ID of the user to ban | user_12345                |

================
File: docs/Models/Operations/BanUserResponse.md
================
# BanUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/ChangeProductionInstanceDomainRequestBody.md
================
# ChangeProductionInstanceDomainRequestBody


## Fields

| Field                                                                                                                                                                                                                                                           | Type                                                                                                                                                                                                                                                            | Required                                                                                                                                                                                                                                                        | Description                                                                                                                                                                                                                                                     | Example                                                                                                                                                                                                                                                         |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `HomeUrl`                                                                                                                                                                                                                                                       | *string*                                                                                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                                                                                              | The new home URL of the production instance e.g. https://www.example.com                                                                                                                                                                                        | https://www.newdomain.com                                                                                                                                                                                                                                       |
| `IsSecondary`                                                                                                                                                                                                                                                   | *bool*                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                              | Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and<br/>will be stored as part of the domain. This is useful for supporting multiple apps (one primary and<br/>multiple secondaries) on the same root domain (eTLD+1). |                                                                                                                                                                                                                                                                 |

================
File: docs/Models/Operations/ChangeProductionInstanceDomainResponse.md
================
# ChangeProductionInstanceDomainResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |

================
File: docs/Models/Operations/Claims.md
================
# Claims

JWT template claims in JSON format


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Operations/CodeType.md
================
# CodeType


## Values

| Name         | Value        |
| ------------ | ------------ |
| `Totp`       | totp         |
| `BackupCode` | backup_code  |

================
File: docs/Models/Operations/CreateActorTokenRequestBody.md
================
# CreateActorTokenRequestBody


## Fields

| Field                                                                                                                                                                                     | Type                                                                                                                                                                                      | Required                                                                                                                                                                                  | Description                                                                                                                                                                               | Example                                                                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                                                                  | *string*                                                                                                                                                                                  | :heavy_check_mark:                                                                                                                                                                        | The ID of the user being impersonated.                                                                                                                                                    | user_1a2b3c                                                                                                                                                                               |
| `Actor`                                                                                                                                                                                   | [Models.Operations.Actor](../../Models/Operations/Actor.md)                                                                                                                               | :heavy_check_mark:                                                                                                                                                                        | The actor payload. It needs to include a sub property which should contain the ID of the actor.<br/>This whole payload will be also included in the JWT session token.                    | {<br/>"sub": "user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb"<br/>}                                                                                                                                     |
| `ExpiresInSeconds`                                                                                                                                                                        | *long*                                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                        | Optional parameter to specify the life duration of the actor token in seconds.<br/>By default, the duration is 1 hour.                                                                    | 3600                                                                                                                                                                                      |
| `SessionMaxDurationInSeconds`                                                                                                                                                             | *long*                                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                        | The maximum duration that the session which will be created by the generated actor token should last.<br/>By default, the duration of a session created via an actor token, lasts 30 minutes. | 1800                                                                                                                                                                                      |

================
File: docs/Models/Operations/CreateActorTokenResponse.md
================
# CreateActorTokenResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `ActorToken`                                            | [ActorToken](../../Models/Components/ActorToken.md)     | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateAllowlistIdentifierRequestBody.md
================
# CreateAllowlistIdentifierRequestBody


## Fields

| Field                                                                                                                                                                        | Type                                                                                                                                                                         | Required                                                                                                                                                                     | Description                                                                                                                                                                  | Example                                                                                                                                                                      |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Identifier`                                                                                                                                                                 | *string*                                                                                                                                                                     | :heavy_check_mark:                                                                                                                                                           | The identifier to be added in the allow-list.<br/>This can be an email address, a phone number or a web3 wallet.                                                             | user@example.com                                                                                                                                                             |
| `Notify`                                                                                                                                                                     | *bool*                                                                                                                                                                       | :heavy_minus_sign:                                                                                                                                                           | This flag denotes whether the given identifier will receive an invitation to join the application.<br/>Note that this only works for email address and phone number identifiers. | true                                                                                                                                                                         |

================
File: docs/Models/Operations/CreateAllowlistIdentifierResponse.md
================
# CreateAllowlistIdentifierResponse


## Fields

| Field                                                                 | Type                                                                  | Required                                                              | Description                                                           |
| --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- |
| `HttpMeta`                                                            | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)               | :heavy_check_mark:                                                    | N/A                                                                   |
| `AllowlistIdentifier`                                                 | [AllowlistIdentifier](../../Models/Components/AllowlistIdentifier.md) | :heavy_minus_sign:                                                    | Success                                                               |

================
File: docs/Models/Operations/CreateBlocklistIdentifierRequestBody.md
================
# CreateBlocklistIdentifierRequestBody


## Fields

| Field                                                                                                        | Type                                                                                                         | Required                                                                                                     | Description                                                                                                  | Example                                                                                                      |
| ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |
| `Identifier`                                                                                                 | *string*                                                                                                     | :heavy_check_mark:                                                                                           | The identifier to be added in the block-list.<br/>This can be an email address, a phone number or a web3 wallet. | example@example.com                                                                                          |

================
File: docs/Models/Operations/CreateBlocklistIdentifierResponse.md
================
# CreateBlocklistIdentifierResponse


## Fields

| Field                                                                 | Type                                                                  | Required                                                              | Description                                                           |
| --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- |
| `HttpMeta`                                                            | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)               | :heavy_check_mark:                                                    | N/A                                                                   |
| `BlocklistIdentifier`                                                 | [BlocklistIdentifier](../../Models/Components/BlocklistIdentifier.md) | :heavy_minus_sign:                                                    | Success                                                               |

================
File: docs/Models/Operations/CreateBulkInvitationsResponse.md
================
# CreateBulkInvitationsResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `InvitationList`                                          | List<[Invitation](../../Models/Components/Invitation.md)> | :heavy_minus_sign:                                        | List of invitations                                       |

================
File: docs/Models/Operations/CreateBulkInvitationsTemplateSlug.md
================
# CreateBulkInvitationsTemplateSlug

The slug of the email template to use for the invitation email.


## Values

| Name                 | Value                |
| -------------------- | -------------------- |
| `Invitation`         | invitation           |
| `WaitlistInvitation` | waitlist_invitation  |

================
File: docs/Models/Operations/CreateEmailAddressRequestBody.md
================
# CreateEmailAddressRequestBody


## Fields

| Field                                                                                                                      | Type                                                                                                                       | Required                                                                                                                   | Description                                                                                                                | Example                                                                                                                    |
| -------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                   | *string*                                                                                                                   | :heavy_check_mark:                                                                                                         | The ID representing the user                                                                                               | user_12345                                                                                                                 |
| `EmailAddress`                                                                                                             | *string*                                                                                                                   | :heavy_check_mark:                                                                                                         | The new email address. Must adhere to the RFC 5322 specification for email address format.                                 | example@clerk.com                                                                                                          |
| `Verified`                                                                                                                 | *bool*                                                                                                                     | :heavy_minus_sign:                                                                                                         | When created, the email address will be marked as verified.                                                                | false                                                                                                                      |
| `Primary`                                                                                                                  | *bool*                                                                                                                     | :heavy_minus_sign:                                                                                                         | Create this email address as the primary email address for the user.<br/>Default: false, unless it is the first email address. | true                                                                                                                       |

================
File: docs/Models/Operations/CreateEmailAddressResponse.md
================
# CreateEmailAddressResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `EmailAddress`                                          | [EmailAddress](../../Models/Components/EmailAddress.md) | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateInvitationRequestBody.md
================
# CreateInvitationRequestBody

Required parameters


## Fields

| Field                                                                                                                                                                                                                                                                                  | Type                                                                                                                                                                                                                                                                                   | Required                                                                                                                                                                                                                                                                               | Description                                                                                                                                                                                                                                                                            | Example                                                                                                                                                                                                                                                                                |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `EmailAddress`                                                                                                                                                                                                                                                                         | *string*                                                                                                                                                                                                                                                                               | :heavy_check_mark:                                                                                                                                                                                                                                                                     | The email address the invitation will be sent to                                                                                                                                                                                                                                       | user@example.com                                                                                                                                                                                                                                                                       |
| `PublicMetadata`                                                                                                                                                                                                                                                                       | Dictionary<String, *object*>                                                                                                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | Metadata that will be attached to the newly created invitation.<br/>The value of this property should be a well-formed JSON object.<br/>Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.                                   | {}                                                                                                                                                                                                                                                                                     |
| `RedirectUrl`                                                                                                                                                                                                                                                                          | *string*                                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | Optional URL which specifies where to redirect the user once they click the invitation link.<br/>This is only required if you have implemented a [custom flow](https://clerk.com/docs/authentication/invitations#custom-flow) and you're not using Clerk Hosted Pages or Clerk Components. | https://example.com/welcome                                                                                                                                                                                                                                                            |
| `Notify`                                                                                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | Optional flag which denotes whether an email invitation should be sent to the given email address.<br/>Defaults to `true`.                                                                                                                                                             | true                                                                                                                                                                                                                                                                                   |
| `IgnoreExisting`                                                                                                                                                                                                                                                                       | *bool*                                                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.                                                                                                                                            | ​false                                                                                                                                                                                                                                                                                 |
| `ExpiresInDays`                                                                                                                                                                                                                                                                        | *long*                                                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | The number of days the invitation will be valid for. By default, the invitation expires after 30 days.                                                                                                                                                                                 |                                                                                                                                                                                                                                                                                        |
| `TemplateSlug`                                                                                                                                                                                                                                                                         | [TemplateSlug](../../Models/Operations/TemplateSlug.md)                                                                                                                                                                                                                                | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | The slug of the email template to use for the invitation email.                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                        |

================
File: docs/Models/Operations/CreateInvitationResponse.md
================
# CreateInvitationResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Invitation`                                            | [Invitation](../../Models/Components/Invitation.md)     | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateJWTTemplateRequestBody.md
================
# CreateJWTTemplateRequestBody


## Fields

| Field                                                                                                | Type                                                                                                 | Required                                                                                             | Description                                                                                          | Example                                                                                              |
| ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- |
| `Name`                                                                                               | *string*                                                                                             | :heavy_check_mark:                                                                                   | JWT template name                                                                                    | Example Template                                                                                     |
| `Claims`                                                                                             | [Models.Operations.Claims](../../Models/Operations/Claims.md)                                        | :heavy_check_mark:                                                                                   | JWT template claims in JSON format                                                                   | {}                                                                                                   |
| `Lifetime`                                                                                           | *double*                                                                                             | :heavy_minus_sign:                                                                                   | JWT token lifetime                                                                                   | 3600                                                                                                 |
| `AllowedClockSkew`                                                                                   | *double*                                                                                             | :heavy_minus_sign:                                                                                   | JWT token allowed clock skew                                                                         | 5                                                                                                    |
| `CustomSigningKey`                                                                                   | *bool*                                                                                               | :heavy_minus_sign:                                                                                   | Whether a custom signing key/algorithm is also provided for this template                            | false                                                                                                |
| `SigningAlgorithm`                                                                                   | *string*                                                                                             | :heavy_minus_sign:                                                                                   | The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.   | RS256                                                                                                |
| `SigningKey`                                                                                         | *string*                                                                                             | :heavy_minus_sign:                                                                                   | The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`. | PRIVATE_KEY_PLACEHOLDER                                                                              |

================
File: docs/Models/Operations/CreateJWTTemplateResponse.md
================
# CreateJWTTemplateResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `JWTTemplate`                                           | [JWTTemplate](../../Models/Components/JWTTemplate.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateOAuthApplicationRequestBody.md
================
# CreateOAuthApplicationRequestBody


## Fields

| Field                                                                                                                                                                                                                                                                  | Type                                                                                                                                                                                                                                                                   | Required                                                                                                                                                                                                                                                               | Description                                                                                                                                                                                                                                                            | Example                                                                                                                                                                                                                                                                |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                                                                                                                                                                 | *string*                                                                                                                                                                                                                                                               | :heavy_check_mark:                                                                                                                                                                                                                                                     | The name of the new OAuth application.<br/>Max length: 256                                                                                                                                                                                                             | Example App                                                                                                                                                                                                                                                            |
| `RedirectUris`                                                                                                                                                                                                                                                         | List<*string*>                                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                                     | An array of redirect URIs of the new OAuth application                                                                                                                                                                                                                 |                                                                                                                                                                                                                                                                        |
| ~~`CallbackUrl`~~                                                                                                                                                                                                                                                      | *string*                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                     | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>The callback URL of the new OAuth application                                                                                         | https://example.com/oauth/callback                                                                                                                                                                                                                                     |
| `Scopes`                                                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                     | Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces. | profile email public_metadata                                                                                                                                                                                                                                          |
| `Public`                                                                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                                     | If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.                                                                                                                                                                             | true                                                                                                                                                                                                                                                                   |

================
File: docs/Models/Operations/CreateOAuthApplicationResponse.md
================
# CreateOAuthApplicationResponse


## Fields

| Field                                                                               | Type                                                                                | Required                                                                            | Description                                                                         |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `HttpMeta`                                                                          | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                             | :heavy_check_mark:                                                                  | N/A                                                                                 |
| `OAuthApplicationWithSecret`                                                        | [OAuthApplicationWithSecret](../../Models/Components/OAuthApplicationWithSecret.md) | :heavy_minus_sign:                                                                  | An OAuth application with client secret                                             |

================
File: docs/Models/Operations/CreateOrganizationDomainRequest.md
================
# CreateOrganizationDomainRequest


## Fields

| Field                                                                                                 | Type                                                                                                  | Required                                                                                              | Description                                                                                           |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                      | *string*                                                                                              | :heavy_check_mark:                                                                                    | The ID of the organization where the new domain will be created.                                      |
| `RequestBody`                                                                                         | [CreateOrganizationDomainRequestBody](../../Models/Operations/CreateOrganizationDomainRequestBody.md) | :heavy_check_mark:                                                                                    | N/A                                                                                                   |

================
File: docs/Models/Operations/CreateOrganizationDomainRequestBody.md
================
# CreateOrganizationDomainRequestBody


## Fields

| Field                                                                                                                     | Type                                                                                                                      | Required                                                                                                                  | Description                                                                                                               |
| ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                    | *string*                                                                                                                  | :heavy_minus_sign:                                                                                                        | The name of the new domain                                                                                                |
| `EnrollmentMode`                                                                                                          | *string*                                                                                                                  | :heavy_minus_sign:                                                                                                        | The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation` |
| `Verified`                                                                                                                | *bool*                                                                                                                    | :heavy_minus_sign:                                                                                                        | The status of domain's verification. Defaults to true                                                                     |

================
File: docs/Models/Operations/CreateOrganizationDomainResponse.md
================
# CreateOrganizationDomainResponse


## Fields

| Field                                                               | Type                                                                | Required                                                            | Description                                                         |
| ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `HttpMeta`                                                          | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)             | :heavy_check_mark:                                                  | N/A                                                                 |
| `OrganizationDomain`                                                | [OrganizationDomain](../../Models/Components/OrganizationDomain.md) | :heavy_minus_sign:                                                  | An organization domain                                              |

================
File: docs/Models/Operations/CreateOrganizationInvitationBulkRequest.md
================
# CreateOrganizationInvitationBulkRequest


## Fields

| Field                                                                                                                       | Type                                                                                                                        | Required                                                                                                                    | Description                                                                                                                 | Example                                                                                                                     |
| --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                            | *string*                                                                                                                    | :heavy_check_mark:                                                                                                          | The organization ID.                                                                                                        | org_12345                                                                                                                   |
| `RequestBody`                                                                                                               | List<[CreateOrganizationInvitationBulkRequestBody](../../Models/Operations/CreateOrganizationInvitationBulkRequestBody.md)> | :heavy_check_mark:                                                                                                          | N/A                                                                                                                         |                                                                                                                             |

================
File: docs/Models/Operations/CreateOrganizationInvitationBulkRequestBody.md
================
# CreateOrganizationInvitationBulkRequestBody


## Fields

| Field                                                                                                                                                                                                                                                                 | Type                                                                                                                                                                                                                                                                  | Required                                                                                                                                                                                                                                                              | Description                                                                                                                                                                                                                                                           | Example                                                                                                                                                                                                                                                               |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `EmailAddress`                                                                                                                                                                                                                                                        | *string*                                                                                                                                                                                                                                                              | :heavy_check_mark:                                                                                                                                                                                                                                                    | The email address of the new member that is going to be invited to the organization                                                                                                                                                                                   | newmember@example.com                                                                                                                                                                                                                                                 |
| `InviterUserId`                                                                                                                                                                                                                                                       | *string*                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                    | The ID of the user that invites the new member to the organization.<br/>Must be an administrator in the organization.                                                                                                                                                 | user_67890                                                                                                                                                                                                                                                            |
| `Role`                                                                                                                                                                                                                                                                | *string*                                                                                                                                                                                                                                                              | :heavy_check_mark:                                                                                                                                                                                                                                                    | The role of the new member in the organization                                                                                                                                                                                                                        | admin                                                                                                                                                                                                                                                                 |
| `PublicMetadata`                                                                                                                                                                                                                                                      | Dictionary<String, *object*>                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.<br/>When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership. | {}                                                                                                                                                                                                                                                                    |
| `PrivateMetadata`                                                                                                                                                                                                                                                     | Dictionary<String, *object*>                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.<br/>When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership. | {}                                                                                                                                                                                                                                                                    |
| `RedirectUrl`                                                                                                                                                                                                                                                         | *string*                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.                                                                                                                                | https://example.com/welcome                                                                                                                                                                                                                                           |
| `ExpiresInDays`                                                                                                                                                                                                                                                       | *long*                                                                                                                                                                                                                                                                | :heavy_minus_sign:                                                                                                                                                                                                                                                    | The number of days the invitation will be valid for. By default, the invitation has a 30 days expire.                                                                                                                                                                 |                                                                                                                                                                                                                                                                       |

================
File: docs/Models/Operations/CreateOrganizationInvitationBulkResponse.md
================
# CreateOrganizationInvitationBulkResponse


## Fields

| Field                                                                                           | Type                                                                                            | Required                                                                                        | Description                                                                                     |
| ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                         | :heavy_check_mark:                                                                              | N/A                                                                                             |
| `OrganizationInvitations`                                                                       | [Models.Components.OrganizationInvitations](../../Models/Components/OrganizationInvitations.md) | :heavy_minus_sign:                                                                              | A list of organization invitations                                                              |

================
File: docs/Models/Operations/CreateOrganizationInvitationRequest.md
================
# CreateOrganizationInvitationRequest


## Fields

| Field                                                                                                         | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the organization for which to send the invitation                                                   | org_12345                                                                                                     |
| `RequestBody`                                                                                                 | [CreateOrganizationInvitationRequestBody](../../Models/Operations/CreateOrganizationInvitationRequestBody.md) | :heavy_minus_sign:                                                                                            | N/A                                                                                                           |                                                                                                               |

================
File: docs/Models/Operations/CreateOrganizationInvitationRequestBody.md
================
# CreateOrganizationInvitationRequestBody


## Fields

| Field                                                                                                                                                                                                                                                                 | Type                                                                                                                                                                                                                                                                  | Required                                                                                                                                                                                                                                                              | Description                                                                                                                                                                                                                                                           | Example                                                                                                                                                                                                                                                               |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `EmailAddress`                                                                                                                                                                                                                                                        | *string*                                                                                                                                                                                                                                                              | :heavy_check_mark:                                                                                                                                                                                                                                                    | The email address of the new member that is going to be invited to the organization                                                                                                                                                                                   | user@example.com                                                                                                                                                                                                                                                      |
| `InviterUserId`                                                                                                                                                                                                                                                       | *string*                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                    | The ID of the user that invites the new member to the organization.<br/>Must be an administrator in the organization.                                                                                                                                                 | user_67890                                                                                                                                                                                                                                                            |
| `Role`                                                                                                                                                                                                                                                                | *string*                                                                                                                                                                                                                                                              | :heavy_check_mark:                                                                                                                                                                                                                                                    | The role of the new member in the organization                                                                                                                                                                                                                        | admin                                                                                                                                                                                                                                                                 |
| `PublicMetadata`                                                                                                                                                                                                                                                      | Dictionary<String, *object*>                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.<br/>When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership. | {<br/>"key": "value"<br/>}                                                                                                                                                                                                                                            |
| `PrivateMetadata`                                                                                                                                                                                                                                                     | Dictionary<String, *object*>                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.<br/>When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership. | {<br/>"private_key": "secret_value"<br/>}                                                                                                                                                                                                                             |
| `RedirectUrl`                                                                                                                                                                                                                                                         | *string*                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.                                                                                                                                | https://example.com/welcome                                                                                                                                                                                                                                           |
| `ExpiresInDays`                                                                                                                                                                                                                                                       | *long*                                                                                                                                                                                                                                                                | :heavy_minus_sign:                                                                                                                                                                                                                                                    | The number of days the invitation will be valid for. By default, the invitation has a 30 days expire.                                                                                                                                                                 |                                                                                                                                                                                                                                                                       |

================
File: docs/Models/Operations/CreateOrganizationInvitationResponse.md
================
# CreateOrganizationInvitationResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationInvitation`                                                    | [OrganizationInvitation](../../Models/Components/OrganizationInvitation.md) | :heavy_minus_sign:                                                          | An organization invitation                                                  |

================
File: docs/Models/Operations/CreateOrganizationMembershipRequest.md
================
# CreateOrganizationMembershipRequest


## Fields

| Field                                                                                                         | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the organization where the new membership will be created                                           | org_123                                                                                                       |
| `RequestBody`                                                                                                 | [CreateOrganizationMembershipRequestBody](../../Models/Operations/CreateOrganizationMembershipRequestBody.md) | :heavy_check_mark:                                                                                            | N/A                                                                                                           |                                                                                                               |

================
File: docs/Models/Operations/CreateOrganizationMembershipRequestBody.md
================
# CreateOrganizationMembershipRequestBody


## Fields

| Field                                                                  | Type                                                                   | Required                                                               | Description                                                            | Example                                                                |
| ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- |
| `UserId`                                                               | *string*                                                               | :heavy_check_mark:                                                     | The ID of the user that will be added as a member in the organization. | user_456                                                               |
| `Role`                                                                 | *string*                                                               | :heavy_check_mark:                                                     | The role that the new member will have in the organization.            | admin                                                                  |

================
File: docs/Models/Operations/CreateOrganizationMembershipResponse.md
================
# CreateOrganizationMembershipResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationMembership`                                                    | [OrganizationMembership](../../Models/Components/OrganizationMembership.md) | :heavy_minus_sign:                                                          | Success                                                                     |

================
File: docs/Models/Operations/CreateOrganizationRequestBody.md
================
# CreateOrganizationRequestBody


## Fields

| Field                                                                                                                                  | Type                                                                                                                                   | Required                                                                                                                               | Description                                                                                                                            | Example                                                                                                                                |
| -------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                                 | *string*                                                                                                                               | :heavy_check_mark:                                                                                                                     | The name of the new organization.<br/>May not contain URLs or HTML.<br/>Max length: 256                                                | NewOrg                                                                                                                                 |
| `CreatedBy`                                                                                                                            | *string*                                                                                                                               | :heavy_minus_sign:                                                                                                                     | The ID of the User who will become the administrator for the new organization                                                          | user_123                                                                                                                               |
| `PrivateMetadata`                                                                                                                      | Dictionary<String, *object*>                                                                                                           | :heavy_minus_sign:                                                                                                                     | Metadata saved on the organization, accessible only from the Backend API                                                               | {<br/>"internal_code": "ABC123"<br/>}                                                                                                  |
| `PublicMetadata`                                                                                                                       | Dictionary<String, *object*>                                                                                                           | :heavy_minus_sign:                                                                                                                     | Metadata saved on the organization, read-only from the Frontend API and fully accessible (read/write) from the Backend API             | {<br/>"public_event": "Annual Summit"<br/>}                                                                                            |
| `Slug`                                                                                                                                 | *string*                                                                                                                               | :heavy_minus_sign:                                                                                                                     | A slug for the new organization.<br/>Can contain only lowercase alphanumeric characters and the dash "-".<br/>Must be unique for the instance. | neworg                                                                                                                                 |
| `MaxAllowedMemberships`                                                                                                                | *long*                                                                                                                                 | :heavy_minus_sign:                                                                                                                     | The maximum number of memberships allowed for this organization                                                                        | 100                                                                                                                                    |
| `CreatedAt`                                                                                                                            | *string*                                                                                                                               | :heavy_minus_sign:                                                                                                                     | A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).        |                                                                                                                                        |

================
File: docs/Models/Operations/CreateOrganizationResponse.md
================
# CreateOrganizationResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Organization`                                          | [Organization](../../Models/Components/Organization.md) | :heavy_minus_sign:                                      | An organization                                         |

================
File: docs/Models/Operations/CreatePhoneNumberRequestBody.md
================
# CreatePhoneNumberRequestBody


## Fields

| Field                                                                                                                                                                                                                   | Type                                                                                                                                                                                                                    | Required                                                                                                                                                                                                                | Description                                                                                                                                                                                                             | Example                                                                                                                                                                                                                 |
| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                                                                                                | *string*                                                                                                                                                                                                                | :heavy_check_mark:                                                                                                                                                                                                      | The ID representing the user                                                                                                                                                                                            | usr_12345                                                                                                                                                                                                               |
| `PhoneNumber`                                                                                                                                                                                                           | *string*                                                                                                                                                                                                                | :heavy_check_mark:                                                                                                                                                                                                      | The new phone number. Must adhere to the E.164 standard for phone number format.                                                                                                                                        | +11234567890                                                                                                                                                                                                            |
| `Verified`                                                                                                                                                                                                              | *bool*                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                      | When created, the phone number will be marked as verified.                                                                                                                                                              | true                                                                                                                                                                                                                    |
| `Primary`                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                      | Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.                                                                                                 | false                                                                                                                                                                                                                   |
| `ReservedForSecondFactor`                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                      | Create this phone number as reserved for multi-factor authentication. The phone number must also be verified.<br/>If there are no other reserved second factors, the phone number will be set as the default second factor. | false                                                                                                                                                                                                                   |

================
File: docs/Models/Operations/CreatePhoneNumberResponse.md
================
# CreatePhoneNumberResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `PhoneNumber`                                           | [PhoneNumber](../../Models/Components/PhoneNumber.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateRedirectURLRequestBody.md
================
# CreateRedirectURLRequestBody


## Fields

| Field                                                                                                                                    | Type                                                                                                                                     | Required                                                                                                                                 | Description                                                                                                                              | Example                                                                                                                                  |
| ---------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| `Url`                                                                                                                                    | *string*                                                                                                                                 | :heavy_check_mark:                                                                                                                       | The full url value prefixed with `https://` or a custom scheme e.g. `"https://my-app.com/oauth-callback"` or `"my-app://oauth-callback"` | https://my-app.com/oauth-callback                                                                                                        |

================
File: docs/Models/Operations/CreateRedirectURLResponse.md
================
# CreateRedirectURLResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `RedirectURL`                                           | [RedirectURL](../../Models/Components/RedirectURL.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateSAMLConnectionRequestBody.md
================
# CreateSAMLConnectionRequestBody


## Fields

| Field                                                                                                                | Type                                                                                                                 | Required                                                                                                             | Description                                                                                                          | Example                                                                                                              |
| -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                               | *string*                                                                                                             | :heavy_check_mark:                                                                                                   | The name to use as a label for this SAML Connection                                                                  | My SAML Connection                                                                                                   |
| `Domain`                                                                                                             | *string*                                                                                                             | :heavy_check_mark:                                                                                                   | The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.       | example.org                                                                                                          |
| `Provider`                                                                                                           | [Provider](../../Models/Operations/Provider.md)                                                                      | :heavy_check_mark:                                                                                                   | The IdP provider of the connection.                                                                                  | saml_custom                                                                                                          |
| `IdpEntityId`                                                                                                        | *string*                                                                                                             | :heavy_minus_sign:                                                                                                   | The Entity ID as provided by the IdP                                                                                 | http://idp.example.org/                                                                                              |
| `IdpSsoUrl`                                                                                                          | *string*                                                                                                             | :heavy_minus_sign:                                                                                                   | The Single-Sign On URL as provided by the IdP                                                                        | http://idp.example.org/sso                                                                                           |
| `IdpCertificate`                                                                                                     | *string*                                                                                                             | :heavy_minus_sign:                                                                                                   | The X.509 certificate as provided by the IdP                                                                         | MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT...                                                                                  |
| `IdpMetadataUrl`                                                                                                     | *string*                                                                                                             | :heavy_minus_sign:                                                                                                   | The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties    | http://idp.example.org/metadata.xml                                                                                  |
| `IdpMetadata`                                                                                                        | *string*                                                                                                             | :heavy_minus_sign:                                                                                                   | The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties | <EntityDescriptor ...                                                                                                |
| `OrganizationId`                                                                                                     | *string*                                                                                                             | :heavy_minus_sign:                                                                                                   | The ID of the organization to which users of this SAML Connection will be added                                      |                                                                                                                      |
| `AttributeMapping`                                                                                                   | [AttributeMapping](../../Models/Operations/AttributeMapping.md)                                                      | :heavy_minus_sign:                                                                                                   | Define the attribute name mapping between Identity Provider and Clerk's user properties                              |                                                                                                                      |

================
File: docs/Models/Operations/CreateSAMLConnectionResponse.md
================
# CreateSAMLConnectionResponse


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `HttpMeta`                                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                   | :heavy_check_mark:                                                        | N/A                                                                       |
| `SchemasSAMLConnection`                                                   | [SchemasSAMLConnection](../../Models/Components/SchemasSAMLConnection.md) | :heavy_minus_sign:                                                        | A SAML Connection                                                         |

================
File: docs/Models/Operations/CreateSessionRequestBody.md
================
# CreateSessionRequestBody


## Fields

| Field                        | Type                         | Required                     | Description                  |
| ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |
| `UserId`                     | *string*                     | :heavy_check_mark:           | The ID representing the user |

================
File: docs/Models/Operations/CreateSessionResponse.md
================
# CreateSessionResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Session`                                               | [Session](../../Models/Components/Session.md)           | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateSessionTokenFromTemplateObject.md
================
# CreateSessionTokenFromTemplateObject


## Values

| Name    | Value   |
| ------- | ------- |
| `Token` | token   |

================
File: docs/Models/Operations/CreateSessionTokenFromTemplateRequest.md
================
# CreateSessionTokenFromTemplateRequest


## Fields

| Field                                                                                                             | Type                                                                                                              | Required                                                                                                          | Description                                                                                                       | Example                                                                                                           |
| ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| `SessionId`                                                                                                       | *string*                                                                                                          | :heavy_check_mark:                                                                                                | The ID of the session                                                                                             | ses_123abcd4567                                                                                                   |
| `TemplateName`                                                                                                    | *string*                                                                                                          | :heavy_check_mark:                                                                                                | The name of the JWT Template defined in your instance (e.g. `custom_hasura`).                                     | custom_hasura                                                                                                     |
| `RequestBody`                                                                                                     | [CreateSessionTokenFromTemplateRequestBody](../../Models/Operations/CreateSessionTokenFromTemplateRequestBody.md) | :heavy_minus_sign:                                                                                                | N/A                                                                                                               |                                                                                                                   |

================
File: docs/Models/Operations/CreateSessionTokenFromTemplateRequestBody.md
================
# CreateSessionTokenFromTemplateRequestBody


## Fields

| Field                                                  | Type                                                   | Required                                               | Description                                            |
| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |
| `ExpiresInSeconds`                                     | *double*                                               | :heavy_minus_sign:                                     | Use this parameter to override the JWT token lifetime. |

================
File: docs/Models/Operations/CreateSessionTokenFromTemplateResponse.md
================
# CreateSessionTokenFromTemplateResponse


## Fields

| Field                                                                                                               | Type                                                                                                                | Required                                                                                                            | Description                                                                                                         |
| ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                                          | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                                             | :heavy_check_mark:                                                                                                  | N/A                                                                                                                 |
| `Object`                                                                                                            | [CreateSessionTokenFromTemplateResponseBody](../../Models/Operations/CreateSessionTokenFromTemplateResponseBody.md) | :heavy_minus_sign:                                                                                                  | OK                                                                                                                  |

================
File: docs/Models/Operations/CreateSessionTokenFromTemplateResponseBody.md
================
# CreateSessionTokenFromTemplateResponseBody

OK


## Fields

| Field                                                                                                                                                         | Type                                                                                                                                                          | Required                                                                                                                                                      | Description                                                                                                                                                   | Example                                                                                                                                                       |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Object`                                                                                                                                                      | [CreateSessionTokenFromTemplateObject](../../Models/Operations/CreateSessionTokenFromTemplateObject.md)                                                       | :heavy_minus_sign:                                                                                                                                            | N/A                                                                                                                                                           | token                                                                                                                                                         |
| `Jwt`                                                                                                                                                         | *string*                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                            | N/A                                                                                                                                                           | eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvZSBCbG9nZ3MiLCJpYXQiOjE1MTYyMzkwMjJ9.qKVwLLnbfqfM5VCfU8vDhXXXS0VklRcsErgTpELYgfw |

================
File: docs/Models/Operations/CreateSessionTokenRequest.md
================
# CreateSessionTokenRequest


## Fields

| Field                                                                                     | Type                                                                                      | Required                                                                                  | Description                                                                               |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `SessionId`                                                                               | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the session                                                                     |
| `RequestBody`                                                                             | [CreateSessionTokenRequestBody](../../Models/Operations/CreateSessionTokenRequestBody.md) | :heavy_minus_sign:                                                                        | N/A                                                                                       |

================
File: docs/Models/Operations/CreateSessionTokenRequestBody.md
================
# CreateSessionTokenRequestBody


## Fields

| Field                                                              | Type                                                               | Required                                                           | Description                                                        |
| ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ |
| `ExpiresInSeconds`                                                 | *double*                                                           | :heavy_minus_sign:                                                 | Use this parameter to override the default session token lifetime. |

================
File: docs/Models/Operations/CreateSessionTokenResponse.md
================
# CreateSessionTokenResponse


## Fields

| Field                                                                                       | Type                                                                                        | Required                                                                                    | Description                                                                                 |
| ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                     | :heavy_check_mark:                                                                          | N/A                                                                                         |
| `Object`                                                                                    | [CreateSessionTokenResponseBody](../../Models/Operations/CreateSessionTokenResponseBody.md) | :heavy_minus_sign:                                                                          | OK                                                                                          |

================
File: docs/Models/Operations/CreateSessionTokenResponseBody.md
================
# CreateSessionTokenResponseBody

OK


## Fields

| Field                                                         | Type                                                          | Required                                                      | Description                                                   |
| ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- |
| `Object`                                                      | [Models.Operations.Object](../../Models/Operations/Object.md) | :heavy_minus_sign:                                            | N/A                                                           |
| `Jwt`                                                         | *string*                                                      | :heavy_minus_sign:                                            | N/A                                                           |

================
File: docs/Models/Operations/CreateSignInTokenRequestBody.md
================
# CreateSignInTokenRequestBody


## Fields

| Field                                                                                                                 | Type                                                                                                                  | Required                                                                                                              | Description                                                                                                           | Example                                                                                                               |
| --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                              | *string*                                                                                                              | :heavy_check_mark:                                                                                                    | The ID of the user that can use the newly created sign in token                                                       | user_12345                                                                                                            |
| `ExpiresInSeconds`                                                                                                    | *long*                                                                                                                | :heavy_minus_sign:                                                                                                    | Optional parameter to specify the life duration of the sign in token in seconds.<br/>By default, the duration is 30 days. | 2592000                                                                                                               |

================
File: docs/Models/Operations/CreateSignInTokenResponse.md
================
# CreateSignInTokenResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `SignInToken`                                           | [SignInToken](../../Models/Components/SignInToken.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateSvixAppResponse.md
================
# CreateSvixAppResponse


## Fields

| Field                                                                      | Type                                                                       | Required                                                                   | Description                                                                |
| -------------------------------------------------------------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------- |
| `HttpMeta`                                                                 | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                    | :heavy_check_mark:                                                         | N/A                                                                        |
| `SvixURL`                                                                  | [SvixURL](../../Models/Components/SvixURL.md)                              | :heavy_minus_sign:                                                         | Response that contains a temporary Svix URL to access management dashboard |

================
File: docs/Models/Operations/CreateTestingTokenResponse.md
================
# CreateTestingTokenResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `TestingToken`                                          | [TestingToken](../../Models/Components/TestingToken.md) | :heavy_minus_sign:                                      | A Testing Token                                         |

================
File: docs/Models/Operations/CreateUserRequestBody.md
================
# CreateUserRequestBody


## Fields

| Field| Type| Required| Description| Example|
||||||
| `ExternalId`| *string| :heavy_minus_sign| The ID of the user as used in your external systems or your previous authentication solution.<br/>Must be unique across your instance| ext-id|
| `FirstName`| *string| :heavy_minus_sign| The first name to assign to the user| John|
| `LastName`| *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign| The last name to assign to the user                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Doe|
| `EmailAddress`| List<*string| :heavy_minus_sign| Email addresses to add to the user.<br/>Must be unique across your instance.<br/>The first email address will be set as the user's primary email address||
| `PhoneNumber`| List<*string*>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | :heavy_minus_sign| Phone numbers to add to the user.<br/>Must be unique across your instance.<br/>The first phone number will be set as the user's primary phone number||
| `Web3Wallet`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | List<*string| :heavy_minus_sign| Web3 wallets to add to the user.<br/>Must be unique across your instance.<br/>The first wallet will be set as the user's primary wallet||
| `Username`| *string| :heavy_minus_sign| The username to give to the user.<br/>It must be unique across your instance| johndoe|
| `Password`| *string| :heavy_minus_sign| The plaintext password to give the user.<br/>Must be at least 8 characters long, and can not be in any list of hacked passwords| Secure*Pass|
| `PasswordDigest`| *string| :heavy_minus_sign| In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.<br/>The digests should be generated with one of the supported algorithms.<br/>The hashing algorithm can be specified using the `password_hasher` property| $argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc|
| `PasswordHasher`| *string| :heavy_minus_sign| The hashing algorithm that was used to generate the password digest.<br/><br/>The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),<br/>[`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),<br/>[`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),<br/>and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.<br/><br/>Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information. ||
| `SkipPasswordChecks`| *bool| :heavy_minus_sign| When set to `true` all password checks are skipped.<br/>It is recommended to use this method only when migrating plaintext passwords to Clerk.<br/>Upon migration the user base should be prompted to pick stronger password| false|
| `SkipPasswordRequirement`| *bool| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | When set to `true`, `password` is not required anymore when creating the user and can be omitted.<br/>This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.<br/>Please note that you cannot use this flag if password is the only way for a user to sign into your instance| false                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| `TotpSecret`| *string| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.<br/>Please note that currently the supported options are:<br/>* Period: 30 seconds<br/>* Code length: 6 digits<br/>* Algorithm: SHA1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | base32totpsecretkey|
| `BackupCodes`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | List<*string| :heavy_minus_sign| If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.<br/>You must provide the backup codes in plain format or the corresponding bcrypt digest| [<br/>"123456",<br/>"654321"<br|
| `PublicMetadata`| Dictionary<String, *object| :heavy_minus_sign| Metadata saved on the user, that is visible to both your Frontend and Backend APIs| {<br/>"role": "user"<br/>}|
| `PrivateMetadata`| Dictionary<String, *object| :heavy_minus_sign| Metadata saved on the user, that is only visible to your Backend| {<br/>"internal_id": "789"<br/>}|
| `UnsafeMetadata`| Dictionary<String, *object| :heavy_minus_sign| Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.<br/>Note: Since this data can be modified from the frontend, it is not guaranteed to be safe| {<br/>"preferences": {<br/>"theme": "dark"<br/>}<br/>}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| `DeleteSelfEnabled`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | *bool| :heavy_minus_sign| If enabled, user can delete themselves via FAPI.<br||
| `LegalAcceptedAt`| *string| :heavy_minus_sign| A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`||
| `SkipLegalChecks`| *bool| :heavy_minus_sign| When set to `true` all legal checks are skipped.<br/>It is not recommended to skip legal checks unless you are migrating a user to Clerk||
| `CreateOrganizationEnabled`| *bool*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | :heavy_minus_sign| If enabled, user can create organizations via FAPI.<br/>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ||
| `CreateOrganizationsLimit`| *long| :heavy_minus_sign| The maximum number of organizations the user can create. 0 means unlimited.<br/>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ||
| `CreatedAt`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign| A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`||

================
File: docs/Models/Operations/CreateUserResponse.md
================
# CreateUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/CreateWaitlistEntryRequestBody.md
================
# CreateWaitlistEntryRequestBody


## Fields

| Field                                                                                                                   | Type                                                                                                                    | Required                                                                                                                | Description                                                                                                             |
| ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `EmailAddress`                                                                                                          | *string*                                                                                                                | :heavy_check_mark:                                                                                                      | The email address to add to the waitlist                                                                                |
| `Notify`                                                                                                                | *bool*                                                                                                                  | :heavy_minus_sign:                                                                                                      | Optional flag which denotes whether a confirmation email should be sent to the given email address.<br/>Defaults to `true`. |

================
File: docs/Models/Operations/CreateWaitlistEntryResponse.md
================
# CreateWaitlistEntryResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `WaitlistEntry`                                           | [WaitlistEntry](../../Models/Components/WaitlistEntry.md) | :heavy_minus_sign:                                        | A Waitlist Entry                                          |

================
File: docs/Models/Operations/DeleteAllowlistIdentifierRequest.md
================
# DeleteAllowlistIdentifierRequest


## Fields

| Field                                                  | Type                                                   | Required                                               | Description                                            | Example                                                |
| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |
| `IdentifierId`                                         | *string*                                               | :heavy_check_mark:                                     | The ID of the identifier to delete from the allow-list | example_identifier_id                                  |

================
File: docs/Models/Operations/DeleteAllowlistIdentifierResponse.md
================
# DeleteAllowlistIdentifierResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteBackupCodeRequest.md
================
# DeleteBackupCodeRequest


## Fields

| Field                                                    | Type                                                     | Required                                                 | Description                                              |
| -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- |
| `UserId`                                                 | *string*                                                 | :heavy_check_mark:                                       | The ID of the user whose backup codes are to be deleted. |

================
File: docs/Models/Operations/DeleteBackupCodeResponse.md
================
# DeleteBackupCodeResponse


## Fields

| Field                                                                                   | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                 | :heavy_check_mark:                                                                      | N/A                                                                                     |
| `Object`                                                                                | [DeleteBackupCodeResponseBody](../../Models/Operations/DeleteBackupCodeResponseBody.md) | :heavy_minus_sign:                                                                      | Successful operation.                                                                   |

================
File: docs/Models/Operations/DeleteBackupCodeResponseBody.md
================
# DeleteBackupCodeResponseBody

Successful operation.


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `UserId`           | *string*           | :heavy_minus_sign: | N/A                |

================
File: docs/Models/Operations/DeleteBlocklistIdentifierRequest.md
================
# DeleteBlocklistIdentifierRequest


## Fields

| Field                                                  | Type                                                   | Required                                               | Description                                            | Example                                                |
| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |
| `IdentifierId`                                         | *string*                                               | :heavy_check_mark:                                     | The ID of the identifier to delete from the block-list | identifier123                                          |

================
File: docs/Models/Operations/DeleteBlocklistIdentifierResponse.md
================
# DeleteBlocklistIdentifierResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteDomainRequest.md
================
# DeleteDomainRequest


## Fields

| Field                                                                  | Type                                                                   | Required                                                               | Description                                                            | Example                                                                |
| ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- |
| `DomainId`                                                             | *string*                                                               | :heavy_check_mark:                                                     | The ID of the domain that will be deleted. Must be a satellite domain. | domain_12345                                                           |

================
File: docs/Models/Operations/DeleteDomainResponse.md
================
# DeleteDomainResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteEmailAddressRequest.md
================
# DeleteEmailAddressRequest


## Fields

| Field                                 | Type                                  | Required                              | Description                           | Example                               |
| ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- |
| `EmailAddressId`                      | *string*                              | :heavy_check_mark:                    | The ID of the email address to delete | email_address_id_example              |

================
File: docs/Models/Operations/DeleteEmailAddressResponse.md
================
# DeleteEmailAddressResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteExternalAccountRequest.md
================
# DeleteExternalAccountRequest


## Fields

| Field                                    | Type                                     | Required                                 | Description                              |
| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| `UserId`                                 | *string*                                 | :heavy_check_mark:                       | The ID of the user's external account    |
| `ExternalAccountId`                      | *string*                                 | :heavy_check_mark:                       | The ID of the external account to delete |

================
File: docs/Models/Operations/DeleteExternalAccountResponse.md
================
# DeleteExternalAccountResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteJWTTemplateRequest.md
================
# DeleteJWTTemplateRequest


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `TemplateId`       | *string*           | :heavy_check_mark: | JWT Template ID    |

================
File: docs/Models/Operations/DeleteJWTTemplateResponse.md
================
# DeleteJWTTemplateResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteOAuthApplicationRequest.md
================
# DeleteOAuthApplicationRequest


## Fields

| Field                                     | Type                                      | Required                                  | Description                               | Example                                   |
| ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- |
| `OauthApplicationId`                      | *string*                                  | :heavy_check_mark:                        | The ID of the OAuth application to delete | oauth_app_09876                           |

================
File: docs/Models/Operations/DeleteOAuthApplicationResponse.md
================
# DeleteOAuthApplicationResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteOrganizationDomainRequest.md
================
# DeleteOrganizationDomainRequest


## Fields

| Field                                            | Type                                             | Required                                         | Description                                      |
| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |
| `OrganizationId`                                 | *string*                                         | :heavy_check_mark:                               | The ID of the organization the domain belongs to |
| `DomainId`                                       | *string*                                         | :heavy_check_mark:                               | The ID of the domain                             |

================
File: docs/Models/Operations/DeleteOrganizationDomainResponse.md
================
# DeleteOrganizationDomainResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteOrganizationLogoRequest.md
================
# DeleteOrganizationLogoRequest


## Fields

| Field                                                          | Type                                                           | Required                                                       | Description                                                    | Example                                                        |
| -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- |
| `OrganizationId`                                               | *string*                                                       | :heavy_check_mark:                                             | The ID of the organization for which the logo will be deleted. | org_12345                                                      |

================
File: docs/Models/Operations/DeleteOrganizationLogoResponse.md
================
# DeleteOrganizationLogoResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Organization`                                          | [Organization](../../Models/Components/Organization.md) | :heavy_minus_sign:                                      | An organization                                         |

================
File: docs/Models/Operations/DeleteOrganizationMembershipRequest.md
================
# DeleteOrganizationMembershipRequest


## Fields

| Field                                                | Type                                                 | Required                                             | Description                                          | Example                                              |
| ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- |
| `OrganizationId`                                     | *string*                                             | :heavy_check_mark:                                   | The ID of the organization the membership belongs to | org_12345                                            |
| `UserId`                                             | *string*                                             | :heavy_check_mark:                                   | The ID of the user that this membership belongs to   | user_67890                                           |

================
File: docs/Models/Operations/DeleteOrganizationMembershipResponse.md
================
# DeleteOrganizationMembershipResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationMembership`                                                    | [OrganizationMembership](../../Models/Components/OrganizationMembership.md) | :heavy_minus_sign:                                                          | Success                                                                     |

================
File: docs/Models/Operations/DeleteOrganizationRequest.md
================
# DeleteOrganizationRequest


## Fields

| Field                                | Type                                 | Required                             | Description                          | Example                              |
| ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ |
| `OrganizationId`                     | *string*                             | :heavy_check_mark:                   | The ID of the organization to delete | org_321_delete                       |

================
File: docs/Models/Operations/DeleteOrganizationResponse.md
================
# DeleteOrganizationResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeletePhoneNumberRequest.md
================
# DeletePhoneNumberRequest


## Fields

| Field                                | Type                                 | Required                             | Description                          | Example                              |
| ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ |
| `PhoneNumberId`                      | *string*                             | :heavy_check_mark:                   | The ID of the phone number to delete | phone_12345                          |

================
File: docs/Models/Operations/DeletePhoneNumberResponse.md
================
# DeletePhoneNumberResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteRedirectURLRequest.md
================
# DeleteRedirectURLRequest


## Fields

| Field                            | Type                             | Required                         | Description                      | Example                          |
| -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- |
| `Id`                             | *string*                         | :heavy_check_mark:               | The ID of the redirect URL       | redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3 |

================
File: docs/Models/Operations/DeleteRedirectURLResponse.md
================
# DeleteRedirectURLResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteSAMLConnectionRequest.md
================
# DeleteSAMLConnectionRequest


## Fields

| Field                                   | Type                                    | Required                                | Description                             | Example                                 |
| --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- |
| `SamlConnectionId`                      | *string*                                | :heavy_check_mark:                      | The ID of the SAML Connection to delete | saml_conn_123_delete                    |

================
File: docs/Models/Operations/DeleteSAMLConnectionResponse.md
================
# DeleteSAMLConnectionResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DeleteSvixAppResponse.md
================
# DeleteSvixAppResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |

================
File: docs/Models/Operations/DeleteTOTPRequest.md
================
# DeleteTOTPRequest


## Fields

| Field                                            | Type                                             | Required                                         | Description                                      |
| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |
| `UserId`                                         | *string*                                         | :heavy_check_mark:                               | The ID of the user whose TOTPs are to be deleted |

================
File: docs/Models/Operations/DeleteTOTPResponse.md
================
# DeleteTOTPResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `Object`                                                                    | [DeleteTOTPResponseBody](../../Models/Operations/DeleteTOTPResponseBody.md) | :heavy_minus_sign:                                                          | Successful operation.                                                       |

================
File: docs/Models/Operations/DeleteTOTPResponseBody.md
================
# DeleteTOTPResponseBody

Successful operation.


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `UserId`           | *string*           | :heavy_minus_sign: | N/A                |

================
File: docs/Models/Operations/DeleteUserProfileImageRequest.md
================
# DeleteUserProfileImageRequest


## Fields

| Field                                              | Type                                               | Required                                           | Description                                        | Example                                            |
| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- |
| `UserId`                                           | *string*                                           | :heavy_check_mark:                                 | The ID of the user to delete the profile image for | usr_test123                                        |

================
File: docs/Models/Operations/DeleteUserProfileImageResponse.md
================
# DeleteUserProfileImageResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/DeleteUserRequest.md
================
# DeleteUserRequest


## Fields

| Field                        | Type                         | Required                     | Description                  | Example                      |
| ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |
| `UserId`                     | *string*                     | :heavy_check_mark:           | The ID of the user to delete | usr_1                        |

================
File: docs/Models/Operations/DeleteUserResponse.md
================
# DeleteUserResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/DisableMFARequest.md
================
# DisableMFARequest


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             | Example                                                 |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `UserId`                                                | *string*                                                | :heavy_check_mark:                                      | The ID of the user whose MFA methods are to be disabled | user_123456                                             |

================
File: docs/Models/Operations/DisableMFAResponse.md
================
# DisableMFAResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `Object`                                                                    | [DisableMFAResponseBody](../../Models/Operations/DisableMFAResponseBody.md) | :heavy_minus_sign:                                                          | Successful operation.                                                       |

================
File: docs/Models/Operations/DisableMFAResponseBody.md
================
# DisableMFAResponseBody

Successful operation.


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `UserId`           | *string*           | :heavy_minus_sign: | N/A                | user_123456        |

================
File: docs/Models/Operations/File.md
================
# File


## Fields

| Field              | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `FileName`         | *string*           | :heavy_check_mark: | N/A                |
| `Content`          | *byte[]*           | :heavy_check_mark: | N/A                |

================
File: docs/Models/Operations/GenerateSvixAuthURLResponse.md
================
# GenerateSvixAuthURLResponse


## Fields

| Field                                                                      | Type                                                                       | Required                                                                   | Description                                                                |
| -------------------------------------------------------------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------- |
| `HttpMeta`                                                                 | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                    | :heavy_check_mark:                                                         | N/A                                                                        |
| `SvixURL`                                                                  | [SvixURL](../../Models/Components/SvixURL.md)                              | :heavy_minus_sign:                                                         | Response that contains a temporary Svix URL to access management dashboard |

================
File: docs/Models/Operations/GetClientListRequest.md
================
# GetClientListRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/GetClientListResponse.md
================
# GetClientListResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `ClientList`                                            | List<[Client](../../Models/Components/Client.md)>       | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetClientRequest.md
================
# GetClientRequest


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `ClientId`         | *string*           | :heavy_check_mark: | Client ID.         | cli_123456789      |

================
File: docs/Models/Operations/GetClientResponse.md
================
# GetClientResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Client`                                                | [Client](../../Models/Components/Client.md)             | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetEmailAddressRequest.md
================
# GetEmailAddressRequest


## Fields

| Field                                   | Type                                    | Required                                | Description                             | Example                                 |
| --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- |
| `EmailAddressId`                        | *string*                                | :heavy_check_mark:                      | The ID of the email address to retrieve | email_address_id_example                |

================
File: docs/Models/Operations/GetEmailAddressResponse.md
================
# GetEmailAddressResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `EmailAddress`                                          | [EmailAddress](../../Models/Components/EmailAddress.md) | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetInstanceResponse.md
================
# GetInstanceResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Instance`                                              | [Instance](../../Models/Components/Instance.md)         | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetJWKSResponse.md
================
# GetJWKSResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `Jwks`                                                    | [Models.Components.Jwks](../../Models/Components/Jwks.md) | :heavy_minus_sign:                                        | Get the JSON Web Key Set                                  |

================
File: docs/Models/Operations/GetJWTTemplateRequest.md
================
# GetJWTTemplateRequest


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `TemplateId`       | *string*           | :heavy_check_mark: | JWT Template ID    | template_123       |

================
File: docs/Models/Operations/GetJWTTemplateResponse.md
================
# GetJWTTemplateResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `JWTTemplate`                                           | [JWTTemplate](../../Models/Components/JWTTemplate.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetOAuthAccessTokenRequest.md
================
# GetOAuthAccessTokenRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                  | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The ID of the user for which to retrieve the OAuth access token                                                                           | user_123                                                                                                                                  |
| `Provider`                                                                                                                                | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The ID of the OAuth provider (e.g. `oauth_google`)                                                                                        | oauth_google                                                                                                                              |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/GetOAuthAccessTokenResponse.md
================
# GetOAuthAccessTokenResponse


## Fields

| Field                                                         | Type                                                          | Required                                                      | Description                                                   |
| ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- |
| `HttpMeta`                                                    | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)       | :heavy_check_mark:                                            | N/A                                                           |
| `ResponseBodies`                                              | List<[ResponseBody](../../Models/Operations/ResponseBody.md)> | :heavy_minus_sign:                                            | The OAuth access token of the user, if any.                   |

================
File: docs/Models/Operations/GetOAuthApplicationRequest.md
================
# GetOAuthApplicationRequest


## Fields

| Field                           | Type                            | Required                        | Description                     | Example                         |
| ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- |
| `OauthApplicationId`            | *string*                        | :heavy_check_mark:              | The ID of the OAuth application | oauth_app_12345                 |

================
File: docs/Models/Operations/GetOAuthApplicationResponse.md
================
# GetOAuthApplicationResponse


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `HttpMeta`                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)         | :heavy_check_mark:                                              | N/A                                                             |
| `OAuthApplication`                                              | [OAuthApplication](../../Models/Components/OAuthApplication.md) | :heavy_minus_sign:                                              | An OAuth application                                            |

================
File: docs/Models/Operations/GetOrganizationInvitationRequest.md
================
# GetOrganizationInvitationRequest


## Fields

| Field                           | Type                            | Required                        | Description                     | Example                         |
| ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- |
| `OrganizationId`                | *string*                        | :heavy_check_mark:              | The organization ID.            | org_123456789                   |
| `InvitationId`                  | *string*                        | :heavy_check_mark:              | The organization invitation ID. | inv_987654321                   |

================
File: docs/Models/Operations/GetOrganizationInvitationResponse.md
================
# GetOrganizationInvitationResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationInvitation`                                                    | [OrganizationInvitation](../../Models/Components/OrganizationInvitation.md) | :heavy_minus_sign:                                                          | An organization invitation                                                  |

================
File: docs/Models/Operations/GetOrganizationRequest.md
================
# GetOrganizationRequest


## Fields

| Field                                                                                                                          | Type                                                                                                                           | Required                                                                                                                       | Description                                                                                                                    | Example                                                                                                                        |
| ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ |
| `OrganizationId`                                                                                                               | *string*                                                                                                                       | :heavy_check_mark:                                                                                                             | The ID or slug of the organization                                                                                             | org_123                                                                                                                        |
| `IncludeMembersCount`                                                                                                          | *bool*                                                                                                                         | :heavy_minus_sign:                                                                                                             | Flag to denote whether or not the organization's members count should be included in the response.                             |                                                                                                                                |
| `IncludeMissingMemberWithElevatedPermissions`                                                                                  | *bool*                                                                                                                         | :heavy_minus_sign:                                                                                                             | Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization. |                                                                                                                                |

================
File: docs/Models/Operations/GetOrganizationResponse.md
================
# GetOrganizationResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Organization`                                          | [Organization](../../Models/Components/Organization.md) | :heavy_minus_sign:                                      | An organization                                         |

================
File: docs/Models/Operations/GetPhoneNumberRequest.md
================
# GetPhoneNumberRequest


## Fields

| Field                                  | Type                                   | Required                               | Description                            | Example                                |
| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |
| `PhoneNumberId`                        | *string*                               | :heavy_check_mark:                     | The ID of the phone number to retrieve | phone_12345                            |

================
File: docs/Models/Operations/GetPhoneNumberResponse.md
================
# GetPhoneNumberResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `PhoneNumber`                                           | [PhoneNumber](../../Models/Components/PhoneNumber.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetPublicInterstitialRequest.md
================
# GetPublicInterstitialRequest


## Fields

| Field                                                                                                                                                      | Type                                                                                                                                                       | Required                                                                                                                                                   | Description                                                                                                                                                | Example                                                                                                                                                    |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ~~`FrontendApiQueryParameter`~~                                                                                                                            | *string*                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                         | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Please use `frontend_api` instead | frontend-api_1a2b3c4d                                                                                                                                      |
| `FrontendApiQueryParameter1`                                                                                                                               | *string*                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                         | The Frontend API key of your instance                                                                                                                      | pub_1a2b3c4d                                                                                                                                               |
| `PublishableKey`                                                                                                                                           | *string*                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                         | The publishable key of your instance                                                                                                                       |                                                                                                                                                            |
| `ProxyUrl`                                                                                                                                                 | *string*                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                         | The proxy URL of your instance                                                                                                                             |                                                                                                                                                            |
| `Domain`                                                                                                                                                   | *string*                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                         | The domain of your instance                                                                                                                                |                                                                                                                                                            |
| `SignInUrl`                                                                                                                                                | *string*                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                         | The sign in URL of your instance                                                                                                                           |                                                                                                                                                            |
| `UseDomainForScript`                                                                                                                                       | *bool*                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                         | Whether to use the domain for the script URL                                                                                                               |                                                                                                                                                            |

================
File: docs/Models/Operations/GetPublicInterstitialResponse.md
================
# GetPublicInterstitialResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |

================
File: docs/Models/Operations/GetRedirectURLRequest.md
================
# GetRedirectURLRequest


## Fields

| Field                            | Type                             | Required                         | Description                      | Example                          |
| -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- |
| `Id`                             | *string*                         | :heavy_check_mark:               | The ID of the redirect URL       | redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3 |

================
File: docs/Models/Operations/GetRedirectURLResponse.md
================
# GetRedirectURLResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `RedirectURL`                                           | [RedirectURL](../../Models/Components/RedirectURL.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetSAMLConnectionRequest.md
================
# GetSAMLConnectionRequest


## Fields

| Field                         | Type                          | Required                      | Description                   | Example                       |
| ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- |
| `SamlConnectionId`            | *string*                      | :heavy_check_mark:            | The ID of the SAML Connection | saml_conn_123                 |

================
File: docs/Models/Operations/GetSAMLConnectionResponse.md
================
# GetSAMLConnectionResponse


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `HttpMeta`                                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                   | :heavy_check_mark:                                                        | N/A                                                                       |
| `SchemasSAMLConnection`                                                   | [SchemasSAMLConnection](../../Models/Components/SchemasSAMLConnection.md) | :heavy_minus_sign:                                                        | A SAML Connection                                                         |

================
File: docs/Models/Operations/GetSessionListRequest.md
================
# GetSessionListRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `ClientId`                                                                                                                                | *string*                                                                                                                                  | :heavy_minus_sign:                                                                                                                        | List sessions for the given client                                                                                                        | client_123                                                                                                                                |
| `UserId`                                                                                                                                  | *string*                                                                                                                                  | :heavy_minus_sign:                                                                                                                        | List sessions for the given user                                                                                                          | user_456                                                                                                                                  |
| `Status`                                                                                                                                  | [Models.Operations.Status](../../Models/Operations/Status.md)                                                                             | :heavy_minus_sign:                                                                                                                        | Filter sessions by the provided status                                                                                                    | active                                                                                                                                    |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/GetSessionListResponse.md
================
# GetSessionListResponse


## Fields

| Field                                                                                                                                                                                                                                                                                                | Type                                                                                                                                                                                                                                                                                                 | Required                                                                                                                                                                                                                                                                                             | Description                                                                                                                                                                                                                                                                                          | Example                                                                                                                                                                                                                                                                                              |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                                                                                                                                                                                                                           | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                                                                                                                                                                                                                              | :heavy_check_mark:                                                                                                                                                                                                                                                                                   | N/A                                                                                                                                                                                                                                                                                                  |                                                                                                                                                                                                                                                                                                      |
| `SessionList`                                                                                                                                                                                                                                                                                        | List<[Session](../../Models/Components/Session.md)>                                                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                                                                                                   | Success                                                                                                                                                                                                                                                                                              | [<br/>{<br/>"object": "session",<br/>"id": "sess_12345",<br/>"user_id": "user_456",<br/>"client_id": "client_123",<br/>"status": "active",<br/>"last_active_organization_id": "org_789",<br/>"last_active_at": 1617970799,<br/>"expire_at": 1620559199,<br/>"abandon_at": 1618853599,<br/>"updated_at": 1619459200,<br/>"created_at": 1617864359<br/>}<br/>] |

================
File: docs/Models/Operations/GetSessionRequest.md
================
# GetSessionRequest


## Fields

| Field                 | Type                  | Required              | Description           | Example               |
| --------------------- | --------------------- | --------------------- | --------------------- | --------------------- |
| `SessionId`           | *string*              | :heavy_check_mark:    | The ID of the session | sess_1234567890abcdef |

================
File: docs/Models/Operations/GetSessionResponse.md
================
# GetSessionResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Session`                                               | [Session](../../Models/Components/Session.md)           | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetSignUpRequest.md
================
# GetSignUpRequest


## Fields

| Field                             | Type                              | Required                          | Description                       |
| --------------------------------- | --------------------------------- | --------------------------------- | --------------------------------- |
| `Id`                              | *string*                          | :heavy_check_mark:                | The ID of the sign-up to retrieve |

================
File: docs/Models/Operations/GetSignUpResponse.md
================
# GetSignUpResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `SignUp`                                                | [SignUp](../../Models/Components/SignUp.md)             | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetTemplateListRequest.md
================
# GetTemplateListRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                                                            | [TemplateType](../../Models/Operations/TemplateType.md)                                                                                   | :heavy_check_mark:                                                                                                                        | The type of templates to list (email or SMS)                                                                                              | email                                                                                                                                     |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/GetTemplateListResponse.md
================
# GetTemplateListResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `TemplateList`                                          | List<[Template](../../Models/Components/Template.md)>   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetTemplateRequest.md
================
# GetTemplateRequest


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               | Example                                                                   |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `TemplateType`                                                            | [PathParamTemplateType](../../Models/Operations/PathParamTemplateType.md) | :heavy_check_mark:                                                        | The type of templates to retrieve (email or SMS)                          | email                                                                     |
| `Slug`                                                                    | *string*                                                                  | :heavy_check_mark:                                                        | The slug (i.e. machine-friendly name) of the template to retrieve         | welcome-email                                                             |

================
File: docs/Models/Operations/GetTemplateResponse.md
================
# GetTemplateResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Template`                                              | [Template](../../Models/Components/Template.md)         | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetUserListRequest.md
================
# GetUserListRequest


## Fields

| Field| Type| Required| Description| Example|
||||||
| `EmailAddress`| List<*string| :heavy_minus_sign| Returns users with the specified email addresses.<br/>Accepts up to 100 email addresses.<br/>Any email addresses not found are ignored| [<br/>"test@example.com"<br|
| `PhoneNumber`| List<*string| :heavy_minus_sign| Returns users with the specified phone numbers.<br/>Accepts up to 100 phone numbers.<br/>Any phone numbers not found are ignored| [<br/>"+12345678901"<br|
| `ExternalId`| List<*string| :heavy_minus_sign| Returns users with the specified external ids.<br/>For each external id, the `+` and `-` can be<br/>prepended to the id, which denote whether the<br/>respective external id should be included or<br/>excluded from the result set.<br/>Accepts up to 100 external ids.<br/>Any external ids not found are ignored| [<br/>"external-id-123"<br|
| `Username`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | List<*string| :heavy_minus_sign| Returns users with the specified usernames.<br/>Accepts up to 100 usernames.<br/>Any usernames not found are ignored| [<br/>"user123"<br|
| `Web3Wallet`| List<*string| :heavy_minus_sign| Returns users with the specified web3 wallet addresses.<br/>Accepts up to 100 web3 wallet addresses.<br/>Any web3 wallet addressed not found are ignored| [<br/>"0x123456789abcdef0x123456789abcdef"<br|
| `UserId`| List<*string| :heavy_minus_sign| Returns users with the user ids specified.<br/>For each user id, the `+` and `-` can be<br/>prepended to the id, which denote whether the<br/>respective user id should be included or<br/>excluded from the result set.<br/>Accepts up to 100 user ids.<br/>Any user ids not found are ignored| [<br/>"user-id-123"<br|
| `OrganizationId`| List<*string| :heavy_minus_sign| Returns users that have memberships to the<br/>given organizations.<br/>For each organization id, the `+` and `-` can be<br/>prepended to the id, which denote whether the<br/>respective organization should be included or<br/>excluded from the result set.<br/>Accepts up to 100 organization ids| [<br/>"org-id-123"<br|
| `Query`| *string| :heavy_minus_sign| Returns users that match the given query.<br/>For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well| John|
| `EmailAddressQuery`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | *string| :heavy_minus_sign| Returns users with emails that match the given query, via case-insensitive partial match.<br/>For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`||
| `PhoneNumberQuery`| *string| :heavy_minus_sign| Returns users with phone numbers that match the given query, via case-insensitive partial match.<br/>For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`||
| `UsernameQuery`| *string| :heavy_minus_sign| Returns users with usernames that match the given query, via case-insensitive partial match.<br/>For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ||
| `NameQuery`| *string| :heavy_minus_sign| Returns users with names that match the given query, via case-insensitive partial match||
| `Banned`| *bool| :heavy_minus_sign| Returns users which are either banned (`banned=true`) or not banned (`banned=false`|                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| `LastActiveAtBefore`| *long| :heavy_minus_sign| Returns users whose last session activity was before the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was before||
| `LastActiveAtAfter`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | *long*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign| Returns users whose last session activity was after the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ||
| ~~`LastActiveAtSince`~~| *long| :heavy_minus_sign| : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Returns users that had session activity since the given date.<br/>Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.<br/>Deprecated in favor of `last_active_at_after`||
| `CreatedAtBefore`| *long| :heavy_minus_sign| Returns users who have been created before the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created before||
| `CreatedAtAfter`| *long| :heavy_minus_sign| Returns users who have been created after the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created after||
| `Limit`| *long| :heavy_minus_sign| Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`||
| `Offset`| *long| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`||
| `OrderBy`| *string| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Allows to return users in a particular order.<br/>At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.<br/>In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,<br/>if you pass `order_by=username&order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case. ||

================
File: docs/Models/Operations/GetUserListResponse.md
================
# GetUserListResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `UserList`                                              | List<[User](../../Models/Components/User.md)>           | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetUserRequest.md
================
# GetUserRequest


## Fields

| Field                          | Type                           | Required                       | Description                    | Example                        |
| ------------------------------ | ------------------------------ | ------------------------------ | ------------------------------ | ------------------------------ |
| `UserId`                       | *string*                       | :heavy_check_mark:             | The ID of the user to retrieve | usr_1                          |

================
File: docs/Models/Operations/GetUserResponse.md
================
# GetUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/GetUsersCountRequest.md
================
# GetUsersCountRequest


## Fields

| Field                                                                                                                                                                                                                                                                                                                                               | Type                                                                                                                                                                                                                                                                                                                                                | Required                                                                                                                                                                                                                                                                                                                                            | Description                                                                                                                                                                                                                                                                                                                                         | Example                                                                                                                                                                                                                                                                                                                                             |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `EmailAddress`                                                                                                                                                                                                                                                                                                                                      | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified email addresses.<br/>Accepts up to 100 email addresses.<br/>Any email addresses not found are ignored.                                                                                                                                                                                                              | [<br/>"user@example.com"<br/>]                                                                                                                                                                                                                                                                                                                      |
| `PhoneNumber`                                                                                                                                                                                                                                                                                                                                       | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified phone numbers.<br/>Accepts up to 100 phone numbers.<br/>Any phone numbers not found are ignored.                                                                                                                                                                                                                    | [<br/>"+1234567890"<br/>]                                                                                                                                                                                                                                                                                                                           |
| `ExternalId`                                                                                                                                                                                                                                                                                                                                        | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified external ids.<br/>Accepts up to 100 external ids.<br/>Any external ids not found are ignored.                                                                                                                                                                                                                       | [<br/>"external-id-123"<br/>]                                                                                                                                                                                                                                                                                                                       |
| `Username`                                                                                                                                                                                                                                                                                                                                          | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified usernames.<br/>Accepts up to 100 usernames.<br/>Any usernames not found are ignored.                                                                                                                                                                                                                                | [<br/>"username123"<br/>]                                                                                                                                                                                                                                                                                                                           |
| `Web3Wallet`                                                                                                                                                                                                                                                                                                                                        | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified web3 wallet addresses.<br/>Accepts up to 100 web3 wallet addresses.<br/>Any web3 wallet addressed not found are ignored.                                                                                                                                                                                            | [<br/>"0x123456789abcdef"<br/>]                                                                                                                                                                                                                                                                                                                     |
| `UserId`                                                                                                                                                                                                                                                                                                                                            | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the user ids specified.<br/>Accepts up to 100 user ids.<br/>Any user ids not found are ignored.                                                                                                                                                                                                                                   | [<br/>"user-id-123"<br/>]                                                                                                                                                                                                                                                                                                                           |
| `OrganizationId`                                                                                                                                                                                                                                                                                                                                    | List<*string*>                                                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users that have memberships to the given organizations. For each organization id, the `+` and `-`<br/>can be prepended to the id, which denote whether the respective organization should be included or<br/>excluded from the result set. Accepts up to 100 organization ids.                                                              | John Doe                                                                                                                                                                                                                                                                                                                                            |
| `Query`                                                                                                                                                                                                                                                                                                                                             | *string*                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users that match the given query.<br/>For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.                                                   |                                                                                                                                                                                                                                                                                                                                                     |
| `EmailAddressQuery`                                                                                                                                                                                                                                                                                                                                 | *string*                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with emails that match the given query, via case-insensitive partial match.<br/>For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`,<br/>and will be included in the resulting count.                                                                                                         |                                                                                                                                                                                                                                                                                                                                                     |
| `PhoneNumberQuery`                                                                                                                                                                                                                                                                                                                                  | *string*                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with phone numbers that match the given query, via case-insensitive partial match.<br/>For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`,<br/>and will be included in the resulting count.                                                                                                  |                                                                                                                                                                                                                                                                                                                                                     |
| `UsernameQuery`                                                                                                                                                                                                                                                                                                                                     | *string*                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with usernames that match the given query, via case-insensitive partial match.<br/>For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`,<br/>and will be included in the resulting count.                                                                                                         |                                                                                                                                                                                                                                                                                                                                                     |
| `NameQuery`                                                                                                                                                                                                                                                                                                                                         | *string*                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users with names that match the given query, via case-insensitive partial match.                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                                     |
| `Banned`                                                                                                                                                                                                                                                                                                                                            | *bool*                                                                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users which are either banned (`banned=true`) or not banned (`banned=false`).                                                                                                                                                                                                                                                                |                                                                                                                                                                                                                                                                                                                                                     |
| `LastActiveAtBefore`                                                                                                                                                                                                                                                                                                                                | *long*                                                                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users whose last session activity was before the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.                                                                                                                                               | 1700690400000                                                                                                                                                                                                                                                                                                                                       |
| `LastActiveAtAfter`                                                                                                                                                                                                                                                                                                                                 | *long*                                                                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users whose last session activity was after the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.                                                                                                                                                 | 1700690400000                                                                                                                                                                                                                                                                                                                                       |
| ~~`LastActiveAtSince`~~                                                                                                                                                                                                                                                                                                                             | *long*                                                                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Returns users that had session activity since the given date.<br/>Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.<br/>Deprecated in favor of `last_active_at_after`. | 1700690400000                                                                                                                                                                                                                                                                                                                                       |
| `CreatedAtBefore`                                                                                                                                                                                                                                                                                                                                   | *long*                                                                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users who have been created before the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.                                                                                                                                                                   | 1730160000000                                                                                                                                                                                                                                                                                                                                       |
| `CreatedAtAfter`                                                                                                                                                                                                                                                                                                                                    | *long*                                                                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users who have been created after the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.                                                                                                                                                                     | 1730160000000                                                                                                                                                                                                                                                                                                                                       |

================
File: docs/Models/Operations/GetUsersCountResponse.md
================
# GetUsersCountResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `TotalCount`                                            | [TotalCount](../../Models/Components/TotalCount.md)     | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/InstanceGetOrganizationMembershipsRequest.md
================
# InstanceGetOrganizationMembershipsRequest


## Fields

| Field                                                                                                                                                                                                                              | Type                                                                                                                                                                                                                               | Required                                                                                                                                                                                                                           | Description                                                                                                                                                                                                                        | Example                                                                                                                                                                                                                            |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `OrderBy`                                                                                                                                                                                                                          | *string*                                                                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                                                                 | Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>By prepending one of those values with + or -,<br/>we can choose to sort in ascending (ASC) or descending (DESC) order. |                                                                                                                                                                                                                                    |
| `Limit`                                                                                                                                                                                                                            | *long*                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                 | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                              | 20                                                                                                                                                                                                                                 |
| `Offset`                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                 | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                  | 10                                                                                                                                                                                                                                 |

================
File: docs/Models/Operations/InstanceGetOrganizationMembershipsResponse.md
================
# InstanceGetOrganizationMembershipsResponse


## Fields

| Field                                                                                           | Type                                                                                            | Required                                                                                        | Description                                                                                     |
| ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                         | :heavy_check_mark:                                                                              | N/A                                                                                             |
| `OrganizationMemberships`                                                                       | [Models.Components.OrganizationMemberships](../../Models/Components/OrganizationMemberships.md) | :heavy_minus_sign:                                                                              | A list of organization memberships                                                              |

================
File: docs/Models/Operations/ListAllowlistIdentifiersRequest.md
================
# ListAllowlistIdentifiersRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListAllowlistIdentifiersResponse.md
================
# ListAllowlistIdentifiersResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `AllowlistIdentifierList`                                                   | List<[AllowlistIdentifier](../../Models/Components/AllowlistIdentifier.md)> | :heavy_minus_sign:                                                          | Success                                                                     |

================
File: docs/Models/Operations/ListBlocklistIdentifiersResponse.md
================
# ListBlocklistIdentifiersResponse


## Fields

| Field                                                                                     | Type                                                                                      | Required                                                                                  | Description                                                                               |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                   | :heavy_check_mark:                                                                        | N/A                                                                                       |
| `BlocklistIdentifiers`                                                                    | [Models.Components.BlocklistIdentifiers](../../Models/Components/BlocklistIdentifiers.md) | :heavy_minus_sign:                                                                        | Success                                                                                   |

================
File: docs/Models/Operations/ListDomainsResponse.md
================
# ListDomainsResponse


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `HttpMeta`                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)         | :heavy_check_mark:                                              | N/A                                                             |
| `Domains`                                                       | [Models.Components.Domains](../../Models/Components/Domains.md) | :heavy_minus_sign:                                              | A list of domains                                               |

================
File: docs/Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.md
================
# ListInstanceOrganizationInvitationsQueryParamStatus

Filter organization invitations based on their status


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |

================
File: docs/Models/Operations/ListInstanceOrganizationInvitationsRequest.md
================
# ListInstanceOrganizationInvitationsRequest


## Fields

| Field| Type| Required| Description| Example|
||| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |||
| `OrderBy`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | *string| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Allows to return organization invitations in a particular order.<br/>At the moment, you can order the returned organization invitations either by their `created_at` or `email_address`.<br/>In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>For example, if you want organization invitations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>If you don't use `+` or `-`, then `+` is implied.<br/>Defaults to `-created_at`. ||
| `Status`| [ListInstanceOrganizationInvitationsQueryParamStatus](../../Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.md)                                                                                                                                                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Filter organization invitations based on their status                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ||
| `Query`| *string| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Filter organization invitations based on their `email_address`                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ||
| `Limit`| *long| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                                                                                                                                                                                                                                                                                                                               | 20                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| `Offset`| *long| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                                                                                                                                                                                                                                                                                                                   ||

================
File: docs/Models/Operations/ListInstanceOrganizationInvitationsResponse.md
================
# ListInstanceOrganizationInvitationsResponse


## Fields

| Field                                                                                                                             | Type                                                                                                                              | Required                                                                                                                          | Description                                                                                                                       |
| --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                                                        | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                                                           | :heavy_check_mark:                                                                                                                | N/A                                                                                                                               |
| `OrganizationInvitationsWithPublicOrganizationData`                                                                               | [OrganizationInvitationsWithPublicOrganizationData](../../Models/Components/OrganizationInvitationsWithPublicOrganizationData.md) | :heavy_minus_sign:                                                                                                                | A list of organization invitations with public organization data                                                                  |

================
File: docs/Models/Operations/ListInvitationsQueryParamStatus.md
================
# ListInvitationsQueryParamStatus

Filter invitations based on their status


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |
| `Expired`  | expired    |

================
File: docs/Models/Operations/ListInvitationsRequest.md
================
# ListInvitationsRequest


## Fields

| Field                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Required                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | Example                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Status`                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | [ListInvitationsQueryParamStatus](../../Models/Operations/ListInvitationsQueryParamStatus.md)                                                                                                                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Filter invitations based on their status                                                                                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| `Query`                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Filter invitations based on their `email_address` or `id`                                                                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| `OrderBy`                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Allows to return organizations in a particular order.<br/>At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`.<br/>In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>If you don't use `+` or `-`, then `+` is implied. | pending                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| `Paginated`                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | *bool*                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.                                                                                                                                                                                                                                                                                                                                                   |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| `Limit`                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | *long*                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                                                                                                                                                                                                                                                                           | 20                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| `Offset`                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | *long*                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                                                                                                                                                                                                                                                               | 10                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |

================
File: docs/Models/Operations/ListInvitationsResponse.md
================
# ListInvitationsResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `InvitationList`                                          | List<[Invitation](../../Models/Components/Invitation.md)> | :heavy_minus_sign:                                        | List of invitations                                       |

================
File: docs/Models/Operations/ListJWTTemplatesRequest.md
================
# ListJWTTemplatesRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListJWTTemplatesResponse.md
================
# ListJWTTemplatesResponse


## Fields

| Field                                                       | Type                                                        | Required                                                    | Description                                                 |
| ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- |
| `HttpMeta`                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)     | :heavy_check_mark:                                          | N/A                                                         |
| `JWTTemplateList`                                           | List<[JWTTemplate](../../Models/Components/JWTTemplate.md)> | :heavy_minus_sign:                                          | List of JWT templates                                       |

================
File: docs/Models/Operations/ListOAuthApplicationsRequest.md
================
# ListOAuthApplicationsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListOAuthApplicationsResponse.md
================
# ListOAuthApplicationsResponse


## Fields

| Field                                                             | Type                                                              | Required                                                          | Description                                                       |
| ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- |
| `HttpMeta`                                                        | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)           | :heavy_check_mark:                                                | N/A                                                               |
| `OAuthApplications`                                               | [OAuthApplications](../../Models/Components/OAuthApplications.md) | :heavy_minus_sign:                                                | A list of OAuth applications                                      |

================
File: docs/Models/Operations/ListOrganizationDomainsRequest.md
================
# ListOrganizationDomainsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                                          | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The organization ID.                                                                                                                      |                                                                                                                                           |
| `Verified`                                                                                                                                | *string*                                                                                                                                  | :heavy_minus_sign:                                                                                                                        | Filter domains by their verification status. `true` or `false`                                                                            |                                                                                                                                           |
| `EnrollmentMode`                                                                                                                          | *string*                                                                                                                                  | :heavy_minus_sign:                                                                                                                        | Filter domains by their enrollment mode                                                                                                   |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListOrganizationDomainsResponse.md
================
# ListOrganizationDomainsResponse


## Fields

| Field                                                                                   | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                 | :heavy_check_mark:                                                                      | N/A                                                                                     |
| `OrganizationDomains`                                                                   | [Models.Components.OrganizationDomains](../../Models/Components/OrganizationDomains.md) | :heavy_minus_sign:                                                                      | A list of organization domains                                                          |

================
File: docs/Models/Operations/ListOrganizationInvitationsQueryParamStatus.md
================
# ListOrganizationInvitationsQueryParamStatus

Filter organization invitations based on their status


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |

================
File: docs/Models/Operations/ListOrganizationInvitationsRequest.md
================
# ListOrganizationInvitationsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                                          | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The organization ID.                                                                                                                      | org_12345                                                                                                                                 |
| `Status`                                                                                                                                  | [ListOrganizationInvitationsQueryParamStatus](../../Models/Operations/ListOrganizationInvitationsQueryParamStatus.md)                     | :heavy_minus_sign:                                                                                                                        | Filter organization invitations based on their status                                                                                     |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListOrganizationInvitationsResponse.md
================
# ListOrganizationInvitationsResponse


## Fields

| Field                                                                                           | Type                                                                                            | Required                                                                                        | Description                                                                                     |
| ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                         | :heavy_check_mark:                                                                              | N/A                                                                                             |
| `OrganizationInvitations`                                                                       | [Models.Components.OrganizationInvitations](../../Models/Components/OrganizationInvitations.md) | :heavy_minus_sign:                                                                              | A list of organization invitations                                                              |

================
File: docs/Models/Operations/ListOrganizationMembershipsRequest.md
================
# ListOrganizationMembershipsRequest


## Fields

| Field                                                                                                                                                                                                                                                                                      | Type                                                                                                                                                                                                                                                                                       | Required                                                                                                                                                                                                                                                                                   | Description                                                                                                                                                                                                                                                                                | Example                                                                                                                                                                                                                                                                                    |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `OrganizationId`                                                                                                                                                                                                                                                                           | *string*                                                                                                                                                                                                                                                                                   | :heavy_check_mark:                                                                                                                                                                                                                                                                         | The organization ID.                                                                                                                                                                                                                                                                       | org_789                                                                                                                                                                                                                                                                                    |
| `OrderBy`                                                                                                                                                                                                                                                                                  | *string*                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order."                                                    |                                                                                                                                                                                                                                                                                            |
| `UserId`                                                                                                                                                                                                                                                                                   | List<*string*>                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with the user ids specified. For each user id, the `+` and `-` can be<br/>prepended to the id, which denote whether the respective user id should be included or<br/>excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.           |                                                                                                                                                                                                                                                                                            |
| `EmailAddress`                                                                                                                                                                                                                                                                             | List<*string*>                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.                                                                                                                                                            | +created_at                                                                                                                                                                                                                                                                                |
| `PhoneNumber`                                                                                                                                                                                                                                                                              | List<*string*>                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.                                                                                                                                                                  |                                                                                                                                                                                                                                                                                            |
| `Username`                                                                                                                                                                                                                                                                                 | List<*string*>                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with the specified usernames.<br/>Accepts up to 100 usernames.<br/>Any usernames not found are ignored.                                                                                                                                                                      |                                                                                                                                                                                                                                                                                            |
| `Web3Wallet`                                                                                                                                                                                                                                                                               | List<*string*>                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with the specified web3 wallet addresses.<br/>Accepts up to 100 web3 wallet addresses.<br/>Any web3 wallet addressed not found are ignored.                                                                                                                                  |                                                                                                                                                                                                                                                                                            |
| `Role`                                                                                                                                                                                                                                                                                     | List<*string*>                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.                                                                                                                                                                                          |                                                                                                                                                                                                                                                                                            |
| `Query`                                                                                                                                                                                                                                                                                    | *string*                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users that match the given query.<br/>For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well. |                                                                                                                                                                                                                                                                                            |
| `EmailAddressQuery`                                                                                                                                                                                                                                                                        | *string*                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with emails that match the given query, via case-insensitive partial match.<br/>For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.                                                                                                |                                                                                                                                                                                                                                                                                            |
| `PhoneNumberQuery`                                                                                                                                                                                                                                                                         | *string*                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with phone numbers that match the given query, via case-insensitive partial match.<br/>For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.                                                                                         |                                                                                                                                                                                                                                                                                            |
| `UsernameQuery`                                                                                                                                                                                                                                                                            | *string*                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with usernames that match the given query, via case-insensitive partial match.<br/>For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.                                                                                                |                                                                                                                                                                                                                                                                                            |
| `NameQuery`                                                                                                                                                                                                                                                                                | *string*                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with names that match the given query, via case-insensitive partial match.                                                                                                                                                                                                   |                                                                                                                                                                                                                                                                                            |
| `LastActiveAtBefore`                                                                                                                                                                                                                                                                       | *long*                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users whose last session activity was before the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.                                                                                      | 1700690400000                                                                                                                                                                                                                                                                              |
| `LastActiveAtAfter`                                                                                                                                                                                                                                                                        | *long*                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users whose last session activity was after the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.                                                                                        | 1700690400000                                                                                                                                                                                                                                                                              |
| `CreatedAtBefore`                                                                                                                                                                                                                                                                          | *long*                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users who have been created before the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.                                                                                                          | 1730160000000                                                                                                                                                                                                                                                                              |
| `CreatedAtAfter`                                                                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users who have been created after the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.                                                                                                            | 1730160000000                                                                                                                                                                                                                                                                              |
| `Limit`                                                                                                                                                                                                                                                                                    | *long*                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                                                                                      | 20                                                                                                                                                                                                                                                                                         |
| `Offset`                                                                                                                                                                                                                                                                                   | *long*                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                                                                          | 10                                                                                                                                                                                                                                                                                         |

================
File: docs/Models/Operations/ListOrganizationMembershipsResponse.md
================
# ListOrganizationMembershipsResponse


## Fields

| Field                                                                                           | Type                                                                                            | Required                                                                                        | Description                                                                                     |
| ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                         | :heavy_check_mark:                                                                              | N/A                                                                                             |
| `OrganizationMemberships`                                                                       | [Models.Components.OrganizationMemberships](../../Models/Components/OrganizationMemberships.md) | :heavy_minus_sign:                                                                              | A list of organization memberships                                                              |

================
File: docs/Models/Operations/ListOrganizationsRequest.md
================
# ListOrganizationsRequest


## Fields

| Field                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Required                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Example                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `IncludeMembersCount`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | *bool*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Flag to denote whether the member counts of each organization should be included in the response or not.                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| `IncludeMissingMemberWithElevatedPermissions`                                                                                                                                                                                                                                                                                                                                                                                                                                                              | *bool*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.                                                                                                                                                                                                                                                                                                                                                                             |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| `Query`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Returns organizations with ID, name, or slug that match the given query.<br/>Uses exact match for organization ID and partial match for name and slug.                                                                                                                                                                                                                                                                                                                                                     | false                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| `UserId`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | List<*string*>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Returns organizations with the user ids specified. Any user ids not found are ignored.<br/>For each user id, the `+` and `-` can be prepended to the id, which denote whether the<br/>respective organization should be included or excluded from the result set.                                                                                                                                                                                                                                          | clerk                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| `OrganizationId`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | List<*string*>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Returns organizations with the organization ids specified. Any organization ids not found are ignored.<br/>For each organization id, the `+` and `-` can be prepended to the id, which denote whether the<br/>respective organization should be included or excluded from the result set. Accepts up to 100 organization ids.<br/>Example: ?organization_id=+org_1&organization_id=-org_2                                                                                                                  | -name                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| `OrderBy`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Allows to return organizations in a particular order.<br/>At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`.<br/>In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>If you don't use `+` or `-`, then `+` is implied.<br/>Defaults to `-created_at`. |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| `Limit`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | *long*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                                                                                                                                                                                                                                                                                                      | 20                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| `Offset`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | *long*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                                                                                                                                                                                                                                                                                          | 10                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |

================
File: docs/Models/Operations/ListOrganizationsResponse.md
================
# ListOrganizationsResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `Organizations`                                                             | [Models.Components.Organizations](../../Models/Components/Organizations.md) | :heavy_minus_sign:                                                          | A list of organizations                                                     |

================
File: docs/Models/Operations/ListPendingOrganizationInvitationsRequest.md
================
# ListPendingOrganizationInvitationsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                                          | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The organization ID.                                                                                                                      | org_12345                                                                                                                                 |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListPendingOrganizationInvitationsResponse.md
================
# ListPendingOrganizationInvitationsResponse


## Fields

| Field                                                                                           | Type                                                                                            | Required                                                                                        | Description                                                                                     |
| ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                         | :heavy_check_mark:                                                                              | N/A                                                                                             |
| `OrganizationInvitations`                                                                       | [Models.Components.OrganizationInvitations](../../Models/Components/OrganizationInvitations.md) | :heavy_minus_sign:                                                                              | A list of organization invitations                                                              |

================
File: docs/Models/Operations/ListRedirectURLsRequest.md
================
# ListRedirectURLsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/ListRedirectURLsResponse.md
================
# ListRedirectURLsResponse


## Fields

| Field                                                       | Type                                                        | Required                                                    | Description                                                 |
| ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- |
| `HttpMeta`                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)     | :heavy_check_mark:                                          | N/A                                                         |
| `RedirectURLList`                                           | List<[RedirectURL](../../Models/Components/RedirectURL.md)> | :heavy_minus_sign:                                          | List of Redirect URLs                                       |

================
File: docs/Models/Operations/ListSAMLConnectionsRequest.md
================
# ListSAMLConnectionsRequest


## Fields

| Field                                                                                                                                                                                                                                                                                                       | Type                                                                                                                                                                                                                                                                                                        | Required                                                                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                                                                                                                 | Example                                                                                                                                                                                                                                                                                                     |
| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Limit`                                                                                                                                                                                                                                                                                                     | *long*                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                          | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                                                                                                       | 20                                                                                                                                                                                                                                                                                                          |
| `Offset`                                                                                                                                                                                                                                                                                                    | *long*                                                                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                                                          | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                                                                                           | 10                                                                                                                                                                                                                                                                                                          |
| `Query`                                                                                                                                                                                                                                                                                                     | *string*                                                                                                                                                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                                                                                                                                          | Returns SAML connections that have a name that matches the given query, via case-insensitive partial match.                                                                                                                                                                                                 |                                                                                                                                                                                                                                                                                                             |
| `OrderBy`                                                                                                                                                                                                                                                                                                   | *string*                                                                                                                                                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                                                                                                                                          | Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>By prepending one of those values with + or -,<br/>we can choose to sort in ascending (ASC) or descending (DESC) order.                                                                  |                                                                                                                                                                                                                                                                                                             |
| `OrganizationId`                                                                                                                                                                                                                                                                                            | List<*string*>                                                                                                                                                                                                                                                                                              | :heavy_minus_sign:                                                                                                                                                                                                                                                                                          | Returns SAML connections that have an associated organization ID to the<br/>given organizations.<br/>For each organization id, the `+` and `-` can be<br/>prepended to the id, which denote whether the<br/>respective organization should be included or<br/>excluded from the result set.<br/>Accepts up to 100 organization ids. |                                                                                                                                                                                                                                                                                                             |

================
File: docs/Models/Operations/ListSAMLConnectionsResponse.md
================
# ListSAMLConnectionsResponse


## Fields

| Field                                                         | Type                                                          | Required                                                      | Description                                                   |
| ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------- |
| `HttpMeta`                                                    | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)       | :heavy_check_mark:                                            | N/A                                                           |
| `SAMLConnections`                                             | [SAMLConnections](../../Models/Components/SAMLConnections.md) | :heavy_minus_sign:                                            | A list of SAML Connections                                    |

================
File: docs/Models/Operations/ListWaitlistEntriesQueryParamStatus.md
================
# ListWaitlistEntriesQueryParamStatus

Filter waitlist entries by their status


## Values

| Name        | Value       |
| ----------- | ----------- |
| `Pending`   | pending     |
| `Invited`   | invited     |
| `Completed` | completed   |
| `Rejected`  | rejected    |

================
File: docs/Models/Operations/ListWaitlistEntriesRequest.md
================
# ListWaitlistEntriesRequest


## Fields

| Field                                                                                                                                                                              | Type                                                                                                                                                                               | Required                                                                                                                                                                           | Description                                                                                                                                                                        | Example                                                                                                                                                                            |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Limit`                                                                                                                                                                            | *long*                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                 | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                              | 20                                                                                                                                                                                 |
| `Offset`                                                                                                                                                                           | *long*                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                 | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                  | 10                                                                                                                                                                                 |
| `Query`                                                                                                                                                                            | *string*                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                 | Filter waitlist entries by `email_address` or `id`                                                                                                                                 |                                                                                                                                                                                    |
| `Status`                                                                                                                                                                           | [ListWaitlistEntriesQueryParamStatus](../../Models/Operations/ListWaitlistEntriesQueryParamStatus.md)                                                                              | :heavy_minus_sign:                                                                                                                                                                 | Filter waitlist entries by their status                                                                                                                                            |                                                                                                                                                                                    |
| `OrderBy`                                                                                                                                                                          | *string*                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                 | Specify the order of results. Supported values are:<br/>- `created_at`<br/>- `email_address`<br/>- `invited_at`<br/><br/>Use `+` for ascending or `-` for descending order. Defaults to `-created_at`. |                                                                                                                                                                                    |

================
File: docs/Models/Operations/ListWaitlistEntriesResponse.md
================
# ListWaitlistEntriesResponse


## Fields

| Field                                                                           | Type                                                                            | Required                                                                        | Description                                                                     |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `HttpMeta`                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                         | :heavy_check_mark:                                                              | N/A                                                                             |
| `WaitlistEntries`                                                               | [Models.Components.WaitlistEntries](../../Models/Components/WaitlistEntries.md) | :heavy_minus_sign:                                                              | List of waitlist entries                                                        |

================
File: docs/Models/Operations/LockUserRequest.md
================
# LockUserRequest


## Fields

| Field                      | Type                       | Required                   | Description                | Example                    |
| -------------------------- | -------------------------- | -------------------------- | -------------------------- | -------------------------- |
| `UserId`                   | *string*                   | :heavy_check_mark:         | The ID of the user to lock | user_123456789             |

================
File: docs/Models/Operations/LockUserResponse.md
================
# LockUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/MergeOrganizationMetadataRequest.md
================
# MergeOrganizationMetadataRequest


## Fields

| Field                                                                                                   | Type                                                                                                    | Required                                                                                                | Description                                                                                             | Example                                                                                                 |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                        | *string*                                                                                                | :heavy_check_mark:                                                                                      | The ID of the organization for which metadata will be merged or updated                                 | org_12345                                                                                               |
| `RequestBody`                                                                                           | [MergeOrganizationMetadataRequestBody](../../Models/Operations/MergeOrganizationMetadataRequestBody.md) | :heavy_check_mark:                                                                                      | N/A                                                                                                     |                                                                                                         |

================
File: docs/Models/Operations/MergeOrganizationMetadataRequestBody.md
================
# MergeOrganizationMetadataRequestBody


## Fields

| Field                                                                                                                                         | Type                                                                                                                                          | Required                                                                                                                                      | Description                                                                                                                                   | Example                                                                                                                                       |
| --------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| `PublicMetadata`                                                                                                                              | Dictionary<String, *object*>                                                                                                                  | :heavy_minus_sign:                                                                                                                            | Metadata saved on the organization, that is visible to both your frontend and backend.<br/>The new object will be merged with the existing value. | {<br/>"announcement": "We are opening a new office!"<br/>}                                                                                    |
| `PrivateMetadata`                                                                                                                             | Dictionary<String, *object*>                                                                                                                  | :heavy_minus_sign:                                                                                                                            | Metadata saved on the organization that is only visible to your backend.<br/>The new object will be merged with the existing value.           | {<br/>"internal_use_only": "Future plans discussion."<br/>}                                                                                   |

================
File: docs/Models/Operations/MergeOrganizationMetadataResponse.md
================
# MergeOrganizationMetadataResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Organization`                                          | [Organization](../../Models/Components/Organization.md) | :heavy_minus_sign:                                      | An organization                                         |

================
File: docs/Models/Operations/Object.md
================
# Object


## Values

| Name    | Value   |
| ------- | ------- |
| `Token` | token   |

================
File: docs/Models/Operations/PathParamTemplateType.md
================
# PathParamTemplateType

The type of templates to retrieve (email or SMS)


## Values

| Name    | Value   |
| ------- | ------- |
| `Email` | email   |
| `Sms`   | sms     |

================
File: docs/Models/Operations/PreviewTemplateRequest.md
================
# PreviewTemplateRequest


## Fields

| Field                                                                               | Type                                                                                | Required                                                                            | Description                                                                         | Example                                                                             |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `TemplateType`                                                                      | *string*                                                                            | :heavy_check_mark:                                                                  | The type of template to preview                                                     | email                                                                               |
| `Slug`                                                                              | *string*                                                                            | :heavy_check_mark:                                                                  | The slug of the template to preview                                                 | welcome-email                                                                       |
| `RequestBody`                                                                       | [PreviewTemplateRequestBody](../../Models/Operations/PreviewTemplateRequestBody.md) | :heavy_minus_sign:                                                                  | Required parameters                                                                 |                                                                                     |

================
File: docs/Models/Operations/PreviewTemplateRequestBody.md
================
# PreviewTemplateRequestBody

Required parameters


## Fields

| Field                                                                                                                                                                                      | Type                                                                                                                                                                                       | Required                                                                                                                                                                                   | Description                                                                                                                                                                                | Example                                                                                                                                                                                    |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `Subject`                                                                                                                                                                                  | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The email subject.<br/>Applicable only to email templates.                                                                                                                                 | Welcome to our service!                                                                                                                                                                    |
| `Body`                                                                                                                                                                                     | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The template body before variable interpolation                                                                                                                                            | Hi, thank you for joining our service.                                                                                                                                                     |
| `FromEmailName`                                                                                                                                                                            | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The local part of the From email address that will be used for emails.<br/>For example, in the address 'hello@example.com', the local part is 'hello'.<br/>Applicable only to email templates. | hello                                                                                                                                                                                      |
| `ReplyToEmailName`                                                                                                                                                                         | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The local part of the Reply To email address that will be used for emails.<br/>For example, in the address 'hello@example.com', the local part is 'hello'.<br/>Applicable only to email templates. | support                                                                                                                                                                                    |

================
File: docs/Models/Operations/PreviewTemplateResponse.md
================
# PreviewTemplateResponse


## Fields

| Field                                                                                 | Type                                                                                  | Required                                                                              | Description                                                                           |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                            | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                               | :heavy_check_mark:                                                                    | N/A                                                                                   |
| `Object`                                                                              | [PreviewTemplateResponseBody](../../Models/Operations/PreviewTemplateResponseBody.md) | :heavy_minus_sign:                                                                    | OK                                                                                    |

================
File: docs/Models/Operations/PreviewTemplateResponseBody.md
================
# PreviewTemplateResponseBody

OK


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Operations/Provider.md
================
# Provider

The IdP provider of the connection.


## Values

| Name            | Value           |
| --------------- | --------------- |
| `SamlCustom`    | saml_custom     |
| `SamlOkta`      | saml_okta       |
| `SamlGoogle`    | saml_google     |
| `SamlMicrosoft` | saml_microsoft  |

================
File: docs/Models/Operations/QueryParamStatus.md
================
# QueryParamStatus

Filter organization invitations based on their status


## Values

| Name       | Value      |
| ---------- | ---------- |
| `Pending`  | pending    |
| `Accepted` | accepted   |
| `Revoked`  | revoked    |

================
File: docs/Models/Operations/RequestBody.md
================
# RequestBody


## Fields

| Field                                                                                                                                                                                                                                        | Type                                                                                                                                                                                                                                         | Required                                                                                                                                                                                                                                     | Description                                                                                                                                                                                                                                  |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `EmailAddress`                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                     | :heavy_check_mark:                                                                                                                                                                                                                           | The email address the invitation will be sent to                                                                                                                                                                                             |
| `PublicMetadata`                                                                                                                                                                                                                             | Dictionary<String, *object*>                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                           | Metadata that will be attached to the newly created invitation.<br/>The value of this property should be a well-formed JSON object.<br/>Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata. |
| `RedirectUrl`                                                                                                                                                                                                                                | *string*                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                           | The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).         |
| `Notify`                                                                                                                                                                                                                                     | *bool*                                                                                                                                                                                                                                       | :heavy_minus_sign:                                                                                                                                                                                                                           | Optional flag which denotes whether an email invitation should be sent to the given email address.<br/>Defaults to true.                                                                                                                     |
| `IgnoreExisting`                                                                                                                                                                                                                             | *bool*                                                                                                                                                                                                                                       | :heavy_minus_sign:                                                                                                                                                                                                                           | Whether an invitation should be created if there is already an existing invitation for this email<br/>address, or it's claimed by another user.                                                                                              |
| `ExpiresInDays`                                                                                                                                                                                                                              | *long*                                                                                                                                                                                                                                       | :heavy_minus_sign:                                                                                                                                                                                                                           | The number of days the invitation will be valid for. By default, the invitation expires after 30 days.                                                                                                                                       |
| `TemplateSlug`                                                                                                                                                                                                                               | [CreateBulkInvitationsTemplateSlug](../../Models/Operations/CreateBulkInvitationsTemplateSlug.md)                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                           | The slug of the email template to use for the invitation email.                                                                                                                                                                              |

================
File: docs/Models/Operations/ResponseBody.md
================
# ResponseBody


## Fields

| Field                                                                              | Type                                                                               | Required                                                                           | Description                                                                        | Example                                                                            |
| ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
| `Object`                                                                           | *string*                                                                           | :heavy_minus_sign:                                                                 | N/A                                                                                | oauth_access_token                                                                 |
| `ExternalAccountId`                                                                | *string*                                                                           | :heavy_minus_sign:                                                                 | External account ID                                                                | external_account_456                                                               |
| `ProviderUserId`                                                                   | *string*                                                                           | :heavy_minus_sign:                                                                 | The unique ID of the user in the external provider's system                        | provider_user_789                                                                  |
| `Token`                                                                            | *string*                                                                           | :heavy_minus_sign:                                                                 | The access token                                                                   | access_token_123                                                                   |
| `Provider`                                                                         | *string*                                                                           | :heavy_minus_sign:                                                                 | The ID of the provider                                                             | oauth_google                                                                       |
| `PublicMetadata`                                                                   | Dictionary<String, *object*>                                                       | :heavy_minus_sign:                                                                 | N/A                                                                                | {}                                                                                 |
| `Label`                                                                            | *string*                                                                           | :heavy_minus_sign:                                                                 | N/A                                                                                | Primary account                                                                    |
| `Scopes`                                                                           | List<*string*>                                                                     | :heavy_minus_sign:                                                                 | The list of scopes that the token is valid for.<br/>Only present for OAuth 2.0 tokens. | [<br/>"email",<br/>"profile"<br/>]                                                 |
| `TokenSecret`                                                                      | *string*                                                                           | :heavy_minus_sign:                                                                 | The token secret. Only present for OAuth 1.0 tokens.                               | token_secret_xyz                                                                   |
| `ExpiresAt`                                                                        | *long*                                                                             | :heavy_minus_sign:                                                                 | Unix timestamp of the access token expiration.                                     |                                                                                    |

================
File: docs/Models/Operations/RevertTemplatePathParamTemplateType.md
================
# RevertTemplatePathParamTemplateType

The type of template to revert


## Values

| Name    | Value   |
| ------- | ------- |
| `Email` | email   |
| `Sms`   | sms     |

================
File: docs/Models/Operations/RevertTemplateRequest.md
================
# RevertTemplateRequest


## Fields

| Field                                                                                                 | Type                                                                                                  | Required                                                                                              | Description                                                                                           | Example                                                                                               |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                        | [RevertTemplatePathParamTemplateType](../../Models/Operations/RevertTemplatePathParamTemplateType.md) | :heavy_check_mark:                                                                                    | The type of template to revert                                                                        | email                                                                                                 |
| `Slug`                                                                                                | *string*                                                                                              | :heavy_check_mark:                                                                                    | The slug of the template to revert                                                                    | welcome-email                                                                                         |

================
File: docs/Models/Operations/RevertTemplateResponse.md
================
# RevertTemplateResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Template`                                              | [Template](../../Models/Components/Template.md)         | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/RevokeActorTokenRequest.md
================
# RevokeActorTokenRequest


## Fields

| Field                                    | Type                                     | Required                                 | Description                              | Example                                  |
| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| `ActorTokenId`                           | *string*                                 | :heavy_check_mark:                       | The ID of the actor token to be revoked. | act_tok_abcdefghijk                      |

================
File: docs/Models/Operations/RevokeActorTokenResponse.md
================
# RevokeActorTokenResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `ActorToken`                                            | [ActorToken](../../Models/Components/ActorToken.md)     | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/RevokeInvitationRequest.md
================
# RevokeInvitationRequest


## Fields

| Field                                  | Type                                   | Required                               | Description                            | Example                                |
| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |
| `InvitationId`                         | *string*                               | :heavy_check_mark:                     | The ID of the invitation to be revoked | inv_123                                |

================
File: docs/Models/Operations/RevokeInvitationResponse.md
================
# RevokeInvitationResponse


## Fields

| Field                                                             | Type                                                              | Required                                                          | Description                                                       |
| ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- |
| `HttpMeta`                                                        | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)           | :heavy_check_mark:                                                | N/A                                                               |
| `InvitationRevoked`                                               | [InvitationRevoked](../../Models/Components/InvitationRevoked.md) | :heavy_minus_sign:                                                | Success                                                           |

================
File: docs/Models/Operations/RevokeOrganizationInvitationRequest.md
================
# RevokeOrganizationInvitationRequest


## Fields

| Field                                                                                                         | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The organization ID.                                                                                          | org_123456                                                                                                    |
| `InvitationId`                                                                                                | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The organization invitation ID.                                                                               | inv_123456                                                                                                    |
| `RequestBody`                                                                                                 | [RevokeOrganizationInvitationRequestBody](../../Models/Operations/RevokeOrganizationInvitationRequestBody.md) | :heavy_minus_sign:                                                                                            | N/A                                                                                                           |                                                                                                               |

================
File: docs/Models/Operations/RevokeOrganizationInvitationRequestBody.md
================
# RevokeOrganizationInvitationRequestBody


## Fields

| Field                                                                                         | Type                                                                                          | Required                                                                                      | Description                                                                                   | Example                                                                                       |
| --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| `RequestingUserId`                                                                            | *string*                                                                                      | :heavy_minus_sign:                                                                            | The ID of the user that revokes the invitation.<br/>Must be an administrator in the organization. | usr_12345                                                                                     |

================
File: docs/Models/Operations/RevokeOrganizationInvitationResponse.md
================
# RevokeOrganizationInvitationResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationInvitation`                                                    | [OrganizationInvitation](../../Models/Components/OrganizationInvitation.md) | :heavy_minus_sign:                                                          | An organization invitation                                                  |

================
File: docs/Models/Operations/RevokeSessionRequest.md
================
# RevokeSessionRequest


## Fields

| Field                 | Type                  | Required              | Description           | Example               |
| --------------------- | --------------------- | --------------------- | --------------------- | --------------------- |
| `SessionId`           | *string*              | :heavy_check_mark:    | The ID of the session | sess_1234567890abcdef |

================
File: docs/Models/Operations/RevokeSessionResponse.md
================
# RevokeSessionResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Session`                                               | [Session](../../Models/Components/Session.md)           | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/RevokeSignInTokenRequest.md
================
# RevokeSignInTokenRequest


## Fields

| Field                                     | Type                                      | Required                                  | Description                               | Example                                   |
| ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- |
| `SignInTokenId`                           | *string*                                  | :heavy_check_mark:                        | The ID of the sign-in token to be revoked | tok_test_1234567890                       |

================
File: docs/Models/Operations/RevokeSignInTokenResponse.md
================
# RevokeSignInTokenResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `SignInToken`                                           | [SignInToken](../../Models/Components/SignInToken.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/RotateOAuthApplicationSecretRequest.md
================
# RotateOAuthApplicationSecretRequest


## Fields

| Field                                                                 | Type                                                                  | Required                                                              | Description                                                           | Example                                                               |
| --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- |
| `OauthApplicationId`                                                  | *string*                                                              | :heavy_check_mark:                                                    | The ID of the OAuth application for which to rotate the client secret | oauth_application_12345                                               |

================
File: docs/Models/Operations/RotateOAuthApplicationSecretResponse.md
================
# RotateOAuthApplicationSecretResponse


## Fields

| Field                                                                               | Type                                                                                | Required                                                                            | Description                                                                         |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `HttpMeta`                                                                          | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                             | :heavy_check_mark:                                                                  | N/A                                                                                 |
| `OAuthApplicationWithSecret`                                                        | [OAuthApplicationWithSecret](../../Models/Components/OAuthApplicationWithSecret.md) | :heavy_minus_sign:                                                                  | An OAuth application with client secret                                             |

================
File: docs/Models/Operations/SetUserProfileImageRequest.md
================
# SetUserProfileImageRequest


## Fields

| Field                                                                                       | Type                                                                                        | Required                                                                                    | Description                                                                                 | Example                                                                                     |
| ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |
| `UserId`                                                                                    | *string*                                                                                    | :heavy_check_mark:                                                                          | The ID of the user to update the profile image for                                          | usr_test123                                                                                 |
| `RequestBody`                                                                               | [SetUserProfileImageRequestBody](../../Models/Operations/SetUserProfileImageRequestBody.md) | :heavy_check_mark:                                                                          | N/A                                                                                         |                                                                                             |

================
File: docs/Models/Operations/SetUserProfileImageRequestBody.md
================
# SetUserProfileImageRequestBody


## Fields

| Field                                   | Type                                    | Required                                | Description                             |
| --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- |
| `File`                                  | [File](../../Models/Operations/File.md) | :heavy_minus_sign:                      | N/A                                     |

================
File: docs/Models/Operations/SetUserProfileImageResponse.md
================
# SetUserProfileImageResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/Status.md
================
# Status

Filter sessions by the provided status


## Values

| Name        | Value       |
| ----------- | ----------- |
| `Abandoned` | abandoned   |
| `Active`    | active      |
| `Ended`     | ended       |
| `Expired`   | expired     |
| `Removed`   | removed     |
| `Replaced`  | replaced    |
| `Revoked`   | revoked     |

================
File: docs/Models/Operations/TemplateSlug.md
================
# TemplateSlug

The slug of the email template to use for the invitation email.


## Values

| Name                 | Value                |
| -------------------- | -------------------- |
| `Invitation`         | invitation           |
| `WaitlistInvitation` | waitlist_invitation  |

================
File: docs/Models/Operations/TemplateType.md
================
# TemplateType

The type of templates to list (email or SMS)


## Values

| Name    | Value   |
| ------- | ------- |
| `Email` | email   |
| `Sms`   | sms     |

================
File: docs/Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.md
================
# ToggleTemplateDeliveryPathParamTemplateType

The type of template to toggle delivery for


## Values

| Name    | Value   |
| ------- | ------- |
| `Email` | email   |
| `Sms`   | sms     |

================
File: docs/Models/Operations/ToggleTemplateDeliveryRequest.md
================
# ToggleTemplateDeliveryRequest


## Fields

| Field                                                                                                                 | Type                                                                                                                  | Required                                                                                                              | Description                                                                                                           | Example                                                                                                               |
| --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                                        | [ToggleTemplateDeliveryPathParamTemplateType](../../Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.md) | :heavy_check_mark:                                                                                                    | The type of template to toggle delivery for                                                                           | email                                                                                                                 |
| `Slug`                                                                                                                | *string*                                                                                                              | :heavy_check_mark:                                                                                                    | The slug of the template for which to toggle delivery                                                                 | welcome-email                                                                                                         |
| `RequestBody`                                                                                                         | [ToggleTemplateDeliveryRequestBody](../../Models/Operations/ToggleTemplateDeliveryRequestBody.md)                     | :heavy_minus_sign:                                                                                                    | N/A                                                                                                                   |                                                                                                                       |

================
File: docs/Models/Operations/ToggleTemplateDeliveryRequestBody.md
================
# ToggleTemplateDeliveryRequestBody


## Fields

| Field                                                                             | Type                                                                              | Required                                                                          | Description                                                                       | Example                                                                           |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `DeliveredByClerk`                                                                | *bool*                                                                            | :heavy_minus_sign:                                                                | Whether Clerk should deliver emails or SMS messages based on the current template | true                                                                              |

================
File: docs/Models/Operations/ToggleTemplateDeliveryResponse.md
================
# ToggleTemplateDeliveryResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Template`                                              | [Template](../../Models/Components/Template.md)         | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UnbanUserRequest.md
================
# UnbanUserRequest


## Fields

| Field                       | Type                        | Required                    | Description                 | Example                     |
| --------------------------- | --------------------------- | --------------------------- | --------------------------- | --------------------------- |
| `UserId`                    | *string*                    | :heavy_check_mark:          | The ID of the user to unban | user_12345                  |

================
File: docs/Models/Operations/UnbanUserResponse.md
================
# UnbanUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UnlockUserRequest.md
================
# UnlockUserRequest


## Fields

| Field                        | Type                         | Required                     | Description                  | Example                      |
| ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |
| `UserId`                     | *string*                     | :heavy_check_mark:           | The ID of the user to unlock | user_12345                   |

================
File: docs/Models/Operations/UnlockUserResponse.md
================
# UnlockUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UpdateDomainRequest.md
================
# UpdateDomainRequest


## Fields

| Field                                                                         | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `DomainId`                                                                    | *string*                                                                      | :heavy_check_mark:                                                            | The ID of the domain that will be updated.                                    | domain_12345                                                                  |
| `RequestBody`                                                                 | [UpdateDomainRequestBody](../../Models/Operations/UpdateDomainRequestBody.md) | :heavy_check_mark:                                                            | N/A                                                                           |                                                                               |

================
File: docs/Models/Operations/UpdateDomainRequestBody.md
================
# UpdateDomainRequestBody


## Fields

| Field                                                                                                                                                                                                                                                           | Type                                                                                                                                                                                                                                                            | Required                                                                                                                                                                                                                                                        | Description                                                                                                                                                                                                                                                     | Example                                                                                                                                                                                                                                                         |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                                                                                                                                                          | *string*                                                                                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                                                                                              | The new domain name. For development instances, can contain the port,<br/>i.e `myhostname:3000`. For production instances, must be a valid FQDN,<br/>i.e `mysite.com`. Cannot contain protocol scheme.                                                          | example.com                                                                                                                                                                                                                                                     |
| `ProxyUrl`                                                                                                                                                                                                                                                      | *string*                                                                                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                                                                                              | The full URL of the proxy that will forward requests to Clerk's Frontend API.<br/>Can only be updated for production instances.                                                                                                                                 | http://proxy.example.com                                                                                                                                                                                                                                        |
| `IsSecondary`                                                                                                                                                                                                                                                   | *bool*                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                              | Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and<br/>will be stored as part of the domain. This is useful for supporting multiple apps (one primary and<br/>multiple secondaries) on the same root domain (eTLD+1). |                                                                                                                                                                                                                                                                 |

================
File: docs/Models/Operations/UpdateDomainResponse.md
================
# UpdateDomainResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Domain`                                                | [Domain](../../Models/Components/Domain.md)             | :heavy_minus_sign:                                      | A domain                                                |

================
File: docs/Models/Operations/UpdateEmailAddressRequest.md
================
# UpdateEmailAddressRequest


## Fields

| Field                                                                                     | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `EmailAddressId`                                                                          | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the email address to update                                                     | email_address_id_example                                                                  |
| `RequestBody`                                                                             | [UpdateEmailAddressRequestBody](../../Models/Operations/UpdateEmailAddressRequestBody.md) | :heavy_minus_sign:                                                                        | N/A                                                                                       |                                                                                           |

================
File: docs/Models/Operations/UpdateEmailAddressRequestBody.md
================
# UpdateEmailAddressRequestBody


## Fields

| Field                                                             | Type                                                              | Required                                                          | Description                                                       | Example                                                           |
| ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- | ----------------------------------------------------------------- |
| `Verified`                                                        | *bool*                                                            | :heavy_minus_sign:                                                | The email address will be marked as verified.                     | false                                                             |
| `Primary`                                                         | *bool*                                                            | :heavy_minus_sign:                                                | Set this email address as the primary email address for the user. | true                                                              |

================
File: docs/Models/Operations/UpdateEmailAddressResponse.md
================
# UpdateEmailAddressResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `EmailAddress`                                          | [EmailAddress](../../Models/Components/EmailAddress.md) | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UpdateInstanceAuthConfigRequestBody.md
================
# UpdateInstanceAuthConfigRequestBody


## Fields

| Field                                                                                                                                                                                                                                                                    | Type                                                                                                                                                                                                                                                                     | Required                                                                                                                                                                                                                                                                 | Description                                                                                                                                                                                                                                                              | Example                                                                                                                                                                                                                                                                  |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `RestrictedToAllowlist`                                                                                                                                                                                                                                                  | *bool*                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                       | Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist.                                                                                                                                                                 | false                                                                                                                                                                                                                                                                    |
| `FromEmailAddress`                                                                                                                                                                                                                                                       | *string*                                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                                       | The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent.<br/>Only alphanumeric values are allowed.<br/>Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`). | noreply                                                                                                                                                                                                                                                                  |
| `ProgressiveSignUp`                                                                                                                                                                                                                                                      | *bool*                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                       | Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info.                                                                                                                                  | true                                                                                                                                                                                                                                                                     |
| `EnhancedEmailDeliverability`                                                                                                                                                                                                                                            | *bool*                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                       | The "enhanced_email_deliverability" feature will send emails from "verifications@clerk.dev" instead of your domain.<br/>This can be helpful if you do not have a high domain reputation.                                                                                 | true                                                                                                                                                                                                                                                                     |
| `TestMode`                                                                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                                                                                                       | Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.<br/>Defaults to true for development instances.                                                                                                                         | true                                                                                                                                                                                                                                                                     |

================
File: docs/Models/Operations/UpdateInstanceAuthConfigResponse.md
================
# UpdateInstanceAuthConfigResponse


## Fields

| Field                                                                             | Type                                                                              | Required                                                                          | Description                                                                       |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `HttpMeta`                                                                        | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                           | :heavy_check_mark:                                                                | N/A                                                                               |
| `InstanceSettings`                                                                | [Models.Components.InstanceSettings](../../Models/Components/InstanceSettings.md) | :heavy_minus_sign:                                                                | InstanceSettings Server API                                                       |

================
File: docs/Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.md
================
# UpdateInstanceOrganizationSettingsRequestBody


## Fields

| Field                                                                                                                                        | Type                                                                                                                                         | Required                                                                                                                                     | Description                                                                                                                                  | Example                                                                                                                                      |
| -------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| `Enabled`                                                                                                                                    | *bool*                                                                                                                                       | :heavy_minus_sign:                                                                                                                           | N/A                                                                                                                                          | true                                                                                                                                         |
| `MaxAllowedMemberships`                                                                                                                      | *long*                                                                                                                                       | :heavy_minus_sign:                                                                                                                           | N/A                                                                                                                                          | 10                                                                                                                                           |
| `AdminDeleteEnabled`                                                                                                                         | *bool*                                                                                                                                       | :heavy_minus_sign:                                                                                                                           | N/A                                                                                                                                          | false                                                                                                                                        |
| `DomainsEnabled`                                                                                                                             | *bool*                                                                                                                                       | :heavy_minus_sign:                                                                                                                           | N/A                                                                                                                                          | true                                                                                                                                         |
| `DomainsEnrollmentModes`                                                                                                                     | List<*string*>                                                                                                                               | :heavy_minus_sign:                                                                                                                           | Specify which enrollment modes to enable for your Organization Domains.<br/>Supported modes are 'automatic_invitation' & 'automatic_suggestion'. | [<br/>"automatic_invitation",<br/>"automatic_suggestion"<br/>]                                                                               |
| `CreatorRoleId`                                                                                                                              | *string*                                                                                                                                     | :heavy_minus_sign:                                                                                                                           | Specify what the default organization role is for an organization creator.                                                                   | creator_role                                                                                                                                 |
| `DomainsDefaultRoleId`                                                                                                                       | *string*                                                                                                                                     | :heavy_minus_sign:                                                                                                                           | Specify what the default organization role is for the organization domains.                                                                  | member_role                                                                                                                                  |

================
File: docs/Models/Operations/UpdateInstanceOrganizationSettingsResponse.md
================
# UpdateInstanceOrganizationSettingsResponse


## Fields

| Field                                                                   | Type                                                                    | Required                                                                | Description                                                             |
| ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| `HttpMeta`                                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                 | :heavy_check_mark:                                                      | N/A                                                                     |
| `OrganizationSettings`                                                  | [OrganizationSettings](../../Models/Components/OrganizationSettings.md) | :heavy_minus_sign:                                                      | Success                                                                 |

================
File: docs/Models/Operations/UpdateInstanceRequestBody.md
================
# UpdateInstanceRequestBody


## Fields

| Field                                                                                                                                                                                                                                                                                                                                                                                             | Type                                                                                                                                                                                                                                                                                                                                                                                              | Required                                                                                                                                                                                                                                                                                                                                                                                          | Description                                                                                                                                                                                                                                                                                                                                                                                       | Example                                                                                                                                                                                                                                                                                                                                                                                           |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `TestMode`                                                                                                                                                                                                                                                                                                                                                                                        | *bool*                                                                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.<br/>Defaults to true for development instances.                                                                                                                                                                                                                                                  | true                                                                                                                                                                                                                                                                                                                                                                                              |
| `Hibp`                                                                                                                                                                                                                                                                                                                                                                                            | *bool*                                                                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | Whether the instance should be using the HIBP service to check passwords for breaches                                                                                                                                                                                                                                                                                                             | false                                                                                                                                                                                                                                                                                                                                                                                             |
| `EnhancedEmailDeliverability`                                                                                                                                                                                                                                                                                                                                                                     | *bool*                                                                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | The "enhanced_email_deliverability" feature will send emails from "verifications@clerk.dev" instead of your domain.<br/>This can be helpful if you do not have a high domain reputation.                                                                                                                                                                                                          | true                                                                                                                                                                                                                                                                                                                                                                                              |
| `SupportEmail`                                                                                                                                                                                                                                                                                                                                                                                    | *string*                                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | N/A                                                                                                                                                                                                                                                                                                                                                                                               | support@example.com                                                                                                                                                                                                                                                                                                                                                                               |
| `ClerkJsVersion`                                                                                                                                                                                                                                                                                                                                                                                  | *string*                                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | N/A                                                                                                                                                                                                                                                                                                                                                                                               | 2.3.1                                                                                                                                                                                                                                                                                                                                                                                             |
| `DevelopmentOrigin`                                                                                                                                                                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | N/A                                                                                                                                                                                                                                                                                                                                                                                               | http://localhost:3000                                                                                                                                                                                                                                                                                                                                                                             |
| `AllowedOrigins`                                                                                                                                                                                                                                                                                                                                                                                  | List<*string*>                                                                                                                                                                                                                                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value.<br/>For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost. | [<br/>"http://localhost:3000",<br/>"chrome-extension://extension_uiid",<br/>"capacitor://localhost"<br/>]                                                                                                                                                                                                                                                                                         |
| ~~`CookielessDev`~~                                                                                                                                                                                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Whether the instance should operate in cookieless development mode (i.e. without third-party cookies).<br/>Deprecated: Please use `url_based_session_syncing` instead.                                                                                           | false                                                                                                                                                                                                                                                                                                                                                                                             |
| `UrlBasedSessionSyncing`                                                                                                                                                                                                                                                                                                                                                                          | *bool*                                                                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).                                                                                                                                                                                                                                                                                 | true                                                                                                                                                                                                                                                                                                                                                                                              |

================
File: docs/Models/Operations/UpdateInstanceResponse.md
================
# UpdateInstanceResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |

================
File: docs/Models/Operations/UpdateInstanceRestrictionsRequestBody.md
================
# UpdateInstanceRestrictionsRequestBody


## Fields

| Field                         | Type                          | Required                      | Description                   | Example                       |
| ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- |
| `Allowlist`                   | *bool*                        | :heavy_minus_sign:            | N/A                           | false                         |
| `Blocklist`                   | *bool*                        | :heavy_minus_sign:            | N/A                           | true                          |
| `BlockEmailSubaddresses`      | *bool*                        | :heavy_minus_sign:            | N/A                           | true                          |
| `BlockDisposableEmailDomains` | *bool*                        | :heavy_minus_sign:            | N/A                           | true                          |
| `IgnoreDotsForGmailAddresses` | *bool*                        | :heavy_minus_sign:            | N/A                           | false                         |

================
File: docs/Models/Operations/UpdateInstanceRestrictionsResponse.md
================
# UpdateInstanceRestrictionsResponse


## Fields

| Field                                                                   | Type                                                                    | Required                                                                | Description                                                             |
| ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| `HttpMeta`                                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                 | :heavy_check_mark:                                                      | N/A                                                                     |
| `InstanceRestrictions`                                                  | [InstanceRestrictions](../../Models/Components/InstanceRestrictions.md) | :heavy_minus_sign:                                                      | Success                                                                 |

================
File: docs/Models/Operations/UpdateJWTTemplateClaims.md
================
# UpdateJWTTemplateClaims

JWT template claims in JSON format


## Fields

| Field       | Type        | Required    | Description |
| ----------- | ----------- | ----------- | ----------- |

================
File: docs/Models/Operations/UpdateJWTTemplateRequest.md
================
# UpdateJWTTemplateRequest


## Fields

| Field                                                                                   | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `TemplateId`                                                                            | *string*                                                                                | :heavy_check_mark:                                                                      | The ID of the JWT template to update                                                    |
| `RequestBody`                                                                           | [UpdateJWTTemplateRequestBody](../../Models/Operations/UpdateJWTTemplateRequestBody.md) | :heavy_minus_sign:                                                                      | N/A                                                                                     |

================
File: docs/Models/Operations/UpdateJWTTemplateRequestBody.md
================
# UpdateJWTTemplateRequestBody


## Fields

| Field                                                                                                | Type                                                                                                 | Required                                                                                             | Description                                                                                          |
| ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- |
| `Name`                                                                                               | *string*                                                                                             | :heavy_check_mark:                                                                                   | JWT template name                                                                                    |
| `Claims`                                                                                             | [UpdateJWTTemplateClaims](../../Models/Operations/UpdateJWTTemplateClaims.md)                        | :heavy_check_mark:                                                                                   | JWT template claims in JSON format                                                                   |
| `Lifetime`                                                                                           | *double*                                                                                             | :heavy_minus_sign:                                                                                   | JWT token lifetime                                                                                   |
| `AllowedClockSkew`                                                                                   | *double*                                                                                             | :heavy_minus_sign:                                                                                   | JWT token allowed clock skew                                                                         |
| `CustomSigningKey`                                                                                   | *bool*                                                                                               | :heavy_minus_sign:                                                                                   | Whether a custom signing key/algorithm is also provided for this template                            |
| `SigningAlgorithm`                                                                                   | *string*                                                                                             | :heavy_minus_sign:                                                                                   | The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.   |
| `SigningKey`                                                                                         | *string*                                                                                             | :heavy_minus_sign:                                                                                   | The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`. |

================
File: docs/Models/Operations/UpdateJWTTemplateResponse.md
================
# UpdateJWTTemplateResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `JWTTemplate`                                           | [JWTTemplate](../../Models/Components/JWTTemplate.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UpdateOAuthApplicationRequest.md
================
# UpdateOAuthApplicationRequest


## Fields

| Field                                                                                             | Type                                                                                              | Required                                                                                          | Description                                                                                       | Example                                                                                           |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `OauthApplicationId`                                                                              | *string*                                                                                          | :heavy_check_mark:                                                                                | The ID of the OAuth application to update                                                         | oauth_app_67890                                                                                   |
| `RequestBody`                                                                                     | [UpdateOAuthApplicationRequestBody](../../Models/Operations/UpdateOAuthApplicationRequestBody.md) | :heavy_check_mark:                                                                                | N/A                                                                                               |                                                                                                   |

================
File: docs/Models/Operations/UpdateOAuthApplicationRequestBody.md
================
# UpdateOAuthApplicationRequestBody


## Fields

| Field                                                                                                                                                                                                                                                                  | Type                                                                                                                                                                                                                                                                   | Required                                                                                                                                                                                                                                                               | Description                                                                                                                                                                                                                                                            | Example                                                                                                                                                                                                                                                                |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                                                                                                                                                                 | *string*                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                     | The new name of the OAuth application.<br/>Max length: 256                                                                                                                                                                                                             | Updated OAuth App Name                                                                                                                                                                                                                                                 |
| `RedirectUris`                                                                                                                                                                                                                                                         | List<*string*>                                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                                     | An array of redirect URIs of the new OAuth application                                                                                                                                                                                                                 |                                                                                                                                                                                                                                                                        |
| ~~`CallbackUrl`~~                                                                                                                                                                                                                                                      | *string*                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                     | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>The new callback URL of the OAuth application                                                                                         | https://example.com/oauth/callback                                                                                                                                                                                                                                     |
| `Scopes`                                                                                                                                                                                                                                                               | *string*                                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                     | Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces. | profile email public_metadata private_metadata                                                                                                                                                                                                                         |
| `Public`                                                                                                                                                                                                                                                               | *bool*                                                                                                                                                                                                                                                                 | :heavy_minus_sign:                                                                                                                                                                                                                                                     | If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.                                                                                                                                                                             |                                                                                                                                                                                                                                                                        |

================
File: docs/Models/Operations/UpdateOAuthApplicationResponse.md
================
# UpdateOAuthApplicationResponse


## Fields

| Field                                                           | Type                                                            | Required                                                        | Description                                                     |
| --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------- |
| `HttpMeta`                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)         | :heavy_check_mark:                                              | N/A                                                             |
| `OAuthApplication`                                              | [OAuthApplication](../../Models/Components/OAuthApplication.md) | :heavy_minus_sign:                                              | An OAuth application                                            |

================
File: docs/Models/Operations/UpdateOrganizationDomainRequest.md
================
# UpdateOrganizationDomainRequest


## Fields

| Field                                                                                                 | Type                                                                                                  | Required                                                                                              | Description                                                                                           |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                      | *string*                                                                                              | :heavy_check_mark:                                                                                    | The ID of the organization the domain belongs to                                                      |
| `DomainId`                                                                                            | *string*                                                                                              | :heavy_check_mark:                                                                                    | The ID of the domain                                                                                  |
| `RequestBody`                                                                                         | [UpdateOrganizationDomainRequestBody](../../Models/Operations/UpdateOrganizationDomainRequestBody.md) | :heavy_check_mark:                                                                                    | N/A                                                                                                   |

================
File: docs/Models/Operations/UpdateOrganizationDomainRequestBody.md
================
# UpdateOrganizationDomainRequestBody


## Fields

| Field                                                                                                                     | Type                                                                                                                      | Required                                                                                                                  | Description                                                                                                               |
| ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |
| `EnrollmentMode`                                                                                                          | *string*                                                                                                                  | :heavy_minus_sign:                                                                                                        | The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation` |
| `Verified`                                                                                                                | *bool*                                                                                                                    | :heavy_minus_sign:                                                                                                        | The status of the domain's verification                                                                                   |

================
File: docs/Models/Operations/UpdateOrganizationDomainResponse.md
================
# UpdateOrganizationDomainResponse


## Fields

| Field                                                               | Type                                                                | Required                                                            | Description                                                         |
| ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `HttpMeta`                                                          | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)             | :heavy_check_mark:                                                  | N/A                                                                 |
| `OrganizationDomain`                                                | [OrganizationDomain](../../Models/Components/OrganizationDomain.md) | :heavy_minus_sign:                                                  | An organization domain                                              |

================
File: docs/Models/Operations/UpdateOrganizationMembershipMetadataRequest.md
================
# UpdateOrganizationMembershipMetadataRequest


## Fields

| Field                                                                                                                         | Type                                                                                                                          | Required                                                                                                                      | Description                                                                                                                   | Example                                                                                                                       |
| ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                              | *string*                                                                                                                      | :heavy_check_mark:                                                                                                            | The ID of the organization the membership belongs to                                                                          | org_123456                                                                                                                    |
| `UserId`                                                                                                                      | *string*                                                                                                                      | :heavy_check_mark:                                                                                                            | The ID of the user that this membership belongs to                                                                            | user_654321                                                                                                                   |
| `RequestBody`                                                                                                                 | [UpdateOrganizationMembershipMetadataRequestBody](../../Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.md) | :heavy_minus_sign:                                                                                                            | N/A                                                                                                                           |                                                                                                                               |

================
File: docs/Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.md
================
# UpdateOrganizationMembershipMetadataRequestBody


## Fields

| Field                                                                                                                                                    | Type                                                                                                                                                     | Required                                                                                                                                                 | Description                                                                                                                                              | Example                                                                                                                                                  |
| -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `PublicMetadata`                                                                                                                                         | Dictionary<String, *object*>                                                                                                                             | :heavy_minus_sign:                                                                                                                                       | Metadata saved on the organization membership, that is visible to both your frontend and backend.<br/>The new object will be merged with the existing value. | {}                                                                                                                                                       |
| `PrivateMetadata`                                                                                                                                        | Dictionary<String, *object*>                                                                                                                             | :heavy_minus_sign:                                                                                                                                       | Metadata saved on the organization membership that is only visible to your backend.<br/>The new object will be merged with the existing value.           | {}                                                                                                                                                       |

================
File: docs/Models/Operations/UpdateOrganizationMembershipMetadataResponse.md
================
# UpdateOrganizationMembershipMetadataResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationMembership`                                                    | [OrganizationMembership](../../Models/Components/OrganizationMembership.md) | :heavy_minus_sign:                                                          | Success                                                                     |

================
File: docs/Models/Operations/UpdateOrganizationMembershipRequest.md
================
# UpdateOrganizationMembershipRequest


## Fields

| Field                                                                                                         | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the organization the membership belongs to                                                          | org_12345                                                                                                     |
| `UserId`                                                                                                      | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the user that this membership belongs to                                                            | user_67890                                                                                                    |
| `RequestBody`                                                                                                 | [UpdateOrganizationMembershipRequestBody](../../Models/Operations/UpdateOrganizationMembershipRequestBody.md) | :heavy_check_mark:                                                                                            | N/A                                                                                                           |                                                                                                               |

================
File: docs/Models/Operations/UpdateOrganizationMembershipRequestBody.md
================
# UpdateOrganizationMembershipRequestBody


## Fields

| Field                                 | Type                                  | Required                              | Description                           | Example                               |
| ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- |
| `Role`                                | *string*                              | :heavy_check_mark:                    | The new role of the given membership. | admin                                 |

================
File: docs/Models/Operations/UpdateOrganizationMembershipResponse.md
================
# UpdateOrganizationMembershipResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `OrganizationMembership`                                                    | [OrganizationMembership](../../Models/Components/OrganizationMembership.md) | :heavy_minus_sign:                                                          | Success                                                                     |

================
File: docs/Models/Operations/UpdateOrganizationRequest.md
================
# UpdateOrganizationRequest


## Fields

| Field                                                                                     | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                          | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the organization to update                                                      | org_123_update                                                                            |
| `RequestBody`                                                                             | [UpdateOrganizationRequestBody](../../Models/Operations/UpdateOrganizationRequestBody.md) | :heavy_check_mark:                                                                        | N/A                                                                                       |                                                                                           |

================
File: docs/Models/Operations/UpdateOrganizationRequestBody.md
================
# UpdateOrganizationRequestBody


## Fields

| Field                                                                                                                           | Type                                                                                                                            | Required                                                                                                                        | Description                                                                                                                     | Example                                                                                                                         |
| ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |
| `PublicMetadata`                                                                                                                | Dictionary<String, *object*>                                                                                                    | :heavy_minus_sign:                                                                                                              | Metadata saved on the organization, that is visible to both your frontend and backend.                                          | {}                                                                                                                              |
| `PrivateMetadata`                                                                                                               | Dictionary<String, *object*>                                                                                                    | :heavy_minus_sign:                                                                                                              | Metadata saved on the organization that is only visible to your backend.                                                        | {}                                                                                                                              |
| `Name`                                                                                                                          | *string*                                                                                                                        | :heavy_minus_sign:                                                                                                              | The new name of the organization.<br/>May not contain URLs or HTML.<br/>Max length: 256                                         | New Organization Name                                                                                                           |
| `Slug`                                                                                                                          | *string*                                                                                                                        | :heavy_minus_sign:                                                                                                              | The new slug of the organization, which needs to be unique in the instance                                                      | new-org-slug                                                                                                                    |
| `MaxAllowedMemberships`                                                                                                         | *long*                                                                                                                          | :heavy_minus_sign:                                                                                                              | The maximum number of memberships allowed for this organization                                                                 | 100                                                                                                                             |
| `AdminDeleteEnabled`                                                                                                            | *bool*                                                                                                                          | :heavy_minus_sign:                                                                                                              | If true, an admin can delete this organization with the Frontend API.                                                           | true                                                                                                                            |
| `CreatedAt`                                                                                                                     | *string*                                                                                                                        | :heavy_minus_sign:                                                                                                              | A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`). |                                                                                                                                 |

================
File: docs/Models/Operations/UpdateOrganizationResponse.md
================
# UpdateOrganizationResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Organization`                                          | [Organization](../../Models/Components/Organization.md) | :heavy_minus_sign:                                      | An organization                                         |

================
File: docs/Models/Operations/UpdatePhoneNumberRequest.md
================
# UpdatePhoneNumberRequest


## Fields

| Field                                                                                   | Type                                                                                    | Required                                                                                | Description                                                                             | Example                                                                                 |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `PhoneNumberId`                                                                         | *string*                                                                                | :heavy_check_mark:                                                                      | The ID of the phone number to update                                                    | phone_12345                                                                             |
| `RequestBody`                                                                           | [UpdatePhoneNumberRequestBody](../../Models/Operations/UpdatePhoneNumberRequestBody.md) | :heavy_minus_sign:                                                                      | N/A                                                                                     |                                                                                         |

================
File: docs/Models/Operations/UpdatePhoneNumberRequestBody.md
================
# UpdatePhoneNumberRequestBody


## Fields

| Field                                                                                                                                                                                                                | Type                                                                                                                                                                                                                 | Required                                                                                                                                                                                                             | Description                                                                                                                                                                                                          | Example                                                                                                                                                                                                              |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Verified`                                                                                                                                                                                                           | *bool*                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                   | The phone number will be marked as verified.                                                                                                                                                                         | false                                                                                                                                                                                                                |
| `Primary`                                                                                                                                                                                                            | *bool*                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                   | Set this phone number as the primary phone number for the user.                                                                                                                                                      | true                                                                                                                                                                                                                 |
| `ReservedForSecondFactor`                                                                                                                                                                                            | *bool*                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                   | Set this phone number as reserved for multi-factor authentication.<br/>The phone number must also be verified.<br/>If there are no other reserved second factors, the phone number will be set as the default second factor. | true                                                                                                                                                                                                                 |

================
File: docs/Models/Operations/UpdatePhoneNumberResponse.md
================
# UpdatePhoneNumberResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `PhoneNumber`                                           | [PhoneNumber](../../Models/Components/PhoneNumber.md)   | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UpdateProductionInstanceDomainRequestBody.md
================
# UpdateProductionInstanceDomainRequestBody


## Fields

| Field                                                                    | Type                                                                     | Required                                                                 | Description                                                              | Example                                                                  |
| ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |
| `HomeUrl`                                                                | *string*                                                                 | :heavy_minus_sign:                                                       | The new home URL of the production instance e.g. https://www.example.com | https://www.example.com                                                  |
| `IsSecondary`                                                            | *bool*                                                                   | :heavy_minus_sign:                                                       | Whether the domain is a secondary app.                                   |                                                                          |

================
File: docs/Models/Operations/UpdateProductionInstanceDomainResponse.md
================
# UpdateProductionInstanceDomainResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |

================
File: docs/Models/Operations/UpdateSAMLConnectionAttributeMapping.md
================
# UpdateSAMLConnectionAttributeMapping

Define the atrtibute name mapping between Identity Provider and Clerk's user properties


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `UserId`           | *string*           | :heavy_minus_sign: | N/A                | id123              |
| `EmailAddress`     | *string*           | :heavy_minus_sign: | N/A                | user@example.com   |
| `FirstName`        | *string*           | :heavy_minus_sign: | N/A                | Jane               |
| `LastName`         | *string*           | :heavy_minus_sign: | N/A                | Doe                |

================
File: docs/Models/Operations/UpdateSAMLConnectionRequest.md
================
# UpdateSAMLConnectionRequest


## Fields

| Field                                                                                         | Type                                                                                          | Required                                                                                      | Description                                                                                   | Example                                                                                       |
| --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| `SamlConnectionId`                                                                            | *string*                                                                                      | :heavy_check_mark:                                                                            | The ID of the SAML Connection to update                                                       | saml_conn_123_update                                                                          |
| `RequestBody`                                                                                 | [UpdateSAMLConnectionRequestBody](../../Models/Operations/UpdateSAMLConnectionRequestBody.md) | :heavy_check_mark:                                                                            | N/A                                                                                           |                                                                                               |

================
File: docs/Models/Operations/UpdateSAMLConnectionRequestBody.md
================
# UpdateSAMLConnectionRequestBody


## Fields

| Field                                                                                                                               | Type                                                                                                                                | Required                                                                                                                            | Description                                                                                                                         | Example                                                                                                                             |
| ----------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| `Name`                                                                                                                              | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The name of the new SAML Connection                                                                                                 | Example SAML Connection                                                                                                             |
| `Domain`                                                                                                                            | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The domain to use for the new SAML Connection                                                                                       | example.com                                                                                                                         |
| `IdpEntityId`                                                                                                                       | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The entity id as provided by the IdP                                                                                                | entity_123                                                                                                                          |
| `IdpSsoUrl`                                                                                                                         | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The SSO url as provided by the IdP                                                                                                  | https://idp.example.com/sso                                                                                                         |
| `IdpCertificate`                                                                                                                    | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The x509 certificated as provided by the IdP                                                                                        | MIIDBTCCAe2gAwIBAgIQ...                                                                                                             |
| `IdpMetadataUrl`                                                                                                                    | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them | https://idp.example.com/metadata                                                                                                    |
| `IdpMetadata`                                                                                                                       | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties                | <EntityDescriptor>...</EntityDescriptor>                                                                                            |
| `OrganizationId`                                                                                                                    | *string*                                                                                                                            | :heavy_minus_sign:                                                                                                                  | The ID of the organization to which users of this SAML Connection will be added                                                     |                                                                                                                                     |
| `AttributeMapping`                                                                                                                  | [UpdateSAMLConnectionAttributeMapping](../../Models/Operations/UpdateSAMLConnectionAttributeMapping.md)                             | :heavy_minus_sign:                                                                                                                  | Define the atrtibute name mapping between Identity Provider and Clerk's user properties                                             |                                                                                                                                     |
| `Active`                                                                                                                            | *bool*                                                                                                                              | :heavy_minus_sign:                                                                                                                  | Activate or de-activate the SAML Connection                                                                                         | true                                                                                                                                |
| `SyncUserAttributes`                                                                                                                | *bool*                                                                                                                              | :heavy_minus_sign:                                                                                                                  | Controls whether to update the user's attributes in each sign-in                                                                    | false                                                                                                                               |
| `AllowSubdomains`                                                                                                                   | *bool*                                                                                                                              | :heavy_minus_sign:                                                                                                                  | Allow users with an email address subdomain to use this connection in order to authenticate                                         | true                                                                                                                                |
| `AllowIdpInitiated`                                                                                                                 | *bool*                                                                                                                              | :heavy_minus_sign:                                                                                                                  | Enable or deactivate IdP-initiated flows                                                                                            | false                                                                                                                               |
| `DisableAdditionalIdentifications`                                                                                                  | *bool*                                                                                                                              | :heavy_minus_sign:                                                                                                                  | Enable or deactivate additional identifications                                                                                     |                                                                                                                                     |

================
File: docs/Models/Operations/UpdateSAMLConnectionResponse.md
================
# UpdateSAMLConnectionResponse


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `HttpMeta`                                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                   | :heavy_check_mark:                                                        | N/A                                                                       |
| `SchemasSAMLConnection`                                                   | [SchemasSAMLConnection](../../Models/Components/SchemasSAMLConnection.md) | :heavy_minus_sign:                                                        | A SAML Connection                                                         |

================
File: docs/Models/Operations/UpdateSignUpRequest.md
================
# UpdateSignUpRequest


## Fields

| Field                                                                         | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `Id`                                                                          | *string*                                                                      | :heavy_check_mark:                                                            | The ID of the sign-up to update                                               | signup_1234567890abcdef                                                       |
| `RequestBody`                                                                 | [UpdateSignUpRequestBody](../../Models/Operations/UpdateSignUpRequestBody.md) | :heavy_minus_sign:                                                            | N/A                                                                           |                                                                               |

================
File: docs/Models/Operations/UpdateSignUpRequestBody.md
================
# UpdateSignUpRequestBody


## Fields

| Field                                                                                                                                                                                         | Type                                                                                                                                                                                          | Required                                                                                                                                                                                      | Description                                                                                                                                                                                   | Example                                                                                                                                                                                       |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `ExternalId`                                                                                                                                                                                  | *string*                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                            | The ID of the guest attempting to sign up as used in your external systems or your previous authentication solution.<br/>This will be copied to the resulting user when the sign-up is completed. | ext_id_7890abcdef123456                                                                                                                                                                       |
| `CustomAction`                                                                                                                                                                                | *bool*                                                                                                                                                                                        | :heavy_minus_sign:                                                                                                                                                                            | If true, the sign-up will be marked as a custom action.                                                                                                                                       | false                                                                                                                                                                                         |

================
File: docs/Models/Operations/UpdateSignUpResponse.md
================
# UpdateSignUpResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `SignUp`                                                | [SignUp](../../Models/Components/SignUp.md)             | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UpdateUserMetadataRequest.md
================
# UpdateUserMetadataRequest


## Fields

| Field                                                                                     | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `UserId`                                                                                  | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the user whose metadata will be updated and merged                              | user_123456789                                                                            |
| `RequestBody`                                                                             | [UpdateUserMetadataRequestBody](../../Models/Operations/UpdateUserMetadataRequestBody.md) | :heavy_minus_sign:                                                                        | N/A                                                                                       |                                                                                           |

================
File: docs/Models/Operations/UpdateUserMetadataRequestBody.md
================
# UpdateUserMetadataRequestBody


## Fields

| Field                                                                                                                                                                                                                                      | Type                                                                                                                                                                                                                                       | Required                                                                                                                                                                                                                                   | Description                                                                                                                                                                                                                                |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `PublicMetadata`                                                                                                                                                                                                                           | Dictionary<String, *object*>                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                         | Metadata saved on the user, that is visible to both your frontend and backend.<br/>The new object will be merged with the existing value.                                                                                                  |
| `PrivateMetadata`                                                                                                                                                                                                                          | Dictionary<String, *object*>                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                         | Metadata saved on the user that is only visible to your backend.<br/>The new object will be merged with the existing value.                                                                                                                |
| `UnsafeMetadata`                                                                                                                                                                                                                           | Dictionary<String, *object*>                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                         | Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.<br/>The new object will be merged with the existing value.<br/><br/>Note: Since this data can be modified from the frontend, it is not guaranteed to be safe. |

================
File: docs/Models/Operations/UpdateUserMetadataResponse.md
================
# UpdateUserMetadataResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UpdateUserRequest.md
================
# UpdateUserRequest


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               | Example                                                                   |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `UserId`                                                                  | *string*                                                                  | :heavy_check_mark:                                                        | The ID of the user to update                                              | usr_1                                                                     |
| `RequestBody`                                                             | [UpdateUserRequestBody](../../Models/Operations/UpdateUserRequestBody.md) | :heavy_check_mark:                                                        | N/A                                                                       |                                                                           |

================
File: docs/Models/Operations/UpdateUserRequestBody.md
================
# UpdateUserRequestBody


## Fields

| Field| Type| Required| Description| Example|
|| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |||
| `ExternalId`| *string| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | The ID of the user as used in your external systems or your previous authentication solution.<br/>Must be unique across your instance| ext|
| `FirstName`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | *string| :heavy_minus_sign| The first name to assign to the user| Jane|
| `LastName`| *string| :heavy_minus_sign| The last name to assign to the user                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Doe|
| `PrimaryEmailAddressId`| *string| :heavy_minus_sign| The ID of the email address to set as primary.<br/>It must be verified, and present on the current user| eml|
| `NotifyPrimaryEmailAddressChanged`| *bool| :heavy_minus_sign| If set to `true`, the user will be notified that their primary email address has changed.<br/>By default, no notification is sent| true|
| `PrimaryPhoneNumberId`| *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign| The ID of the phone number to set as primary.<br/>It must be verified, and present on the current user| phn|
| `PrimaryWeb3WalletId`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | *string| :heavy_minus_sign| The ID of the web3 wallets to set as primary.<br/>It must be verified, and present on the current user| wlt|
| `Username`| *string| :heavy_minus_sign| The username to give to the user.<br/>It must be unique across your instance| janedoe|
| `ProfileImageId`| *string*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign| The ID of the image to set as the user's profile image| img|
| `Password`| *string| :heavy_minus_sign| The plaintext password to give the user.<br/>Must be at least 8 characters long, and can not be in any list of hacked passwords| secretPass|
| `PasswordDigest`| *string| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.<br/>The digests should be generated with one of the supported algorithms.<br/>The hashing algorithm can be specified using the `password_hasher` property| $argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc|
| `PasswordHasher`| *string| :heavy_minus_sign| The hashing algorithm that was used to generate the password digest.<br/><br/>The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),<br/>[`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),<br/>[`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),<br/>and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.<br/><br/>Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information. ||
| `SkipPasswordChecks`| *bool*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | :heavy_minus_sign| Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`| false|
| `SignOutOfOtherSessions`| *bool| :heavy_minus_sign| Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`| true|
| `TotpSecret`| *string| :heavy_minus_sign| In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.<br/>Please note that currently the supported options are:<br/>* Period: 30 seconds<br/>* Code length: 6 digits<br/>* Algorithm| ABCD1234EFGH5678                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| `BackupCodes`| List<*string| :heavy_minus_sign| If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.<br/>You must provide the backup codes in plain format or the corresponding bcrypt digest.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | [<br/>"123456",<br/>"654321"<br|
| `PublicMetadata`| Dictionary<String, *object| :heavy_minus_sign| Metadata saved on the user, that is visible to both your Frontend and Backend APIs| {<br/>"theme": "dark"<br/>}|
| `PrivateMetadata`| Dictionary<String, *object| :heavy_minus_sign| Metadata saved on the user, that is only visible to your Backend| {<br/>"vip": true<br/>}|
| `UnsafeMetadata`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Dictionary<String, *object| :heavy_minus_sign| Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.<br/>Note: Since this data can be modified from the frontend, it is not guaranteed to be safe| {<br/>"age": 30<br/>}|
| `DeleteSelfEnabled`| *bool| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | If true, the user can delete themselves with the Frontend| true|
| `CreateOrganizationEnabled`| *bool| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | If true, the user can create organizations with the Frontend| false|
| `LegalAcceptedAt`| *string| :heavy_minus_sign| A custom timestamps denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ||
| `SkipLegalChecks`| *bool| :heavy_minus_sign| When set to `true` all legal checks are skipped.<br/>It is not recommended to skip legal checks unless you are migrating a user to Clerk||
| `CreateOrganizationsLimit`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | *long| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | The maximum number of organizations the user can create. 0 means unlimited||
| `CreatedAt`| *string| :heavy_minus_sign| A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`||

================
File: docs/Models/Operations/UpdateUserResponse.md
================
# UpdateUserResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `User`                                                  | [User](../../Models/Components/User.md)                 | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UploadOrganizationLogoFile.md
================
# UploadOrganizationLogoFile


## Fields

| Field                 | Type                  | Required              | Description           | Example               |
| --------------------- | --------------------- | --------------------- | --------------------- | --------------------- |
| `FileName`            | *string*              | :heavy_check_mark:    | N/A                   | path/to/your/logo.png |
| `Content`             | *byte[]*              | :heavy_check_mark:    | N/A                   | path/to/your/logo.png |

================
File: docs/Models/Operations/UploadOrganizationLogoRequest.md
================
# UploadOrganizationLogoRequest


## Fields

| Field                                                                                             | Type                                                                                              | Required                                                                                          | Description                                                                                       | Example                                                                                           |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                  | *string*                                                                                          | :heavy_check_mark:                                                                                | The ID of the organization for which to upload a logo                                             | org_12345                                                                                         |
| `RequestBody`                                                                                     | [UploadOrganizationLogoRequestBody](../../Models/Operations/UploadOrganizationLogoRequestBody.md) | :heavy_minus_sign:                                                                                | N/A                                                                                               |                                                                                                   |

================
File: docs/Models/Operations/UploadOrganizationLogoRequestBody.md
================
# UploadOrganizationLogoRequestBody


## Fields

| Field                                                                               | Type                                                                                | Required                                                                            | Description                                                                         | Example                                                                             |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `UploaderUserId`                                                                    | *string*                                                                            | :heavy_minus_sign:                                                                  | The ID of the user that will be credited with the image upload.                     | user_67890                                                                          |
| `File`                                                                              | [UploadOrganizationLogoFile](../../Models/Operations/UploadOrganizationLogoFile.md) | :heavy_check_mark:                                                                  | N/A                                                                                 | path/to/your/logo.png                                                               |

================
File: docs/Models/Operations/UploadOrganizationLogoResponse.md
================
# UploadOrganizationLogoResponse


## Fields

| Field                                                                   | Type                                                                    | Required                                                                | Description                                                             |
| ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| `HttpMeta`                                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                 | :heavy_check_mark:                                                      | N/A                                                                     |
| `OrganizationWithLogo`                                                  | [OrganizationWithLogo](../../Models/Components/OrganizationWithLogo.md) | :heavy_minus_sign:                                                      | An organization with a logo URL.                                        |

================
File: docs/Models/Operations/UpsertTemplatePathParamTemplateType.md
================
# UpsertTemplatePathParamTemplateType

The type of template to update


## Values

| Name    | Value   |
| ------- | ------- |
| `Email` | email   |
| `Sms`   | sms     |

================
File: docs/Models/Operations/UpsertTemplateRequest.md
================
# UpsertTemplateRequest


## Fields

| Field                                                                                                 | Type                                                                                                  | Required                                                                                              | Description                                                                                           | Example                                                                                               |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                        | [UpsertTemplatePathParamTemplateType](../../Models/Operations/UpsertTemplatePathParamTemplateType.md) | :heavy_check_mark:                                                                                    | The type of template to update                                                                        | sms                                                                                                   |
| `Slug`                                                                                                | *string*                                                                                              | :heavy_check_mark:                                                                                    | The slug of the template to update                                                                    | verification-code                                                                                     |
| `RequestBody`                                                                                         | [UpsertTemplateRequestBody](../../Models/Operations/UpsertTemplateRequestBody.md)                     | :heavy_minus_sign:                                                                                    | N/A                                                                                                   |                                                                                                       |

================
File: docs/Models/Operations/UpsertTemplateRequestBody.md
================
# UpsertTemplateRequestBody


## Fields

| Field                                                                                                                                                                                      | Type                                                                                                                                                                                       | Required                                                                                                                                                                                   | Description                                                                                                                                                                                | Example                                                                                                                                                                                    |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `Name`                                                                                                                                                                                     | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The user-friendly name of the template                                                                                                                                                     | Verification Code                                                                                                                                                                          |
| `Subject`                                                                                                                                                                                  | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The email subject.<br/>Applicable only to email templates.                                                                                                                                 | Your Verification Code                                                                                                                                                                     |
| `Markup`                                                                                                                                                                                   | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The editor markup used to generate the body of the template                                                                                                                                | <p>Your code: {{code}}</p>                                                                                                                                                                 |
| `Body`                                                                                                                                                                                     | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The template body before variable interpolation                                                                                                                                            | Use this code to verify your email: {{code}}                                                                                                                                               |
| `DeliveredByClerk`                                                                                                                                                                         | *bool*                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                         | Whether Clerk should deliver emails or SMS messages based on the current template                                                                                                          | true                                                                                                                                                                                       |
| `FromEmailName`                                                                                                                                                                            | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The local part of the From email address that will be used for emails.<br/>For example, in the address 'hello@example.com', the local part is 'hello'.<br/>Applicable only to email templates. | hello                                                                                                                                                                                      |
| `ReplyToEmailName`                                                                                                                                                                         | *string*                                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | The local part of the Reply To email address that will be used for emails.<br/>For example, in the address 'hello@example.com', the local part is 'hello'.<br/>Applicable only to email templates. | support                                                                                                                                                                                    |

================
File: docs/Models/Operations/UpsertTemplateResponse.md
================
# UpsertTemplateResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Template`                                              | [Template](../../Models/Components/Template.md)         | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/UserPasskeyDeleteRequest.md
================
# UserPasskeyDeleteRequest


## Fields

| Field                                             | Type                                              | Required                                          | Description                                       |
| ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- |
| `UserId`                                          | *string*                                          | :heavy_check_mark:                                | The ID of the user that owns the passkey identity |
| `PasskeyIdentificationId`                         | *string*                                          | :heavy_check_mark:                                | The ID of the passkey identity to be deleted      |

================
File: docs/Models/Operations/UserPasskeyDeleteResponse.md
================
# UserPasskeyDeleteResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/UsersGetOrganizationInvitationsRequest.md
================
# UsersGetOrganizationInvitationsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                  | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The ID of the user whose organization invitations we want to retrieve                                                                     |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |
| `Status`                                                                                                                                  | [QueryParamStatus](../../Models/Operations/QueryParamStatus.md)                                                                           | :heavy_minus_sign:                                                                                                                        | Filter organization invitations based on their status                                                                                     |                                                                                                                                           |

================
File: docs/Models/Operations/UsersGetOrganizationInvitationsResponse.md
================
# UsersGetOrganizationInvitationsResponse


## Fields

| Field                                                                                                                             | Type                                                                                                                              | Required                                                                                                                          | Description                                                                                                                       |
| --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                                                        | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                                                           | :heavy_check_mark:                                                                                                                | N/A                                                                                                                               |
| `OrganizationInvitationsWithPublicOrganizationData`                                                                               | [OrganizationInvitationsWithPublicOrganizationData](../../Models/Components/OrganizationInvitationsWithPublicOrganizationData.md) | :heavy_minus_sign:                                                                                                                | A list of organization invitations with public organization data                                                                  |

================
File: docs/Models/Operations/UsersGetOrganizationMembershipsRequest.md
================
# UsersGetOrganizationMembershipsRequest


## Fields

| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                  | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The ID of the user whose organization memberships we want to retrieve                                                                     | usr_1234567890                                                                                                                            |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

================
File: docs/Models/Operations/UsersGetOrganizationMembershipsResponse.md
================
# UsersGetOrganizationMembershipsResponse


## Fields

| Field                                                                                           | Type                                                                                            | Required                                                                                        | Description                                                                                     |
| ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |
| `HttpMeta`                                                                                      | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                                         | :heavy_check_mark:                                                                              | N/A                                                                                             |
| `OrganizationMemberships`                                                                       | [Models.Components.OrganizationMemberships](../../Models/Components/OrganizationMemberships.md) | :heavy_minus_sign:                                                                              | A list of organization memberships                                                              |

================
File: docs/Models/Operations/UserWeb3WalletDeleteRequest.md
================
# UserWeb3WalletDeleteRequest


## Fields

| Field                                            | Type                                             | Required                                         | Description                                      |
| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |
| `UserId`                                         | *string*                                         | :heavy_check_mark:                               | The ID of the user that owns the web3 wallet     |
| `Web3WalletIdentificationId`                     | *string*                                         | :heavy_check_mark:                               | The ID of the web3 wallet identity to be deleted |

================
File: docs/Models/Operations/UserWeb3WalletDeleteResponse.md
================
# UserWeb3WalletDeleteResponse


## Fields

| Field                                                     | Type                                                      | Required                                                  | Description                                               |
| --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| `HttpMeta`                                                | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)   | :heavy_check_mark:                                        | N/A                                                       |
| `DeletedObject`                                           | [DeletedObject](../../Models/Components/DeletedObject.md) | :heavy_minus_sign:                                        | Deleted Object                                            |

================
File: docs/Models/Operations/VerifyClientRequestBody.md
================
# VerifyClientRequestBody

Parameters.


## Fields

| Field                                    | Type                                     | Required                                 | Description                              | Example                                  |
| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| `Token`                                  | *string*                                 | :heavy_check_mark:                       | A JWT that represents the active client. | jwt_token_example                        |

================
File: docs/Models/Operations/VerifyClientResponse.md
================
# VerifyClientResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Client`                                                | [Client](../../Models/Components/Client.md)             | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/VerifyDomainProxyRequestBody.md
================
# VerifyDomainProxyRequestBody


## Fields

| Field                                                                                                                             | Type                                                                                                                              | Required                                                                                                                          | Description                                                                                                                       | Example                                                                                                                           |
| --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| `DomainId`                                                                                                                        | *string*                                                                                                                          | :heavy_minus_sign:                                                                                                                | The ID of the domain that will be updated.                                                                                        | domain_32hfu3e                                                                                                                    |
| `ProxyUrl`                                                                                                                        | *string*                                                                                                                          | :heavy_minus_sign:                                                                                                                | The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk | https://example.com/__clerk                                                                                                       |

================
File: docs/Models/Operations/VerifyDomainProxyResponse.md
================
# VerifyDomainProxyResponse


## Fields

| Field                                                                             | Type                                                                              | Required                                                                          | Description                                                                       |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `HttpMeta`                                                                        | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                           | :heavy_check_mark:                                                                | N/A                                                                               |
| `ProxyCheck`                                                                      | [ProxyCheck](../../Models/Components/ProxyCheck.md)                               | :heavy_minus_sign:                                                                | Health check information about a domain's proxy configuration validation attempt. |

================
File: docs/Models/Operations/VerifyPasswordRequest.md
================
# VerifyPasswordRequest


## Fields

| Field                                                                             | Type                                                                              | Required                                                                          | Description                                                                       | Example                                                                           |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `UserId`                                                                          | *string*                                                                          | :heavy_check_mark:                                                                | The ID of the user for whom to verify the password                                | user_123                                                                          |
| `RequestBody`                                                                     | [VerifyPasswordRequestBody](../../Models/Operations/VerifyPasswordRequestBody.md) | :heavy_minus_sign:                                                                | N/A                                                                               |                                                                                   |

================
File: docs/Models/Operations/VerifyPasswordRequestBody.md
================
# VerifyPasswordRequestBody


## Fields

| Field                       | Type                        | Required                    | Description                 | Example                     |
| --------------------------- | --------------------------- | --------------------------- | --------------------------- | --------------------------- |
| `Password`                  | *string*                    | :heavy_check_mark:          | The user password to verify | securepassword123           |

================
File: docs/Models/Operations/VerifyPasswordResponse.md
================
# VerifyPasswordResponse


## Fields

| Field                                                                               | Type                                                                                | Required                                                                            | Description                                                                         |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `HttpMeta`                                                                          | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                             | :heavy_check_mark:                                                                  | N/A                                                                                 |
| `Object`                                                                            | [VerifyPasswordResponseBody](../../Models/Operations/VerifyPasswordResponseBody.md) | :heavy_minus_sign:                                                                  | The provided password was correct.                                                  |

================
File: docs/Models/Operations/VerifyPasswordResponseBody.md
================
# VerifyPasswordResponseBody

The provided password was correct.


## Fields

| Field              | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `Verified`         | *bool*             | :heavy_minus_sign: | N/A                | true               |

================
File: docs/Models/Operations/VerifySessionRequest.md
================
# VerifySessionRequest


## Fields

| Field                                                                           | Type                                                                            | Required                                                                        | Description                                                                     | Example                                                                         |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `SessionId`                                                                     | *string*                                                                        | :heavy_check_mark:                                                              | The ID of the session                                                           | sess_w8q4g9s60j28fghv00f3                                                       |
| `RequestBody`                                                                   | [VerifySessionRequestBody](../../Models/Operations/VerifySessionRequestBody.md) | :heavy_minus_sign:                                                              | Parameters.                                                                     |                                                                                 |

================
File: docs/Models/Operations/VerifySessionRequestBody.md
================
# VerifySessionRequestBody

Parameters.


## Fields

| Field                                                                                                                                                            | Type                                                                                                                                                             | Required                                                                                                                                                         | Description                                                                                                                                                      | Example                                                                                                                                                          |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Token`                                                                                                                                                          | *string*                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                               | The JWT that is sent via the `__session` cookie from your frontend.<br/>Note: this JWT must be associated with the supplied session ID.                          | eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoic2Vzc193OHF4ZzZzNm9qMjhmZ2h2MDBmMyIsImlhdCI6MTU4MjY0OTg2Mn0.J4KP2L6bEZ6YccHFW4E2vKbOLw_mmO0gF_GNRw-wtLM |

================
File: docs/Models/Operations/VerifySessionResponse.md
================
# VerifySessionResponse


## Fields

| Field                                                   | Type                                                    | Required                                                | Description                                             |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `HttpMeta`                                              | [HTTPMetadata](../../Models/Components/HTTPMetadata.md) | :heavy_check_mark:                                      | N/A                                                     |
| `Session`                                               | [Session](../../Models/Components/Session.md)           | :heavy_minus_sign:                                      | Success                                                 |

================
File: docs/Models/Operations/VerifyTOTPRequest.md
================
# VerifyTOTPRequest


## Fields

| Field                                                                     | Type                                                                      | Required                                                                  | Description                                                               | Example                                                                   |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `UserId`                                                                  | *string*                                                                  | :heavy_check_mark:                                                        | The ID of the user for whom to verify the TOTP                            | usr_1a2b3c                                                                |
| `RequestBody`                                                             | [VerifyTOTPRequestBody](../../Models/Operations/VerifyTOTPRequestBody.md) | :heavy_minus_sign:                                                        | N/A                                                                       |                                                                           |

================
File: docs/Models/Operations/VerifyTOTPRequestBody.md
================
# VerifyTOTPRequestBody


## Fields

| Field                             | Type                              | Required                          | Description                       | Example                           |
| --------------------------------- | --------------------------------- | --------------------------------- | --------------------------------- | --------------------------------- |
| `Code`                            | *string*                          | :heavy_check_mark:                | The TOTP or backup code to verify | 123456                            |

================
File: docs/Models/Operations/VerifyTOTPResponse.md
================
# VerifyTOTPResponse


## Fields

| Field                                                                       | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `HttpMeta`                                                                  | [HTTPMetadata](../../Models/Components/HTTPMetadata.md)                     | :heavy_check_mark:                                                          | N/A                                                                         |
| `Object`                                                                    | [VerifyTOTPResponseBody](../../Models/Operations/VerifyTOTPResponseBody.md) | :heavy_minus_sign:                                                          | The provided TOTP or backup code was correct.                               |

================
File: docs/Models/Operations/VerifyTOTPResponseBody.md
================
# VerifyTOTPResponseBody

The provided TOTP or backup code was correct.


## Fields

| Field                                           | Type                                            | Required                                        | Description                                     | Example                                         |
| ----------------------------------------------- | ----------------------------------------------- | ----------------------------------------------- | ----------------------------------------------- | ----------------------------------------------- |
| `Verified`                                      | *bool*                                          | :heavy_minus_sign:                              | N/A                                             | true                                            |
| `CodeType`                                      | [CodeType](../../Models/Operations/CodeType.md) | :heavy_minus_sign:                              | N/A                                             | totp                                            |

================
File: docs/sdks/actortokens/README.md
================
# ActorTokens
(*ActorTokens*)

## Overview

### Available Operations

* [Create](#create) - Create actor token
* [Revoke](#revoke) - Revoke actor token

## Create

Create an actor token that can be used to impersonate the given user.
The `actor` parameter needs to include at least a "sub" key whose value is the ID of the actor (impersonating) user.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateActorTokenRequestBody req = new CreateActorTokenRequestBody() {
    UserId = "user_1a2b3c",
    Actor = new Models.Operations.Actor() {
        Sub = "user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb",
    },
};

var res = await sdk.ActorTokens.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                             | Type                                                                                  | Required                                                                              | Description                                                                           |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `request`                                                                             | [CreateActorTokenRequestBody](../../Models/Operations/CreateActorTokenRequestBody.md) | :heavy_check_mark:                                                                    | The request object to use for the request.                                            |

### Response

**[CreateActorTokenResponse](../../Models/Operations/CreateActorTokenResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Revoke

Revokes a pending actor token.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.ActorTokens.RevokeAsync(actorTokenId: "act_tok_abcdefghijk");

// handle response
```

### Parameters

| Parameter                                | Type                                     | Required                                 | Description                              | Example                                  |
| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| `ActorTokenId`                           | *string*                                 | :heavy_check_mark:                       | The ID of the actor token to be revoked. | act_tok_abcdefghijk                      |

### Response

**[RevokeActorTokenResponse](../../Models/Operations/RevokeActorTokenResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/allowlistidentifiers/README.md
================
# AllowlistIdentifiers
(*AllowlistIdentifiers*)

## Overview

### Available Operations

* [List](#list) - List all identifiers on the allow-list
* [Create](#create) - Add identifier to the allow-list
* [Delete](#delete) - Delete identifier from allow-list

## List

Get a list of all identifiers allowed to sign up to an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.AllowlistIdentifiers.ListAsync(
    paginated: false,
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[ListAllowlistIdentifiersResponse](../../Models/Operations/ListAllowlistIdentifiersResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 402                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Create an identifier allowed to sign up to an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateAllowlistIdentifierRequestBody req = new CreateAllowlistIdentifierRequestBody() {
    Identifier = "user@example.com",
};

var res = await sdk.AllowlistIdentifiers.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                               | Type                                                                                                    | Required                                                                                                | Description                                                                                             |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| `request`                                                                                               | [CreateAllowlistIdentifierRequestBody](../../Models/Operations/CreateAllowlistIdentifierRequestBody.md) | :heavy_check_mark:                                                                                      | The request object to use for the request.                                                              |

### Response

**[CreateAllowlistIdentifierResponse](../../Models/Operations/CreateAllowlistIdentifierResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Delete an identifier from the instance allow-list

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.AllowlistIdentifiers.DeleteAsync(identifierId: "example_identifier_id");

// handle response
```

### Parameters

| Parameter                                              | Type                                                   | Required                                               | Description                                            | Example                                                |
| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |
| `IdentifierId`                                         | *string*                                               | :heavy_check_mark:                                     | The ID of the identifier to delete from the allow-list | example_identifier_id                                  |

### Response

**[DeleteAllowlistIdentifierResponse](../../Models/Operations/DeleteAllowlistIdentifierResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/betafeatures/README.md
================
# BetaFeatures
(*BetaFeatures*)

## Overview

### Available Operations

* [UpdateInstanceSettings](#updateinstancesettings) - Update instance settings
* [~~UpdateProductionInstanceDomain~~](#updateproductioninstancedomain) - Update production instance domain :warning: **Deprecated**

## UpdateInstanceSettings

Updates the settings of an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

UpdateInstanceAuthConfigRequestBody req = new UpdateInstanceAuthConfigRequestBody() {
    FromEmailAddress = "noreply",
    ProgressiveSignUp = true,
    EnhancedEmailDeliverability = true,
    TestMode = true,
};

var res = await sdk.BetaFeatures.UpdateInstanceSettingsAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                             | Type                                                                                                  | Required                                                                                              | Description                                                                                           |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `request`                                                                                             | [UpdateInstanceAuthConfigRequestBody](../../Models/Operations/UpdateInstanceAuthConfigRequestBody.md) | :heavy_check_mark:                                                                                    | The request object to use for the request.                                                            |

### Response

**[UpdateInstanceAuthConfigResponse](../../Models/Operations/UpdateInstanceAuthConfigResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ~~UpdateProductionInstanceDomain~~

Change the domain of a production instance.

Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.

WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

UpdateProductionInstanceDomainRequestBody req = new UpdateProductionInstanceDomainRequestBody() {
    HomeUrl = "https://www.example.com",
};

var res = await sdk.BetaFeatures.UpdateProductionInstanceDomainAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                                         | Type                                                                                                              | Required                                                                                                          | Description                                                                                                       |
| ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| `request`                                                                                                         | [UpdateProductionInstanceDomainRequestBody](../../Models/Operations/UpdateProductionInstanceDomainRequestBody.md) | :heavy_check_mark:                                                                                                | The request object to use for the request.                                                                        |

### Response

**[UpdateProductionInstanceDomainResponse](../../Models/Operations/UpdateProductionInstanceDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/blocklistidentifiers/README.md
================
# BlocklistIdentifiers
(*BlocklistIdentifiers*)

## Overview

### Available Operations

* [List](#list) - List all identifiers on the block-list
* [Create](#create) - Add identifier to the block-list
* [Delete](#delete) - Delete identifier from block-list

## List

Get a list of all identifiers which are not allowed to access an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.BlocklistIdentifiers.ListAsync();

// handle response
```

### Response

**[ListBlocklistIdentifiersResponse](../../Models/Operations/ListBlocklistIdentifiersResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 402                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Create an identifier that is blocked from accessing an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateBlocklistIdentifierRequestBody req = new CreateBlocklistIdentifierRequestBody() {
    Identifier = "example@example.com",
};

var res = await sdk.BlocklistIdentifiers.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                               | Type                                                                                                    | Required                                                                                                | Description                                                                                             |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| `request`                                                                                               | [CreateBlocklistIdentifierRequestBody](../../Models/Operations/CreateBlocklistIdentifierRequestBody.md) | :heavy_check_mark:                                                                                      | The request object to use for the request.                                                              |

### Response

**[CreateBlocklistIdentifierResponse](../../Models/Operations/CreateBlocklistIdentifierResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Delete an identifier from the instance block-list

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.BlocklistIdentifiers.DeleteAsync(identifierId: "identifier123");

// handle response
```

### Parameters

| Parameter                                              | Type                                                   | Required                                               | Description                                            | Example                                                |
| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |
| `IdentifierId`                                         | *string*                                               | :heavy_check_mark:                                     | The ID of the identifier to delete from the block-list | identifier123                                          |

### Response

**[DeleteBlocklistIdentifierResponse](../../Models/Operations/DeleteBlocklistIdentifierResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/clerkbackendapi/README.md
================
# ClerkBackendApi SDK

## Overview

Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.

### Versions

When the API changes in a way that isn't compatible with older versions, a new version is released.
Each version is identified by its release date, e.g. `2024-10-01`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).

Please see https://clerk.com/docs for more information.
<https://clerk.com/docs>

### Available Operations

================
File: docs/sdks/clients/README.md
================
# Clients
(*Clients*)

## Overview

### Available Operations

* [~~List~~](#list) - List all clients :warning: **Deprecated**
* [Verify](#verify) - Verify a client
* [Get](#get) - Get a client

## ~~List~~

Returns a list of all clients. The clients are returned sorted by creation date,
with the newest clients appearing first.
Warning: the endpoint is being deprecated and will be removed in future versions.

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Clients.ListAsync(
    paginated: false,
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[GetClientListResponse](../../Models/Operations/GetClientListResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 410, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Verify

Verifies the client in the provided token

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

VerifyClientRequestBody req = new VerifyClientRequestBody() {
    Token = "jwt_token_example",
};

var res = await sdk.Clients.VerifyAsync(req);

// handle response
```

### Parameters

| Parameter                                                                     | Type                                                                          | Required                                                                      | Description                                                                   |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `request`                                                                     | [VerifyClientRequestBody](../../Models/Operations/VerifyClientRequestBody.md) | :heavy_check_mark:                                                            | The request object to use for the request.                                    |

### Response

**[VerifyClientResponse](../../Models/Operations/VerifyClientResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Returns the details of a client.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Clients.GetAsync(clientId: "cli_123456789");

// handle response
```

### Parameters

| Parameter          | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `ClientId`         | *string*           | :heavy_check_mark: | Client ID.         | cli_123456789      |

### Response

**[GetClientResponse](../../Models/Operations/GetClientResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/domains/README.md
================
# Domains
(*Domains*)

## Overview

### Available Operations

* [List](#list) - List all instance domains
* [Add](#add) - Add a domain
* [Delete](#delete) - Delete a satellite domain
* [Update](#update) - Update a domain

## List

Use this endpoint to get a list of all domains for an instance.
The response will contain the primary domain for the instance and any satellite domains. Each domain in the response contains information about the URLs where Clerk operates and the required CNAME targets.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Domains.ListAsync();

// handle response
```

### Response

**[ListDomainsResponse](../../Models/Operations/ListDomainsResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

## Add

Add a new domain for your instance.
Useful in the case of multi-domain instances, allows adding satellite domains to an instance.
The new domain must have a `name`. The domain name can contain the port for development instances, like `localhost:3000`.
At the moment, instances can have only one primary domain, so the `is_satellite` parameter must be set to `true`.
If you're planning to configure the new satellite domain to run behind a proxy, pass the `proxy_url` parameter accordingly.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

AddDomainRequestBody req = new AddDomainRequestBody() {
    Name = "example.com",
    IsSatellite = true,
    ProxyUrl = "https://proxy.example.com",
};

var res = await sdk.Domains.AddAsync(req);

// handle response
```

### Parameters

| Parameter                                                               | Type                                                                    | Required                                                                | Description                                                             |
| ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| `request`                                                               | [AddDomainRequestBody](../../Models/Operations/AddDomainRequestBody.md) | :heavy_check_mark:                                                      | The request object to use for the request.                              |

### Response

**[AddDomainResponse](../../Models/Operations/AddDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Deletes a satellite domain for the instance.
It is currently not possible to delete the instance's primary domain.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Domains.DeleteAsync(domainId: "domain_12345");

// handle response
```

### Parameters

| Parameter                                                              | Type                                                                   | Required                                                               | Description                                                            | Example                                                                |
| ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- |
| `DomainId`                                                             | *string*                                                               | :heavy_check_mark:                                                     | The ID of the domain that will be deleted. Must be a satellite domain. | domain_12345                                                           |

### Response

**[DeleteDomainResponse](../../Models/Operations/DeleteDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

The `proxy_url` can be updated only for production instances.
Update one of the instance's domains. Both primary and satellite domains can be updated.
If you choose to use Clerk via proxy, use this endpoint to specify the `proxy_url`.
Whenever you decide you'd rather switch to DNS setup for Clerk, simply set `proxy_url`
to `null` for the domain. When you update a production instance's primary domain name,
you have to make sure that you've completed all the necessary setup steps for DNS and
emails to work. Expect downtime otherwise. Updating a primary domain's name will also
update the instance's home origin, affecting the default application paths.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Domains.UpdateAsync(
    domainId: "domain_12345",
    requestBody: new UpdateDomainRequestBody() {
        Name = "example.com",
        ProxyUrl = "http://proxy.example.com",
    }
);

// handle response
```

### Parameters

| Parameter                                                                     | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `DomainId`                                                                    | *string*                                                                      | :heavy_check_mark:                                                            | The ID of the domain that will be updated.                                    | domain_12345                                                                  |
| `RequestBody`                                                                 | [UpdateDomainRequestBody](../../Models/Operations/UpdateDomainRequestBody.md) | :heavy_check_mark:                                                            | N/A                                                                           |                                                                               |

### Response

**[UpdateDomainResponse](../../Models/Operations/UpdateDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/emailaddresses/README.md
================
# EmailAddresses
(*EmailAddresses*)

## Overview

### Available Operations

* [Create](#create) - Create an email address
* [Get](#get) - Retrieve an email address
* [Delete](#delete) - Delete an email address
* [Update](#update) - Update an email address

## Create

Create a new email address

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateEmailAddressRequestBody req = new CreateEmailAddressRequestBody() {
    UserId = "user_12345",
    EmailAddress = "example@clerk.com",
    Verified = false,
    Primary = true,
};

var res = await sdk.EmailAddresses.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                 | Type                                                                                      | Required                                                                                  | Description                                                                               |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `request`                                                                                 | [CreateEmailAddressRequestBody](../../Models/Operations/CreateEmailAddressRequestBody.md) | :heavy_check_mark:                                                                        | The request object to use for the request.                                                |

### Response

**[CreateEmailAddressResponse](../../Models/Operations/CreateEmailAddressResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404, 422                    | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Returns the details of an email address.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailAddresses.GetAsync(emailAddressId: "email_address_id_example");

// handle response
```

### Parameters

| Parameter                               | Type                                    | Required                                | Description                             | Example                                 |
| --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- |
| `EmailAddressId`                        | *string*                                | :heavy_check_mark:                      | The ID of the email address to retrieve | email_address_id_example                |

### Response

**[GetEmailAddressResponse](../../Models/Operations/GetEmailAddressResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Delete the email address with the given ID

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailAddresses.DeleteAsync(emailAddressId: "email_address_id_example");

// handle response
```

### Parameters

| Parameter                             | Type                                  | Required                              | Description                           | Example                               |
| ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- |
| `EmailAddressId`                      | *string*                              | :heavy_check_mark:                    | The ID of the email address to delete | email_address_id_example              |

### Response

**[DeleteEmailAddressResponse](../../Models/Operations/DeleteEmailAddressResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates an email address.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailAddresses.UpdateAsync(
    emailAddressId: "email_address_id_example",
    requestBody: new UpdateEmailAddressRequestBody() {
        Verified = false,
        Primary = true,
    }
);

// handle response
```

### Parameters

| Parameter                                                                                 | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `EmailAddressId`                                                                          | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the email address to update                                                     | email_address_id_example                                                                  |
| `RequestBody`                                                                             | [UpdateEmailAddressRequestBody](../../Models/Operations/UpdateEmailAddressRequestBody.md) | :heavy_minus_sign:                                                                        | N/A                                                                                       |                                                                                           |

### Response

**[UpdateEmailAddressResponse](../../Models/Operations/UpdateEmailAddressResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/emailandsmstemplates/README.md
================
# EmailAndSmsTemplates
(*EmailAndSmsTemplates*)

## Overview

### Available Operations

* [~~Upsert~~](#upsert) - Update a template for a given type and slug :warning: **Deprecated**

## ~~Upsert~~

Updates the existing template of the given type and slug

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailAndSmsTemplates.UpsertAsync(
    templateType: UpsertTemplatePathParamTemplateType.Sms,
    slug: "verification-code",
    requestBody: new UpsertTemplateRequestBody() {
        Name = "Verification Code",
        Subject = "Your Verification Code",
        Markup = "<p>Your code: {{code}}</p>",
        Body = "Use this code to verify your email: {{code}}",
        DeliveredByClerk = true,
        FromEmailName = "hello",
        ReplyToEmailName = "support",
    }
);

// handle response
```

### Parameters

| Parameter                                                                                             | Type                                                                                                  | Required                                                                                              | Description                                                                                           | Example                                                                                               |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                        | [UpsertTemplatePathParamTemplateType](../../Models/Operations/UpsertTemplatePathParamTemplateType.md) | :heavy_check_mark:                                                                                    | The type of template to update                                                                        | sms                                                                                                   |
| `Slug`                                                                                                | *string*                                                                                              | :heavy_check_mark:                                                                                    | The slug of the template to update                                                                    | verification-code                                                                                     |
| `RequestBody`                                                                                         | [UpsertTemplateRequestBody](../../Models/Operations/UpsertTemplateRequestBody.md)                     | :heavy_minus_sign:                                                                                    | N/A                                                                                                   |                                                                                                       |

### Response

**[UpsertTemplateResponse](../../Models/Operations/UpsertTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 402, 403, 404, 422               | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/emailsmstemplates/README.md
================
# EmailSMSTemplates
(*EmailSMSTemplates*)

## Overview

### Available Operations

* [~~List~~](#list) - List all templates :warning: **Deprecated**
* [~~Get~~](#get) - Retrieve a template :warning: **Deprecated**
* [~~Revert~~](#revert) - Revert a template :warning: **Deprecated**
* [~~ToggleTemplateDelivery~~](#toggletemplatedelivery) - Toggle the delivery by Clerk for a template of a given type and slug :warning: **Deprecated**

## ~~List~~

Returns a list of all templates.
The templates are returned sorted by position.

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailSMSTemplates.ListAsync(
    templateType: TemplateType.Email,
    paginated: false,
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                                                            | [TemplateType](../../Models/Operations/TemplateType.md)                                                                                   | :heavy_check_mark:                                                                                                                        | The type of templates to list (email or SMS)                                                                                              | email                                                                                                                                     |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[GetTemplateListResponse](../../Models/Operations/GetTemplateListResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ~~Get~~

Returns the details of a template

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailSMSTemplates.GetAsync(
    templateType: PathParamTemplateType.Email,
    slug: "welcome-email"
);

// handle response
```

### Parameters

| Parameter                                                                 | Type                                                                      | Required                                                                  | Description                                                               | Example                                                                   |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `TemplateType`                                                            | [PathParamTemplateType](../../Models/Operations/PathParamTemplateType.md) | :heavy_check_mark:                                                        | The type of templates to retrieve (email or SMS)                          | email                                                                     |
| `Slug`                                                                    | *string*                                                                  | :heavy_check_mark:                                                        | The slug (i.e. machine-friendly name) of the template to retrieve         | welcome-email                                                             |

### Response

**[GetTemplateResponse](../../Models/Operations/GetTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ~~Revert~~

Reverts an updated template to its default state

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailSMSTemplates.RevertAsync(
    templateType: RevertTemplatePathParamTemplateType.Email,
    slug: "welcome-email"
);

// handle response
```

### Parameters

| Parameter                                                                                             | Type                                                                                                  | Required                                                                                              | Description                                                                                           | Example                                                                                               |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                        | [RevertTemplatePathParamTemplateType](../../Models/Operations/RevertTemplatePathParamTemplateType.md) | :heavy_check_mark:                                                                                    | The type of template to revert                                                                        | email                                                                                                 |
| `Slug`                                                                                                | *string*                                                                                              | :heavy_check_mark:                                                                                    | The slug of the template to revert                                                                    | welcome-email                                                                                         |

### Response

**[RevertTemplateResponse](../../Models/Operations/RevertTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 402, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ~~ToggleTemplateDelivery~~

Toggles the delivery by Clerk for a template of a given type and slug.
If disabled, Clerk will not deliver the resulting email or SMS.
The app developer will need to listen to the `email.created` or `sms.created` webhooks in order to handle delivery themselves.

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.EmailSMSTemplates.ToggleTemplateDeliveryAsync(
    templateType: ToggleTemplateDeliveryPathParamTemplateType.Email,
    slug: "welcome-email",
    requestBody: new ToggleTemplateDeliveryRequestBody() {
        DeliveredByClerk = true,
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                             | Type                                                                                                                  | Required                                                                                                              | Description                                                                                                           | Example                                                                                                               |
| --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
| `TemplateType`                                                                                                        | [ToggleTemplateDeliveryPathParamTemplateType](../../Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.md) | :heavy_check_mark:                                                                                                    | The type of template to toggle delivery for                                                                           | email                                                                                                                 |
| `Slug`                                                                                                                | *string*                                                                                                              | :heavy_check_mark:                                                                                                    | The slug of the template for which to toggle delivery                                                                 | welcome-email                                                                                                         |
| `RequestBody`                                                                                                         | [ToggleTemplateDeliveryRequestBody](../../Models/Operations/ToggleTemplateDeliveryRequestBody.md)                     | :heavy_minus_sign:                                                                                                    | N/A                                                                                                                   |                                                                                                                       |

### Response

**[ToggleTemplateDeliveryResponse](../../Models/Operations/ToggleTemplateDeliveryResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/instancesettings/README.md
================
# InstanceSettings
(*InstanceSettings*)

## Overview

### Available Operations

* [Get](#get) - Fetch the current instance
* [Update](#update) - Update instance settings
* [UpdateRestrictions](#updaterestrictions) - Update instance restrictions
* [ChangeDomain](#changedomain) - Update production instance domain
* [UpdateOrganizationSettings](#updateorganizationsettings) - Update instance organization settings

## Get

Fetches the current instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.InstanceSettings.GetAsync();

// handle response
```

### Response

**[GetInstanceResponse](../../Models/Operations/GetInstanceResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

## Update

Updates the settings of an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

UpdateInstanceRequestBody req = new UpdateInstanceRequestBody() {
    TestMode = true,
    Hibp = false,
    EnhancedEmailDeliverability = true,
    SupportEmail = "support@example.com",
    ClerkJsVersion = "2.3.1",
    DevelopmentOrigin = "http://localhost:3000",
    AllowedOrigins = new List<string>() {
        "http://localhost:3000",
        "chrome-extension://extension_uiid",
        "capacitor://localhost",
    },
    UrlBasedSessionSyncing = true,
};

var res = await sdk.InstanceSettings.UpdateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                         | Type                                                                              | Required                                                                          | Description                                                                       |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `request`                                                                         | [UpdateInstanceRequestBody](../../Models/Operations/UpdateInstanceRequestBody.md) | :heavy_check_mark:                                                                | The request object to use for the request.                                        |

### Response

**[UpdateInstanceResponse](../../Models/Operations/UpdateInstanceResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 422                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## UpdateRestrictions

Updates the restriction settings of an instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

UpdateInstanceRestrictionsRequestBody req = new UpdateInstanceRestrictionsRequestBody() {
    Allowlist = false,
    Blocklist = true,
    BlockEmailSubaddresses = true,
    BlockDisposableEmailDomains = true,
    IgnoreDotsForGmailAddresses = false,
};

var res = await sdk.InstanceSettings.UpdateRestrictionsAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                                 | Type                                                                                                      | Required                                                                                                  | Description                                                                                               |
| --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- |
| `request`                                                                                                 | [UpdateInstanceRestrictionsRequestBody](../../Models/Operations/UpdateInstanceRestrictionsRequestBody.md) | :heavy_check_mark:                                                                                        | The request object to use for the request.                                                                |

### Response

**[UpdateInstanceRestrictionsResponse](../../Models/Operations/UpdateInstanceRestrictionsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ChangeDomain

Change the domain of a production instance.

Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.

WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ChangeProductionInstanceDomainRequestBody req = new ChangeProductionInstanceDomainRequestBody() {
    HomeUrl = "https://www.newdomain.com",
};

var res = await sdk.InstanceSettings.ChangeDomainAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                                         | Type                                                                                                              | Required                                                                                                          | Description                                                                                                       |
| ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| `request`                                                                                                         | [ChangeProductionInstanceDomainRequestBody](../../Models/Operations/ChangeProductionInstanceDomainRequestBody.md) | :heavy_check_mark:                                                                                                | The request object to use for the request.                                                                        |

### Response

**[ChangeProductionInstanceDomainResponse](../../Models/Operations/ChangeProductionInstanceDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## UpdateOrganizationSettings

Updates the organization settings of the instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

UpdateInstanceOrganizationSettingsRequestBody req = new UpdateInstanceOrganizationSettingsRequestBody() {
    Enabled = true,
    MaxAllowedMemberships = 10,
    AdminDeleteEnabled = false,
    DomainsEnabled = true,
    DomainsEnrollmentModes = new List<string>() {
        "automatic_invitation",
        "automatic_suggestion",
    },
    CreatorRoleId = "creator_role",
    DomainsDefaultRoleId = "member_role",
};

var res = await sdk.InstanceSettings.UpdateOrganizationSettingsAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                                                 | Type                                                                                                                      | Required                                                                                                                  | Description                                                                                                               |
| ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |
| `request`                                                                                                                 | [UpdateInstanceOrganizationSettingsRequestBody](../../Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.md) | :heavy_check_mark:                                                                                                        | The request object to use for the request.                                                                                |

### Response

**[UpdateInstanceOrganizationSettingsResponse](../../Models/Operations/UpdateInstanceOrganizationSettingsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/invitations/README.md
================
# Invitations
(*Invitations*)

## Overview

### Available Operations

* [Create](#create) - Create an invitation
* [List](#list) - List all invitations
* [BulkCreate](#bulkcreate) - Create multiple invitations
* [Revoke](#revoke) - Revokes an invitation

## Create

Creates a new invitation for the given email address and sends the invitation email.
Keep in mind that you cannot create an invitation if there is already one for the given email address.
Also, trying to create an invitation for an email address that already exists in your application will result to an error.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateInvitationRequestBody req = new CreateInvitationRequestBody() {
    EmailAddress = "user@example.com",
    PublicMetadata = new Dictionary<string, object>() {

    },
    RedirectUrl = "https://example.com/welcome",
};

var res = await sdk.Invitations.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                             | Type                                                                                  | Required                                                                              | Description                                                                           |
| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |
| `request`                                                                             | [CreateInvitationRequestBody](../../Models/Operations/CreateInvitationRequestBody.md) | :heavy_check_mark:                                                                    | The request object to use for the request.                                            |

### Response

**[CreateInvitationResponse](../../Models/Operations/CreateInvitationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## List

Returns all non-revoked invitations for your application, sorted by creation date

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListInvitationsRequest req = new ListInvitationsRequest() {
    OrderBy = "pending",
};

var res = await sdk.Invitations.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                   | Type                                                                        | Required                                                                    | Description                                                                 |
| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |
| `request`                                                                   | [ListInvitationsRequest](../../Models/Operations/ListInvitationsRequest.md) | :heavy_check_mark:                                                          | The request object to use for the request.                                  |

### Response

**[ListInvitationsResponse](../../Models/Operations/ListInvitationsResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

## BulkCreate

Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the
invitations as emails by setting the `notify` parameter to `true`. There cannot be an existing invitation for any
of the email addresses you provide unless you set `ignore_existing` to `true` for specific email addresses. Please
note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

List<RequestBody> req = new List<RequestBody>() {
    new RequestBody() {
        EmailAddress = "Queen25@gmail.com",
    },
};

var res = await sdk.Invitations.BulkCreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                   | Type                                                        | Required                                                    | Description                                                 |
| ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- |
| `request`                                                   | List<[RequestBody](../../Models/Operations/RequestBody.md)> | :heavy_check_mark:                                          | The request object to use for the request.                  |

### Response

**[CreateBulkInvitationsResponse](../../Models/Operations/CreateBulkInvitationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Revoke

Revokes the given invitation.
Revoking an invitation will prevent the user from using the invitation link that was sent to them.
However, it doesn't prevent the user from signing up if they follow the sign up flow.
Only active (i.e. non-revoked) invitations can be revoked.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Invitations.RevokeAsync(invitationId: "inv_123");

// handle response
```

### Parameters

| Parameter                              | Type                                   | Required                               | Description                            | Example                                |
| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |
| `InvitationId`                         | *string*                               | :heavy_check_mark:                     | The ID of the invitation to be revoked | inv_123                                |

### Response

**[RevokeInvitationResponse](../../Models/Operations/RevokeInvitationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/jwks/README.md
================
# Jwks
(*Jwks*)

## Overview

### Available Operations

* [GetJWKS](#getjwks) - Retrieve the JSON Web Key Set of the instance

## GetJWKS

Retrieve the JSON Web Key Set of the instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Jwks.GetJWKSAsync();

// handle response
```

### Response

**[GetJWKSResponse](../../Models/Operations/GetJWKSResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

================
File: docs/sdks/jwttemplates/README.md
================
# JwtTemplates
(*JwtTemplates*)

## Overview

### Available Operations

* [List](#list) - List all templates
* [Create](#create) - Create a JWT template
* [Get](#get) - Retrieve a template
* [Update](#update) - Update a JWT template
* [Delete](#delete) - Delete a Template

## List

List all templates

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.JwtTemplates.ListAsync(
    paginated: false,
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[ListJWTTemplatesResponse](../../Models/Operations/ListJWTTemplatesResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

## Create

Create a new JWT template

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateJWTTemplateRequestBody req = new CreateJWTTemplateRequestBody() {
    Name = "Example Template",
    Claims = new Models.Operations.Claims() {},
    Lifetime = 3600D,
    AllowedClockSkew = 5D,
    CustomSigningKey = false,
    SigningAlgorithm = "RS256",
    SigningKey = "PRIVATE_KEY_PLACEHOLDER",
};

var res = await sdk.JwtTemplates.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `request`                                                                               | [CreateJWTTemplateRequestBody](../../Models/Operations/CreateJWTTemplateRequestBody.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |

### Response

**[CreateJWTTemplateResponse](../../Models/Operations/CreateJWTTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Retrieve the details of a given JWT template

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.JwtTemplates.GetAsync(templateId: "template_123");

// handle response
```

### Parameters

| Parameter          | Type               | Required           | Description        | Example            |
| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| `TemplateId`       | *string*           | :heavy_check_mark: | JWT Template ID    | template_123       |

### Response

**[GetJWTTemplateResponse](../../Models/Operations/GetJWTTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates an existing JWT template

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.JwtTemplates.UpdateAsync(
    templateId: "<id>",
    requestBody: new UpdateJWTTemplateRequestBody() {
        Name = "<value>",
        Claims = new UpdateJWTTemplateClaims() {},
    }
);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `TemplateId`                                                                            | *string*                                                                                | :heavy_check_mark:                                                                      | The ID of the JWT template to update                                                    |
| `RequestBody`                                                                           | [UpdateJWTTemplateRequestBody](../../Models/Operations/UpdateJWTTemplateRequestBody.md) | :heavy_minus_sign:                                                                      | N/A                                                                                     |

### Response

**[UpdateJWTTemplateResponse](../../Models/Operations/UpdateJWTTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 402, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Delete a Template

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.JwtTemplates.DeleteAsync(templateId: "<id>");

// handle response
```

### Parameters

| Parameter          | Type               | Required           | Description        |
| ------------------ | ------------------ | ------------------ | ------------------ |
| `TemplateId`       | *string*           | :heavy_check_mark: | JWT Template ID    |

### Response

**[DeleteJWTTemplateResponse](../../Models/Operations/DeleteJWTTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/miscellaneous/README.md
================
# Miscellaneous
(*Miscellaneous*)

## Overview

### Available Operations

* [GetPublicInterstitial](#getpublicinterstitial) - Returns the markup for the interstitial page

## GetPublicInterstitial

The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi();

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `request`                                                                               | [GetPublicInterstitialRequest](../../Models/Operations/GetPublicInterstitialRequest.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |

### Response

**[GetPublicInterstitialResponse](../../Models/Operations/GetPublicInterstitialResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

================
File: docs/sdks/oauthapplications/README.md
================
# OauthApplications
(*OauthApplications*)

## Overview

### Available Operations

* [List](#list) - Get a list of OAuth applications for an instance
* [Create](#create) - Create an OAuth application
* [Get](#get) - Retrieve an OAuth application by ID
* [Update](#update) - Update an OAuth application
* [Delete](#delete) - Delete an OAuth application
* [RotateSecret](#rotatesecret) - Rotate the client secret of the given OAuth application

## List

This request returns the list of OAuth applications for an instance.
Results can be paginated using the optional `limit` and `offset` query parameters.
The OAuth applications are ordered by descending creation date.
Most recent OAuth applications will be returned first.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OauthApplications.ListAsync(
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[ListOAuthApplicationsResponse](../../Models/Operations/ListOAuthApplicationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Creates a new OAuth application with the given name and callback URL for an instance.
The callback URL must be a valid url.
All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateOAuthApplicationRequestBody req = new CreateOAuthApplicationRequestBody() {
    Name = "Example App",
    Public = true,
};

var res = await sdk.OauthApplications.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                         | Type                                                                                              | Required                                                                                          | Description                                                                                       |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `request`                                                                                         | [CreateOAuthApplicationRequestBody](../../Models/Operations/CreateOAuthApplicationRequestBody.md) | :heavy_check_mark:                                                                                | The request object to use for the request.                                                        |

### Response

**[CreateOAuthApplicationResponse](../../Models/Operations/CreateOAuthApplicationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Fetches the OAuth application whose ID matches the provided `id` in the path.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OauthApplications.GetAsync(oauthApplicationId: "oauth_app_12345");

// handle response
```

### Parameters

| Parameter                       | Type                            | Required                        | Description                     | Example                         |
| ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- |
| `OauthApplicationId`            | *string*                        | :heavy_check_mark:              | The ID of the OAuth application | oauth_app_12345                 |

### Response

**[GetOAuthApplicationResponse](../../Models/Operations/GetOAuthApplicationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates an existing OAuth application

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OauthApplications.UpdateAsync(
    oauthApplicationId: "oauth_app_67890",
    requestBody: new UpdateOAuthApplicationRequestBody() {
        Name = "Updated OAuth App Name",
    }
);

// handle response
```

### Parameters

| Parameter                                                                                         | Type                                                                                              | Required                                                                                          | Description                                                                                       | Example                                                                                           |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `OauthApplicationId`                                                                              | *string*                                                                                          | :heavy_check_mark:                                                                                | The ID of the OAuth application to update                                                         | oauth_app_67890                                                                                   |
| `RequestBody`                                                                                     | [UpdateOAuthApplicationRequestBody](../../Models/Operations/UpdateOAuthApplicationRequestBody.md) | :heavy_check_mark:                                                                                | N/A                                                                                               |                                                                                                   |

### Response

**[UpdateOAuthApplicationResponse](../../Models/Operations/UpdateOAuthApplicationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Deletes the given OAuth application.
This is not reversible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OauthApplications.DeleteAsync(oauthApplicationId: "oauth_app_09876");

// handle response
```

### Parameters

| Parameter                                 | Type                                      | Required                                  | Description                               | Example                                   |
| ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- |
| `OauthApplicationId`                      | *string*                                  | :heavy_check_mark:                        | The ID of the OAuth application to delete | oauth_app_09876                           |

### Response

**[DeleteOAuthApplicationResponse](../../Models/Operations/DeleteOAuthApplicationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## RotateSecret

Rotates the OAuth application's client secret.
When the client secret is rotated, make sure to update it in authorized OAuth clients.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OauthApplications.RotateSecretAsync(oauthApplicationId: "oauth_application_12345");

// handle response
```

### Parameters

| Parameter                                                             | Type                                                                  | Required                                                              | Description                                                           | Example                                                               |
| --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- |
| `OauthApplicationId`                                                  | *string*                                                              | :heavy_check_mark:                                                    | The ID of the OAuth application for which to rotate the client secret | oauth_application_12345                                               |

### Response

**[RotateOAuthApplicationSecretResponse](../../Models/Operations/RotateOAuthApplicationSecretResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/organizationdomains/README.md
================
# OrganizationDomains
(*OrganizationDomains*)

## Overview

### Available Operations

* [Create](#create) - Create a new organization domain.
* [List](#list) - Get a list of all domains of an organization.
* [Update](#update) - Update an organization domain.
* [Delete](#delete) - Remove a domain from an organization.

## Create

Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationDomains.CreateAsync(
    organizationId: "<id>",
    requestBody: new CreateOrganizationDomainRequestBody() {}
);

// handle response
```

### Parameters

| Parameter                                                                                             | Type                                                                                                  | Required                                                                                              | Description                                                                                           |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                      | *string*                                                                                              | :heavy_check_mark:                                                                                    | The ID of the organization where the new domain will be created.                                      |
| `RequestBody`                                                                                         | [CreateOrganizationDomainRequestBody](../../Models/Operations/CreateOrganizationDomainRequestBody.md) | :heavy_check_mark:                                                                                    | N/A                                                                                                   |

### Response

**[CreateOrganizationDomainResponse](../../Models/Operations/CreateOrganizationDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## List

Get a list of all domains of an organization.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListOrganizationDomainsRequest req = new ListOrganizationDomainsRequest() {
    OrganizationId = "<id>",
};

var res = await sdk.OrganizationDomains.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                   | Type                                                                                        | Required                                                                                    | Description                                                                                 |
| ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |
| `request`                                                                                   | [ListOrganizationDomainsRequest](../../Models/Operations/ListOrganizationDomainsRequest.md) | :heavy_check_mark:                                                                          | The request object to use for the request.                                                  |

### Response

**[ListOrganizationDomainsResponse](../../Models/Operations/ListOrganizationDomainsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates the properties of an existing organization domain.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationDomains.UpdateAsync(
    organizationId: "<id>",
    domainId: "<id>",
    requestBody: new UpdateOrganizationDomainRequestBody() {}
);

// handle response
```

### Parameters

| Parameter                                                                                             | Type                                                                                                  | Required                                                                                              | Description                                                                                           |
| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                      | *string*                                                                                              | :heavy_check_mark:                                                                                    | The ID of the organization the domain belongs to                                                      |
| `DomainId`                                                                                            | *string*                                                                                              | :heavy_check_mark:                                                                                    | The ID of the domain                                                                                  |
| `RequestBody`                                                                                         | [UpdateOrganizationDomainRequestBody](../../Models/Operations/UpdateOrganizationDomainRequestBody.md) | :heavy_check_mark:                                                                                    | N/A                                                                                                   |

### Response

**[UpdateOrganizationDomainResponse](../../Models/Operations/UpdateOrganizationDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Removes the given domain from the organization.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationDomains.DeleteAsync(
    organizationId: "<id>",
    domainId: "<id>"
);

// handle response
```

### Parameters

| Parameter                                        | Type                                             | Required                                         | Description                                      |
| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |
| `OrganizationId`                                 | *string*                                         | :heavy_check_mark:                               | The ID of the organization the domain belongs to |
| `DomainId`                                       | *string*                                         | :heavy_check_mark:                               | The ID of the domain                             |

### Response

**[DeleteOrganizationDomainResponse](../../Models/Operations/DeleteOrganizationDomainResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/organizationinvitations/README.md
================
# OrganizationInvitations
(*OrganizationInvitations*)

## Overview

### Available Operations

* [GetAll](#getall) - Get a list of organization invitations for the current instance
* [Create](#create) - Create and send an organization invitation
* [List](#list) - Get a list of organization invitations
* [BulkCreate](#bulkcreate) - Bulk create and send organization invitations
* [~~ListPending~~](#listpending) - Get a list of pending organization invitations :warning: **Deprecated**
* [Get](#get) - Retrieve an organization invitation by ID
* [Revoke](#revoke) - Revoke a pending organization invitation

## GetAll

This request returns the list of organization invitations for the instance.
Results can be paginated using the optional `limit` and `offset` query parameters.
You can filter them by providing the 'status' query parameter, that accepts multiple values.
You can change the order by providing the 'order' query parameter, that accepts multiple values.
You can filter by the invited user email address providing the `query` query parameter.
The organization invitations are ordered by descending creation date by default.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListInstanceOrganizationInvitationsRequest req = new ListInstanceOrganizationInvitationsRequest() {};

var res = await sdk.OrganizationInvitations.GetAllAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                                           | Type                                                                                                                | Required                                                                                                            | Description                                                                                                         |
| ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| `request`                                                                                                           | [ListInstanceOrganizationInvitationsRequest](../../Models/Operations/ListInstanceOrganizationInvitationsRequest.md) | :heavy_check_mark:                                                                                                  | The request object to use for the request.                                                                          |

### Response

**[ListInstanceOrganizationInvitationsResponse](../../Models/Operations/ListInstanceOrganizationInvitationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
You can specify the `role` for the invited organization member.

New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.

The request body supports passing an optional `redirect_url` parameter.
When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
Use this parameter to implement a custom invitation acceptance flow.

You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
That user must be a member with administrator privileges in the organization.
Only "admin" members can create organization invitations.

You can optionally provide public and private metadata for the organization invitation.
The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationInvitations.CreateAsync(
    organizationId: "org_12345",
    requestBody: new CreateOrganizationInvitationRequestBody() {
        EmailAddress = "user@example.com",
        InviterUserId = "user_67890",
        Role = "admin",
        PublicMetadata = new Dictionary<string, object>() {
            { "key", "value" },
        },
        PrivateMetadata = new Dictionary<string, object>() {
            { "private_key", "secret_value" },
        },
        RedirectUrl = "https://example.com/welcome",
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                     | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the organization for which to send the invitation                                                   | org_12345                                                                                                     |
| `RequestBody`                                                                                                 | [CreateOrganizationInvitationRequestBody](../../Models/Operations/CreateOrganizationInvitationRequestBody.md) | :heavy_minus_sign:                                                                                            | N/A                                                                                                           |                                                                                                               |

### Response

**[CreateOrganizationInvitationResponse](../../Models/Operations/CreateOrganizationInvitationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## List

This request returns the list of organization invitations.
Results can be paginated using the optional `limit` and `offset` query parameters.
You can filter them by providing the 'status' query parameter, that accepts multiple values.
The organization invitations are ordered by descending creation date.
Most recent invitations will be returned first.
Any invitations created as a result of an Organization Domain are not included in the results.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationInvitations.ListAsync(
    organizationId: "org_12345",
    status: ListOrganizationInvitationsQueryParamStatus.Revoked,
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                                          | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The organization ID.                                                                                                                      | org_12345                                                                                                                                 |
| `Status`                                                                                                                                  | [ListOrganizationInvitationsQueryParamStatus](../../Models/Operations/ListOrganizationInvitationsQueryParamStatus.md)                     | :heavy_minus_sign:                                                                                                                        | Filter organization invitations based on their status                                                                                     |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[ListOrganizationInvitationsResponse](../../Models/Operations/ListOrganizationInvitationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## BulkCreate

Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
You can specify a different `role` for each invited organization member.
New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
The request body supports passing an optional `redirect_url` parameter for each invitation.
When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
Use this parameter to implement a custom invitation acceptance flow.
You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
can have a different inviter user.
Inviter users must be members with administrator privileges in the organization.
Only "admin" members can create organization invitations.
You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationInvitations.BulkCreateAsync(
    organizationId: "org_12345",
    requestBody: new List<CreateOrganizationInvitationBulkRequestBody>() {
        new CreateOrganizationInvitationBulkRequestBody() {
            EmailAddress = "newmember@example.com",
            InviterUserId = "user_67890",
            Role = "admin",
            PublicMetadata = new Dictionary<string, object>() {

            },
            PrivateMetadata = new Dictionary<string, object>() {

            },
            RedirectUrl = "https://example.com/welcome",
        },
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                                   | Type                                                                                                                        | Required                                                                                                                    | Description                                                                                                                 | Example                                                                                                                     |
| --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                            | *string*                                                                                                                    | :heavy_check_mark:                                                                                                          | The organization ID.                                                                                                        | org_12345                                                                                                                   |
| `RequestBody`                                                                                                               | List<[CreateOrganizationInvitationBulkRequestBody](../../Models/Operations/CreateOrganizationInvitationBulkRequestBody.md)> | :heavy_check_mark:                                                                                                          | N/A                                                                                                                         |                                                                                                                             |

### Response

**[CreateOrganizationInvitationBulkResponse](../../Models/Operations/CreateOrganizationInvitationBulkResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ~~ListPending~~

This request returns the list of organization invitations with "pending" status.
These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
Results can be paginated using the optional `limit` and `offset` query parameters.
The organization invitations are ordered by descending creation date.
Most recent invitations will be returned first.
Any invitations created as a result of an Organization Domain are not included in the results.

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationInvitations.ListPendingAsync(
    organizationId: "org_12345",
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                                          | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The organization ID.                                                                                                                      | org_12345                                                                                                                                 |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[ListPendingOrganizationInvitationsResponse](../../Models/Operations/ListPendingOrganizationInvitationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Use this request to get an existing organization invitation by ID.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationInvitations.GetAsync(
    organizationId: "org_123456789",
    invitationId: "inv_987654321"
);

// handle response
```

### Parameters

| Parameter                       | Type                            | Required                        | Description                     | Example                         |
| ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- |
| `OrganizationId`                | *string*                        | :heavy_check_mark:              | The organization ID.            | org_123456789                   |
| `InvitationId`                  | *string*                        | :heavy_check_mark:              | The organization invitation ID. | inv_987654321                   |

### Response

**[GetOrganizationInvitationResponse](../../Models/Operations/GetOrganizationInvitationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Revoke

Use this request to revoke a previously issued organization invitation.
Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
Only organization invitations with "pending" status can be revoked.
The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
Only users with "admin" role can revoke invitations.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationInvitations.RevokeAsync(
    organizationId: "org_123456",
    invitationId: "inv_123456",
    requestBody: new RevokeOrganizationInvitationRequestBody() {
        RequestingUserId = "usr_12345",
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                     | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The organization ID.                                                                                          | org_123456                                                                                                    |
| `InvitationId`                                                                                                | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The organization invitation ID.                                                                               | inv_123456                                                                                                    |
| `RequestBody`                                                                                                 | [RevokeOrganizationInvitationRequestBody](../../Models/Operations/RevokeOrganizationInvitationRequestBody.md) | :heavy_minus_sign:                                                                                            | N/A                                                                                                           |                                                                                                               |

### Response

**[RevokeOrganizationInvitationResponse](../../Models/Operations/RevokeOrganizationInvitationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/organizationmemberships/README.md
================
# OrganizationMemberships
(*OrganizationMemberships*)

## Overview

### Available Operations

* [Create](#create) - Create a new organization membership
* [List](#list) - Get a list of all members of an organization
* [Update](#update) - Update an organization membership
* [Delete](#delete) - Remove a member from an organization
* [UpdateMetadata](#updatemetadata) - Merge and update organization membership metadata

## Create

Adds a user as a member to the given organization.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationMemberships.CreateAsync(
    organizationId: "org_123",
    requestBody: new CreateOrganizationMembershipRequestBody() {
        UserId = "user_456",
        Role = "admin",
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                     | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the organization where the new membership will be created                                           | org_123                                                                                                       |
| `RequestBody`                                                                                                 | [CreateOrganizationMembershipRequestBody](../../Models/Operations/CreateOrganizationMembershipRequestBody.md) | :heavy_check_mark:                                                                                            | N/A                                                                                                           |                                                                                                               |

### Response

**[CreateOrganizationMembershipResponse](../../Models/Operations/CreateOrganizationMembershipResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## List

Retrieves all user memberships for the given organization

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListOrganizationMembershipsRequest req = new ListOrganizationMembershipsRequest() {
    OrganizationId = "org_789",
    EmailAddress = new List<string>() {
        "+created_at",
    },
    LastActiveAtBefore = 1700690400000,
    LastActiveAtAfter = 1700690400000,
    CreatedAtBefore = 1730160000000,
    CreatedAtAfter = 1730160000000,
};

var res = await sdk.OrganizationMemberships.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                           | Type                                                                                                | Required                                                                                            | Description                                                                                         |
| --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |
| `request`                                                                                           | [ListOrganizationMembershipsRequest](../../Models/Operations/ListOrganizationMembershipsRequest.md) | :heavy_check_mark:                                                                                  | The request object to use for the request.                                                          |

### Response

**[ListOrganizationMembershipsResponse](../../Models/Operations/ListOrganizationMembershipsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates the properties of an existing organization membership

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationMemberships.UpdateAsync(
    organizationId: "org_12345",
    userId: "user_67890",
    requestBody: new UpdateOrganizationMembershipRequestBody() {
        Role = "admin",
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                     | Type                                                                                                          | Required                                                                                                      | Description                                                                                                   | Example                                                                                                       |
| ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                              | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the organization the membership belongs to                                                          | org_12345                                                                                                     |
| `UserId`                                                                                                      | *string*                                                                                                      | :heavy_check_mark:                                                                                            | The ID of the user that this membership belongs to                                                            | user_67890                                                                                                    |
| `RequestBody`                                                                                                 | [UpdateOrganizationMembershipRequestBody](../../Models/Operations/UpdateOrganizationMembershipRequestBody.md) | :heavy_check_mark:                                                                                            | N/A                                                                                                           |                                                                                                               |

### Response

**[UpdateOrganizationMembershipResponse](../../Models/Operations/UpdateOrganizationMembershipResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Removes the given membership from the organization

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationMemberships.DeleteAsync(
    organizationId: "org_12345",
    userId: "user_67890"
);

// handle response
```

### Parameters

| Parameter                                            | Type                                                 | Required                                             | Description                                          | Example                                              |
| ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- |
| `OrganizationId`                                     | *string*                                             | :heavy_check_mark:                                   | The ID of the organization the membership belongs to | org_12345                                            |
| `UserId`                                             | *string*                                             | :heavy_check_mark:                                   | The ID of the user that this membership belongs to   | user_67890                                           |

### Response

**[DeleteOrganizationMembershipResponse](../../Models/Operations/DeleteOrganizationMembershipResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## UpdateMetadata

Update an organization membership's metadata attributes by merging existing values with the provided parameters.
Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well.
You can remove metadata keys at any level by setting their value to `null`.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.OrganizationMemberships.UpdateMetadataAsync(
    organizationId: "org_123456",
    userId: "user_654321",
    requestBody: new UpdateOrganizationMembershipMetadataRequestBody() {
        PublicMetadata = new Dictionary<string, object>() {

        },
        PrivateMetadata = new Dictionary<string, object>() {

        },
    }
);

// handle response
```

### Parameters

| Parameter                                                                                                                     | Type                                                                                                                          | Required                                                                                                                      | Description                                                                                                                   | Example                                                                                                                       |
| ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                                              | *string*                                                                                                                      | :heavy_check_mark:                                                                                                            | The ID of the organization the membership belongs to                                                                          | org_123456                                                                                                                    |
| `UserId`                                                                                                                      | *string*                                                                                                                      | :heavy_check_mark:                                                                                                            | The ID of the user that this membership belongs to                                                                            | user_654321                                                                                                                   |
| `RequestBody`                                                                                                                 | [UpdateOrganizationMembershipMetadataRequestBody](../../Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.md) | :heavy_minus_sign:                                                                                                            | N/A                                                                                                                           |                                                                                                                               |

### Response

**[UpdateOrganizationMembershipMetadataResponse](../../Models/Operations/UpdateOrganizationMembershipMetadataResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/organizations/README.md
================
# Organizations
(*Organizations*)

## Overview

### Available Operations

* [List](#list) - Get a list of organizations for an instance
* [Create](#create) - Create an organization
* [Get](#get) - Retrieve an organization by ID or slug
* [Update](#update) - Update an organization
* [Delete](#delete) - Delete an organization
* [MergeMetadata](#mergemetadata) - Merge and update metadata for an organization
* [UploadLogo](#uploadlogo) - Upload a logo for the organization
* [DeleteLogo](#deletelogo) - Delete the organization's logo.

## List

This request returns the list of organizations for an instance.
Results can be paginated using the optional `limit` and `offset` query parameters.
The organizations are ordered by descending creation date.
Most recent organizations will be returned first.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListOrganizationsRequest req = new ListOrganizationsRequest() {
    Query = "false",
    UserId = new List<string>() {
        "clerk",
    },
    OrganizationId = new List<string>() {
        "-name",
    },
};

var res = await sdk.Organizations.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                       | Type                                                                            | Required                                                                        | Description                                                                     |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `request`                                                                       | [ListOrganizationsRequest](../../Models/Operations/ListOrganizationsRequest.md) | :heavy_check_mark:                                                              | The request object to use for the request.                                      |

### Response

**[ListOrganizationsResponse](../../Models/Operations/ListOrganizationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Creates a new organization with the given name for an instance.
You can specify an optional slug for the new organization.
If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash "-".
Organization slugs must be unique for the instance.
You can provide additional metadata for the organization and set any custom attribute you want.
Organizations support private and public metadata.
Private metadata can only be accessed from the Backend API.
Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization)
the next time they create a session, presuming they don't explicitly set a different organization as active before then.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateOrganizationRequestBody req = new CreateOrganizationRequestBody() {
    Name = "NewOrg",
    CreatedBy = "user_123",
    PrivateMetadata = new Dictionary<string, object>() {
        { "internal_code", "ABC123" },
    },
    PublicMetadata = new Dictionary<string, object>() {
        { "public_event", "Annual Summit" },
    },
    Slug = "neworg",
    MaxAllowedMemberships = 100,
};

var res = await sdk.Organizations.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                 | Type                                                                                      | Required                                                                                  | Description                                                                               |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `request`                                                                                 | [CreateOrganizationRequestBody](../../Models/Operations/CreateOrganizationRequestBody.md) | :heavy_check_mark:                                                                        | The request object to use for the request.                                                |

### Response

**[CreateOrganizationResponse](../../Models/Operations/CreateOrganizationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Organizations.GetAsync(
    organizationId: "org_123",
    includeMembersCount: false,
    includeMissingMemberWithElevatedPermissions: false
);

// handle response
```

### Parameters

| Parameter                                                                                                                      | Type                                                                                                                           | Required                                                                                                                       | Description                                                                                                                    | Example                                                                                                                        |
| ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ |
| `OrganizationId`                                                                                                               | *string*                                                                                                                       | :heavy_check_mark:                                                                                                             | The ID or slug of the organization                                                                                             | org_123                                                                                                                        |
| `IncludeMembersCount`                                                                                                          | *bool*                                                                                                                         | :heavy_minus_sign:                                                                                                             | Flag to denote whether or not the organization's members count should be included in the response.                             |                                                                                                                                |
| `IncludeMissingMemberWithElevatedPermissions`                                                                                  | *bool*                                                                                                                         | :heavy_minus_sign:                                                                                                             | Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization. |                                                                                                                                |

### Response

**[GetOrganizationResponse](../../Models/Operations/GetOrganizationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates an existing organization

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Organizations.UpdateAsync(
    organizationId: "org_123_update",
    requestBody: new UpdateOrganizationRequestBody() {
        PublicMetadata = new Dictionary<string, object>() {

        },
        PrivateMetadata = new Dictionary<string, object>() {

        },
        Name = "New Organization Name",
        Slug = "new-org-slug",
        MaxAllowedMemberships = 100,
        AdminDeleteEnabled = true,
    }
);

// handle response
```

### Parameters

| Parameter                                                                                 | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                          | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the organization to update                                                      | org_123_update                                                                            |
| `RequestBody`                                                                             | [UpdateOrganizationRequestBody](../../Models/Operations/UpdateOrganizationRequestBody.md) | :heavy_check_mark:                                                                        | N/A                                                                                       |                                                                                           |

### Response

**[UpdateOrganizationResponse](../../Models/Operations/UpdateOrganizationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 404, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Deletes the given organization.
Please note that deleting an organization will also delete all memberships and invitations.
This is not reversible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Organizations.DeleteAsync(organizationId: "org_321_delete");

// handle response
```

### Parameters

| Parameter                            | Type                                 | Required                             | Description                          | Example                              |
| ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ |
| `OrganizationId`                     | *string*                             | :heavy_check_mark:                   | The ID of the organization to delete | org_321_delete                       |

### Response

**[DeleteOrganizationResponse](../../Models/Operations/DeleteOrganizationResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## MergeMetadata

Update organization metadata attributes by merging existing values with the provided parameters.
Metadata values will be updated via a deep merge.
Deep meaning that any nested JSON objects will be merged as well.
You can remove metadata keys at any level by setting their value to `null`.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Organizations.MergeMetadataAsync(
    organizationId: "org_12345",
    requestBody: new MergeOrganizationMetadataRequestBody() {
        PublicMetadata = new Dictionary<string, object>() {
            { "announcement", "We are opening a new office!" },
        },
        PrivateMetadata = new Dictionary<string, object>() {
            { "internal_use_only", "Future plans discussion." },
        },
    }
);

// handle response
```

### Parameters

| Parameter                                                                                               | Type                                                                                                    | Required                                                                                                | Description                                                                                             | Example                                                                                                 |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                        | *string*                                                                                                | :heavy_check_mark:                                                                                      | The ID of the organization for which metadata will be merged or updated                                 | org_12345                                                                                               |
| `RequestBody`                                                                                           | [MergeOrganizationMetadataRequestBody](../../Models/Operations/MergeOrganizationMetadataRequestBody.md) | :heavy_check_mark:                                                                                      | N/A                                                                                                     |                                                                                                         |

### Response

**[MergeOrganizationMetadataResponse](../../Models/Operations/MergeOrganizationMetadataResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## UploadLogo

Set or replace an organization's logo, by uploading an image file.
This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.
The file size cannot exceed 10MB.
Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Organizations.UploadLogoAsync(
    organizationId: "org_12345",
    requestBody: new UploadOrganizationLogoRequestBody() {
        UploaderUserId = "user_67890",
        File = new UploadOrganizationLogoFile() {
            FileName = "example.file",
            Content = System.Text.Encoding.UTF8.GetBytes("0x0DDEE4e6Ea"),
        },
    }
);

// handle response
```

### Parameters

| Parameter                                                                                         | Type                                                                                              | Required                                                                                          | Description                                                                                       | Example                                                                                           |
| ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| `OrganizationId`                                                                                  | *string*                                                                                          | :heavy_check_mark:                                                                                | The ID of the organization for which to upload a logo                                             | org_12345                                                                                         |
| `RequestBody`                                                                                     | [UploadOrganizationLogoRequestBody](../../Models/Operations/UploadOrganizationLogoRequestBody.md) | :heavy_minus_sign:                                                                                | N/A                                                                                               |                                                                                                   |

### Response

**[UploadOrganizationLogoResponse](../../Models/Operations/UploadOrganizationLogoResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404, 413                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteLogo

Delete the organization's logo.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Organizations.DeleteLogoAsync(organizationId: "org_12345");

// handle response
```

### Parameters

| Parameter                                                      | Type                                                           | Required                                                       | Description                                                    | Example                                                        |
| -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- |
| `OrganizationId`                                               | *string*                                                       | :heavy_check_mark:                                             | The ID of the organization for which the logo will be deleted. | org_12345                                                      |

### Response

**[DeleteOrganizationLogoResponse](../../Models/Operations/DeleteOrganizationLogoResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/phonenumbers/README.md
================
# PhoneNumbers
(*PhoneNumbers*)

## Overview

### Available Operations

* [Create](#create) - Create a phone number
* [Get](#get) - Retrieve a phone number
* [Delete](#delete) - Delete a phone number
* [Update](#update) - Update a phone number

## Create

Create a new phone number

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreatePhoneNumberRequestBody req = new CreatePhoneNumberRequestBody() {
    UserId = "usr_12345",
    PhoneNumber = "+11234567890",
    Verified = true,
    Primary = false,
    ReservedForSecondFactor = false,
};

var res = await sdk.PhoneNumbers.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `request`                                                                               | [CreatePhoneNumberRequestBody](../../Models/Operations/CreatePhoneNumberRequestBody.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |

### Response

**[CreatePhoneNumberResponse](../../Models/Operations/CreatePhoneNumberResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404, 422                    | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Returns the details of a phone number

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.PhoneNumbers.GetAsync(phoneNumberId: "phone_12345");

// handle response
```

### Parameters

| Parameter                              | Type                                   | Required                               | Description                            | Example                                |
| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |
| `PhoneNumberId`                        | *string*                               | :heavy_check_mark:                     | The ID of the phone number to retrieve | phone_12345                            |

### Response

**[GetPhoneNumberResponse](../../Models/Operations/GetPhoneNumberResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Delete the phone number with the given ID

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.PhoneNumbers.DeleteAsync(phoneNumberId: "phone_12345");

// handle response
```

### Parameters

| Parameter                            | Type                                 | Required                             | Description                          | Example                              |
| ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ |
| `PhoneNumberId`                      | *string*                             | :heavy_check_mark:                   | The ID of the phone number to delete | phone_12345                          |

### Response

**[DeletePhoneNumberResponse](../../Models/Operations/DeletePhoneNumberResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates a phone number

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.PhoneNumbers.UpdateAsync(
    phoneNumberId: "phone_12345",
    requestBody: new UpdatePhoneNumberRequestBody() {
        Verified = false,
        Primary = true,
        ReservedForSecondFactor = true,
    }
);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             | Example                                                                                 |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `PhoneNumberId`                                                                         | *string*                                                                                | :heavy_check_mark:                                                                      | The ID of the phone number to update                                                    | phone_12345                                                                             |
| `RequestBody`                                                                           | [UpdatePhoneNumberRequestBody](../../Models/Operations/UpdatePhoneNumberRequestBody.md) | :heavy_minus_sign:                                                                      | N/A                                                                                     |                                                                                         |

### Response

**[UpdatePhoneNumberResponse](../../Models/Operations/UpdatePhoneNumberResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 404                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/proxychecks/README.md
================
# ProxyChecks
(*ProxyChecks*)

## Overview

### Available Operations

* [Verify](#verify) - Verify the proxy configuration for your domain

## Verify

This endpoint can be used to validate that a proxy-enabled domain is operational.
It tries to verify that the proxy URL provided in the parameters maps to a functional proxy that can reach the Clerk Frontend API.

You can use this endpoint before you set a proxy URL for a domain. This way you can ensure that switching to proxy-based
configuration will not lead to downtime for your instance.

The `proxy_url` parameter allows for testing proxy configurations for domains that don't have a proxy URL yet, or operate on
a different proxy URL than the one provided. It can also be used to re-validate a domain that is already configured to work with a proxy.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

VerifyDomainProxyRequestBody req = new VerifyDomainProxyRequestBody() {
    DomainId = "domain_32hfu3e",
    ProxyUrl = "https://example.com/__clerk",
};

var res = await sdk.ProxyChecks.VerifyAsync(req);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `request`                                                                               | [VerifyDomainProxyRequestBody](../../Models/Operations/VerifyDomainProxyRequestBody.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |

### Response

**[VerifyDomainProxyResponse](../../Models/Operations/VerifyDomainProxyResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/redirecturls/README.md
================
# RedirectUrls
(*RedirectUrls*)

## Overview

### Available Operations

* [List](#list) - List all redirect URLs
* [Create](#create) - Create a redirect URL
* [Get](#get) - Retrieve a redirect URL
* [Delete](#delete) - Delete a redirect URL

## List

Lists all whitelisted redirect_urls for the instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.RedirectUrls.ListAsync(
    paginated: false,
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `Paginated`                                                                                                                               | *bool*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[ListRedirectURLsResponse](../../Models/Operations/ListRedirectURLsResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

## Create

Create a redirect URL

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateRedirectURLRequestBody req = new CreateRedirectURLRequestBody() {
    Url = "https://my-app.com/oauth-callback",
};

var res = await sdk.RedirectUrls.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `request`                                                                               | [CreateRedirectURLRequestBody](../../Models/Operations/CreateRedirectURLRequestBody.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |

### Response

**[CreateRedirectURLResponse](../../Models/Operations/CreateRedirectURLResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Retrieve the details of the redirect URL with the given ID

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.RedirectUrls.GetAsync(id: "redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3");

// handle response
```

### Parameters

| Parameter                        | Type                             | Required                         | Description                      | Example                          |
| -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- |
| `Id`                             | *string*                         | :heavy_check_mark:               | The ID of the redirect URL       | redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3 |

### Response

**[GetRedirectURLResponse](../../Models/Operations/GetRedirectURLResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Remove the selected redirect URL from the whitelist of the instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.RedirectUrls.DeleteAsync(id: "redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3");

// handle response
```

### Parameters

| Parameter                        | Type                             | Required                         | Description                      | Example                          |
| -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- |
| `Id`                             | *string*                         | :heavy_check_mark:               | The ID of the redirect URL       | redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3 |

### Response

**[DeleteRedirectURLResponse](../../Models/Operations/DeleteRedirectURLResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/samlconnections/README.md
================
# SamlConnections
(*SamlConnections*)

## Overview

### Available Operations

* [List](#list) - Get a list of SAML Connections for an instance
* [Create](#create) - Create a SAML Connection
* [Get](#get) - Retrieve a SAML Connection by ID
* [Update](#update) - Update a SAML Connection
* [Delete](#delete) - Delete a SAML Connection

## List

Returns the list of SAML Connections for an instance.
Results can be paginated using the optional `limit` and `offset` query parameters.
The SAML Connections are ordered by descending creation date and the most recent will be returned first.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListSAMLConnectionsRequest req = new ListSAMLConnectionsRequest() {};

var res = await sdk.SamlConnections.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                           | Type                                                                                | Required                                                                            | Description                                                                         |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `request`                                                                           | [ListSAMLConnectionsRequest](../../Models/Operations/ListSAMLConnectionsRequest.md) | :heavy_check_mark:                                                                  | The request object to use for the request.                                          |

### Response

**[ListSAMLConnectionsResponse](../../Models/Operations/ListSAMLConnectionsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 403, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Create a new SAML Connection.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateSAMLConnectionRequestBody req = new CreateSAMLConnectionRequestBody() {
    Name = "My SAML Connection",
    Domain = "example.org",
    Provider = Provider.SamlCustom,
    IdpEntityId = "http://idp.example.org/",
    IdpSsoUrl = "http://idp.example.org/sso",
    IdpCertificate = "MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT...",
    IdpMetadataUrl = "http://idp.example.org/metadata.xml",
    IdpMetadata = "<EntityDescriptor ...",
    AttributeMapping = new AttributeMapping() {
        UserId = "nameid",
        EmailAddress = "mail",
        FirstName = "givenName",
        LastName = "surname",
    },
};

var res = await sdk.SamlConnections.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                     | Type                                                                                          | Required                                                                                      | Description                                                                                   |
| --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| `request`                                                                                     | [CreateSAMLConnectionRequestBody](../../Models/Operations/CreateSAMLConnectionRequestBody.md) | :heavy_check_mark:                                                                            | The request object to use for the request.                                                    |

### Response

**[CreateSAMLConnectionResponse](../../Models/Operations/CreateSAMLConnectionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.SamlConnections.GetAsync(samlConnectionId: "saml_conn_123");

// handle response
```

### Parameters

| Parameter                     | Type                          | Required                      | Description                   | Example                       |
| ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- |
| `SamlConnectionId`            | *string*                      | :heavy_check_mark:            | The ID of the SAML Connection | saml_conn_123                 |

### Response

**[GetSAMLConnectionResponse](../../Models/Operations/GetSAMLConnectionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Updates the SAML Connection whose ID matches the provided `id` in the path.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.SamlConnections.UpdateAsync(
    samlConnectionId: "saml_conn_123_update",
    requestBody: new UpdateSAMLConnectionRequestBody() {
        Name = "Example SAML Connection",
        Domain = "example.com",
        IdpEntityId = "entity_123",
        IdpSsoUrl = "https://idp.example.com/sso",
        IdpCertificate = "MIIDBTCCAe2gAwIBAgIQ...",
        IdpMetadataUrl = "https://idp.example.com/metadata",
        IdpMetadata = "<EntityDescriptor>...</EntityDescriptor>",
        AttributeMapping = new UpdateSAMLConnectionAttributeMapping() {
            UserId = "id123",
            EmailAddress = "user@example.com",
            FirstName = "Jane",
            LastName = "Doe",
        },
        Active = true,
        SyncUserAttributes = false,
        AllowSubdomains = true,
        AllowIdpInitiated = false,
    }
);

// handle response
```

### Parameters

| Parameter                                                                                     | Type                                                                                          | Required                                                                                      | Description                                                                                   | Example                                                                                       |
| --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| `SamlConnectionId`                                                                            | *string*                                                                                      | :heavy_check_mark:                                                                            | The ID of the SAML Connection to update                                                       | saml_conn_123_update                                                                          |
| `RequestBody`                                                                                 | [UpdateSAMLConnectionRequestBody](../../Models/Operations/UpdateSAMLConnectionRequestBody.md) | :heavy_check_mark:                                                                            | N/A                                                                                           |                                                                                               |

### Response

**[UpdateSAMLConnectionResponse](../../Models/Operations/UpdateSAMLConnectionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 403, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Deletes the SAML Connection whose ID matches the provided `id` in the path.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.SamlConnections.DeleteAsync(samlConnectionId: "saml_conn_123_delete");

// handle response
```

### Parameters

| Parameter                               | Type                                    | Required                                | Description                             | Example                                 |
| --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- | --------------------------------------- |
| `SamlConnectionId`                      | *string*                                | :heavy_check_mark:                      | The ID of the SAML Connection to delete | saml_conn_123_delete                    |

### Response

**[DeleteSAMLConnectionResponse](../../Models/Operations/DeleteSAMLConnectionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/sessions/README.md
================
# Sessions
(*Sessions*)

## Overview

### Available Operations

* [List](#list) - List all sessions
* [Create](#create) - Create a new active session
* [Get](#get) - Retrieve a session
* [Revoke](#revoke) - Revoke a session
* [~~Verify~~](#verify) - Verify a session :warning: **Deprecated**
* [CreateToken](#createtoken) - Create a session token
* [CreateTokenFromTemplate](#createtokenfromtemplate) - Create a session token from a jwt template

## List

Returns a list of all sessions.
The sessions are returned sorted by creation date, with the newest sessions appearing first.
**Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however
moving forward at least one of `client_id` or `user_id` parameters should be provided.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

GetSessionListRequest req = new GetSessionListRequest() {
    ClientId = "client_123",
    UserId = "user_456",
    Status = Status.Active,
};

var res = await sdk.Sessions.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                 | Type                                                                      | Required                                                                  | Description                                                               |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `request`                                                                 | [GetSessionListRequest](../../Models/Operations/GetSessionListRequest.md) | :heavy_check_mark:                                                        | The request object to use for the request.                                |

### Response

**[GetSessionListResponse](../../Models/Operations/GetSessionListResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Create a new active session for the provided user ID.

**This operation is intended only for use in testing, and is not available for production instances.** If you are looking to generate a user session from the backend,
we recommend using the [Sign-in Tokens](https://clerk.com/docs/reference/backend-api/tag/Sign-in-Tokens#operation/CreateSignInToken) resource instead.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateSessionRequestBody req = new CreateSessionRequestBody() {
    UserId = "<id>",
};

var res = await sdk.Sessions.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                       | Type                                                                            | Required                                                                        | Description                                                                     |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `request`                                                                       | [CreateSessionRequestBody](../../Models/Operations/CreateSessionRequestBody.md) | :heavy_check_mark:                                                              | The request object to use for the request.                                      |

### Response

**[CreateSessionResponse](../../Models/Operations/CreateSessionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Retrieve the details of a session

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Sessions.GetAsync(sessionId: "sess_1234567890abcdef");

// handle response
```

### Parameters

| Parameter             | Type                  | Required              | Description           | Example               |
| --------------------- | --------------------- | --------------------- | --------------------- | --------------------- |
| `SessionId`           | *string*              | :heavy_check_mark:    | The ID of the session | sess_1234567890abcdef |

### Response

**[GetSessionResponse](../../Models/Operations/GetSessionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Revoke

Sets the status of a session as "revoked", which is an unauthenticated state.
In multi-session mode, a revoked session will still be returned along with its client object, however the user will need to sign in again.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Sessions.RevokeAsync(sessionId: "sess_1234567890abcdef");

// handle response
```

### Parameters

| Parameter             | Type                  | Required              | Description           | Example               |
| --------------------- | --------------------- | --------------------- | --------------------- | --------------------- |
| `SessionId`           | *string*              | :heavy_check_mark:    | The ID of the session | sess_1234567890abcdef |

### Response

**[RevokeSessionResponse](../../Models/Operations/RevokeSessionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## ~~Verify~~

Returns the session if it is authenticated, otherwise returns an error.
WARNING: This endpoint is deprecated and will be removed in future versions. We strongly recommend switching to networkless verification using short-lived session tokens,
         which is implemented transparently in all recent SDK versions (e.g. [NodeJS SDK](https://clerk.com/docs/backend-requests/handling/nodejs#clerk-express-require-auth)).
         For more details on how networkless verification works, refer to our [Session Tokens documentation](https://clerk.com/docs/backend-requests/resources/session-tokens).

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Sessions.VerifyAsync(
    sessionId: "sess_w8q4g9s60j28fghv00f3",
    requestBody: new VerifySessionRequestBody() {
        Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoic2Vzc193OHF4ZzZzNm9qMjhmZ2h2MDBmMyIsImlhdCI6MTU4MjY0OTg2Mn0.J4KP2L6bEZ6YccHFW4E2vKbOLw_mmO0gF_GNRw-wtLM",
    }
);

// handle response
```

### Parameters

| Parameter                                                                       | Type                                                                            | Required                                                                        | Description                                                                     | Example                                                                         |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| `SessionId`                                                                     | *string*                                                                        | :heavy_check_mark:                                                              | The ID of the session                                                           | sess_w8q4g9s60j28fghv00f3                                                       |
| `RequestBody`                                                                   | [VerifySessionRequestBody](../../Models/Operations/VerifySessionRequestBody.md) | :heavy_minus_sign:                                                              | Parameters.                                                                     |                                                                                 |

### Response

**[VerifySessionResponse](../../Models/Operations/VerifySessionResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404, 410                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## CreateToken

Creates a session JSON Web Token (JWT) based on a session.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Sessions.CreateTokenAsync(
    sessionId: "<id>",
    requestBody: new CreateSessionTokenRequestBody() {}
);

// handle response
```

### Parameters

| Parameter                                                                                 | Type                                                                                      | Required                                                                                  | Description                                                                               |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `SessionId`                                                                               | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the session                                                                     |
| `RequestBody`                                                                             | [CreateSessionTokenRequestBody](../../Models/Operations/CreateSessionTokenRequestBody.md) | :heavy_minus_sign:                                                                        | N/A                                                                                       |

### Response

**[CreateSessionTokenResponse](../../Models/Operations/CreateSessionTokenResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## CreateTokenFromTemplate

Creates a JSON Web Token(JWT) based on a session and a JWT Template name defined for your instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Sessions.CreateTokenFromTemplateAsync(
    sessionId: "ses_123abcd4567",
    templateName: "custom_hasura",
    requestBody: new CreateSessionTokenFromTemplateRequestBody() {}
);

// handle response
```

### Parameters

| Parameter                                                                                                         | Type                                                                                                              | Required                                                                                                          | Description                                                                                                       | Example                                                                                                           |
| ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| `SessionId`                                                                                                       | *string*                                                                                                          | :heavy_check_mark:                                                                                                | The ID of the session                                                                                             | ses_123abcd4567                                                                                                   |
| `TemplateName`                                                                                                    | *string*                                                                                                          | :heavy_check_mark:                                                                                                | The name of the JWT Template defined in your instance (e.g. `custom_hasura`).                                     | custom_hasura                                                                                                     |
| `RequestBody`                                                                                                     | [CreateSessionTokenFromTemplateRequestBody](../../Models/Operations/CreateSessionTokenFromTemplateRequestBody.md) | :heavy_minus_sign:                                                                                                | N/A                                                                                                               |                                                                                                                   |

### Response

**[CreateSessionTokenFromTemplateResponse](../../Models/Operations/CreateSessionTokenFromTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 401, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/signintokens/README.md
================
# SignInTokens
(*SignInTokens*)

## Overview

### Available Operations

* [Create](#create) - Create sign-in token
* [Revoke](#revoke) - Revoke the given sign-in token

## Create

Creates a new sign-in token and associates it with the given user.
By default, sign-in tokens expire in 30 days.
You can optionally supply a different duration in seconds using the `expires_in_seconds` property.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateSignInTokenRequestBody req = new CreateSignInTokenRequestBody() {
    UserId = "user_12345",
};

var res = await sdk.SignInTokens.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `request`                                                                               | [CreateSignInTokenRequestBody](../../Models/Operations/CreateSignInTokenRequestBody.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |

### Response

**[CreateSignInTokenResponse](../../Models/Operations/CreateSignInTokenResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Revoke

Revokes a pending sign-in token

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.SignInTokens.RevokeAsync(signInTokenId: "tok_test_1234567890");

// handle response
```

### Parameters

| Parameter                                 | Type                                      | Required                                  | Description                               | Example                                   |
| ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- |
| `SignInTokenId`                           | *string*                                  | :heavy_check_mark:                        | The ID of the sign-in token to be revoked | tok_test_1234567890                       |

### Response

**[RevokeSignInTokenResponse](../../Models/Operations/RevokeSignInTokenResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/signups/README.md
================
# SignUps
(*SignUps*)

## Overview

### Available Operations

* [Get](#get) - Retrieve a sign-up by ID
* [Update](#update) - Update a sign-up

## Get

Retrieve the details of the sign-up with the given ID

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.SignUps.GetAsync(id: "<id>");

// handle response
```

### Parameters

| Parameter                         | Type                              | Required                          | Description                       |
| --------------------------------- | --------------------------------- | --------------------------------- | --------------------------------- |
| `Id`                              | *string*                          | :heavy_check_mark:                | The ID of the sign-up to retrieve |

### Response

**[GetSignUpResponse](../../Models/Operations/GetSignUpResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Update the sign-up with the given ID

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.SignUps.UpdateAsync(
    id: "signup_1234567890abcdef",
    requestBody: new UpdateSignUpRequestBody() {
        ExternalId = "ext_id_7890abcdef123456",
        CustomAction = false,
    }
);

// handle response
```

### Parameters

| Parameter                                                                     | Type                                                                          | Required                                                                      | Description                                                                   | Example                                                                       |
| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `Id`                                                                          | *string*                                                                      | :heavy_check_mark:                                                            | The ID of the sign-up to update                                               | signup_1234567890abcdef                                                       |
| `RequestBody`                                                                 | [UpdateSignUpRequestBody](../../Models/Operations/UpdateSignUpRequestBody.md) | :heavy_minus_sign:                                                            | N/A                                                                           |                                                                               |

### Response

**[UpdateSignUpResponse](../../Models/Operations/UpdateSignUpResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/templates/README.md
================
# Templates
(*Templates*)

## Overview

### Available Operations

* [~~Preview~~](#preview) - Preview changes to a template :warning: **Deprecated**

## ~~Preview~~

Returns a preview of a template for a given template_type, slug and body

> :warning: **DEPRECATED**: This will be removed in a future release, please migrate away from it as soon as possible.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Templates.PreviewAsync(
    templateType: "email",
    slug: "welcome-email",
    requestBody: new PreviewTemplateRequestBody() {
        Subject = "Welcome to our service!",
        Body = "Hi, thank you for joining our service.",
        FromEmailName = "hello",
        ReplyToEmailName = "support",
    }
);

// handle response
```

### Parameters

| Parameter                                                                           | Type                                                                                | Required                                                                            | Description                                                                         | Example                                                                             |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `TemplateType`                                                                      | *string*                                                                            | :heavy_check_mark:                                                                  | The type of template to preview                                                     | email                                                                               |
| `Slug`                                                                              | *string*                                                                            | :heavy_check_mark:                                                                  | The slug of the template to preview                                                 | welcome-email                                                                       |
| `RequestBody`                                                                       | [PreviewTemplateRequestBody](../../Models/Operations/PreviewTemplateRequestBody.md) | :heavy_minus_sign:                                                                  | Required parameters                                                                 |                                                                                     |

### Response

**[PreviewTemplateResponse](../../Models/Operations/PreviewTemplateResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/testingtokens/README.md
================
# TestingTokens
(*TestingTokens*)

## Overview

### Available Operations

* [Create](#create) - Retrieve a new testing token

## Create

Retrieve a new testing token.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.TestingTokens.CreateAsync();

// handle response
```

### Response

**[CreateTestingTokenResponse](../../Models/Operations/CreateTestingTokenResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

================
File: docs/sdks/users/README.md
================
# Users
(*Users*)

## Overview

### Available Operations

* [List](#list) - List all users
* [Create](#create) - Create a new user
* [Count](#count) - Count users
* [Get](#get) - Retrieve a user
* [Update](#update) - Update a user
* [Delete](#delete) - Delete a user
* [Ban](#ban) - Ban a user
* [Unban](#unban) - Unban a user
* [Lock](#lock) - Lock a user
* [Unlock](#unlock) - Unlock a user
* [SetProfileImage](#setprofileimage) - Set user profile image
* [DeleteProfileImage](#deleteprofileimage) - Delete user profile image
* [UpdateMetadata](#updatemetadata) - Merge and update a user's metadata
* [GetOAuthAccessToken](#getoauthaccesstoken) - Retrieve the OAuth access token of a user
* [GetOrganizationMemberships](#getorganizationmemberships) - Retrieve all memberships for a user
* [GetOrganizationInvitations](#getorganizationinvitations) - Retrieve all invitations for a user
* [VerifyPassword](#verifypassword) - Verify the password of a user
* [VerifyTotp](#verifytotp) - Verify a TOTP or backup code for a user
* [DisableMfa](#disablemfa) - Disable a user's MFA methods
* [DeleteBackupCodes](#deletebackupcodes) - Disable all user's Backup codes
* [DeletePasskey](#deletepasskey) - Delete a user passkey
* [DeleteWeb3Wallet](#deleteweb3wallet) - Delete a user web3 wallet
* [DeleteTOTP](#deletetotp) - Delete all the user's TOTPs
* [DeleteExternalAccount](#deleteexternalaccount) - Delete External Account
* [GetInstanceOrganizationMemberships](#getinstanceorganizationmemberships) - Get a list of all organization memberships within an instance.

## List

Returns a list of all users.
The users are returned sorted by creation date, with the newest users appearing first.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

GetUserListRequest req = new GetUserListRequest() {
    EmailAddress = new List<string>() {
        "test@example.com",
    },
    PhoneNumber = new List<string>() {
        "+12345678901",
    },
    ExternalId = new List<string>() {
        "external-id-123",
    },
    Username = new List<string>() {
        "user123",
    },
    Web3Wallet = new List<string>() {
        "0x123456789abcdef0x123456789abcdef",
    },
    UserId = new List<string>() {
        "user-id-123",
    },
    OrganizationId = new List<string>() {
        "org-id-123",
    },
    Query = "John",
    LastActiveAtBefore = 1700690400000,
    LastActiveAtAfter = 1700690400000,
    CreatedAtBefore = 1730160000000,
    CreatedAtAfter = 1730160000000,
};

var res = await sdk.Users.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                           | Type                                                                | Required                                                            | Description                                                         |
| ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `request`                                                           | [GetUserListRequest](../../Models/Operations/GetUserListRequest.md) | :heavy_check_mark:                                                  | The request object to use for the request.                          |

### Response

**[GetUserListResponse](../../Models/Operations/GetUserListResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Create

Creates a new user. Your user management settings determine how you should setup your user model.

Any email address and phone number created using this method will be marked as verified.

Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).

A rate limit rule of 20 requests per 10 seconds is applied to this endpoint.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateUserRequestBody req = new CreateUserRequestBody() {
    ExternalId = "ext-id-001",
    FirstName = "John",
    LastName = "Doe",
    EmailAddress = new List<string>() {
        "john.doe@example.com",
    },
    PhoneNumber = new List<string>() {
        "+12345678901",
    },
    Web3Wallet = new List<string>() {
        "0x123456789abcdef0x123456789abcdef",
    },
    Username = "johndoe123",
    Password = "Secure*Pass4",
    PasswordDigest = "$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc",
    SkipPasswordChecks = false,
    SkipPasswordRequirement = false,
    TotpSecret = "base32totpsecretkey",
    BackupCodes = new List<string>() {
        "123456",
        "654321",
    },
    PublicMetadata = new Dictionary<string, object>() {
        { "role", "user" },
    },
    PrivateMetadata = new Dictionary<string, object>() {
        { "internal_id", "789" },
    },
    UnsafeMetadata = new Dictionary<string, object>() {
        { "preferences", new Dictionary<string, object>() {
            { "theme", "dark" },
        } },
    },
    CreatedAt = "2023-03-15T07:15:20.902Z",
};

var res = await sdk.Users.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                 | Type                                                                      | Required                                                                  | Description                                                               |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `request`                                                                 | [CreateUserRequestBody](../../Models/Operations/CreateUserRequestBody.md) | :heavy_check_mark:                                                        | The request object to use for the request.                                |

### Response

**[CreateUserResponse](../../Models/Operations/CreateUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 403, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Count

Returns a total count of all users that match the given filtering criteria.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

GetUsersCountRequest req = new GetUsersCountRequest() {
    EmailAddress = new List<string>() {
        "user@example.com",
    },
    PhoneNumber = new List<string>() {
        "+1234567890",
    },
    ExternalId = new List<string>() {
        "external-id-123",
    },
    Username = new List<string>() {
        "username123",
    },
    Web3Wallet = new List<string>() {
        "0x123456789abcdef",
    },
    UserId = new List<string>() {
        "user-id-123",
    },
    OrganizationId = new List<string>() {
        "John Doe",
    },
    LastActiveAtBefore = 1700690400000,
    LastActiveAtAfter = 1700690400000,
    CreatedAtBefore = 1730160000000,
    CreatedAtAfter = 1730160000000,
};

var res = await sdk.Users.CountAsync(req);

// handle response
```

### Parameters

| Parameter                                                               | Type                                                                    | Required                                                                | Description                                                             |
| ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| `request`                                                               | [GetUsersCountRequest](../../Models/Operations/GetUsersCountRequest.md) | :heavy_check_mark:                                                      | The request object to use for the request.                              |

### Response

**[GetUsersCountResponse](../../Models/Operations/GetUsersCountResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 422                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Get

Retrieve the details of a user

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.GetAsync(userId: "usr_1");

// handle response
```

### Parameters

| Parameter                      | Type                           | Required                       | Description                    | Example                        |
| ------------------------------ | ------------------------------ | ------------------------------ | ------------------------------ | ------------------------------ |
| `UserId`                       | *string*                       | :heavy_check_mark:             | The ID of the user to retrieve | usr_1                          |

### Response

**[GetUserResponse](../../Models/Operations/GetUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Update

Update a user's attributes.

You can set the user's primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.
Both IDs should correspond to verified identifications that belong to the user.

You can remove a user's username by setting the username attribute to null or the blank string "".
This is a destructive action; the identification will be deleted forever.
Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.

This endpoint allows changing a user's password. When passing the `password` parameter directly you have two further options.
You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.
You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;
using System.Collections.Generic;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.UpdateAsync(
    userId: "usr_1",
    requestBody: new UpdateUserRequestBody() {
        ExternalId = "ext_123",
        FirstName = "Jane",
        LastName = "Doe",
        PrimaryEmailAddressId = "eml_12345",
        PrimaryPhoneNumberId = "phn_67890",
        PrimaryWeb3WalletId = "wlt_123",
        Username = "janedoe",
        ProfileImageId = "img_789",
        Password = "secretPass123!",
        PasswordDigest = "$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc",
        SkipPasswordChecks = false,
        SignOutOfOtherSessions = true,
        TotpSecret = "ABCD1234EFGH5678",
        BackupCodes = new List<string>() {
            "123456",
            "654321",
        },
        PublicMetadata = new Dictionary<string, object>() {
            { "theme", "dark" },
        },
        PrivateMetadata = new Dictionary<string, object>() {
            { "vip", true },
        },
        UnsafeMetadata = new Dictionary<string, object>() {
            { "age", 30 },
        },
        DeleteSelfEnabled = true,
        CreateOrganizationEnabled = false,
        CreatedAt = "2021-04-05T14:30:00.000Z",
    }
);

// handle response
```

### Parameters

| Parameter                                                                 | Type                                                                      | Required                                                                  | Description                                                               | Example                                                                   |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `UserId`                                                                  | *string*                                                                  | :heavy_check_mark:                                                        | The ID of the user to update                                              | usr_1                                                                     |
| `RequestBody`                                                             | [UpdateUserRequestBody](../../Models/Operations/UpdateUserRequestBody.md) | :heavy_check_mark:                                                        | N/A                                                                       |                                                                           |

### Response

**[UpdateUserResponse](../../Models/Operations/UpdateUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Delete

Delete the specified user

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeleteAsync(userId: "usr_1");

// handle response
```

### Parameters

| Parameter                    | Type                         | Required                     | Description                  | Example                      |
| ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |
| `UserId`                     | *string*                     | :heavy_check_mark:           | The ID of the user to delete | usr_1                        |

### Response

**[DeleteUserResponse](../../Models/Operations/DeleteUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Ban

Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.BanAsync(userId: "user_12345");

// handle response
```

### Parameters

| Parameter                 | Type                      | Required                  | Description               | Example                   |
| ------------------------- | ------------------------- | ------------------------- | ------------------------- | ------------------------- |
| `UserId`                  | *string*                  | :heavy_check_mark:        | The ID of the user to ban | user_12345                |

### Response

**[BanUserResponse](../../Models/Operations/BanUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Unban

Removes the ban mark from the given user.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.UnbanAsync(userId: "user_12345");

// handle response
```

### Parameters

| Parameter                   | Type                        | Required                    | Description                 | Example                     |
| --------------------------- | --------------------------- | --------------------------- | --------------------------- | --------------------------- |
| `UserId`                    | *string*                    | :heavy_check_mark:          | The ID of the user to unban | user_12345                  |

### Response

**[UnbanUserResponse](../../Models/Operations/UnbanUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 402                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Lock

Marks the given user as locked, which means they are not allowed to sign in again until the lock expires.
Lock duration can be configured in the instance's restrictions settings.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.LockAsync(userId: "user_123456789");

// handle response
```

### Parameters

| Parameter                  | Type                       | Required                   | Description                | Example                    |
| -------------------------- | -------------------------- | -------------------------- | -------------------------- | -------------------------- |
| `UserId`                   | *string*                   | :heavy_check_mark:         | The ID of the user to lock | user_123456789             |

### Response

**[LockUserResponse](../../Models/Operations/LockUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## Unlock

Removes the lock from the given user.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.UnlockAsync(userId: "user_12345");

// handle response
```

### Parameters

| Parameter                    | Type                         | Required                     | Description                  | Example                      |
| ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |
| `UserId`                     | *string*                     | :heavy_check_mark:           | The ID of the user to unlock | user_12345                   |

### Response

**[UnlockUserResponse](../../Models/Operations/UnlockUserResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## SetProfileImage

Update a user's profile image

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.SetProfileImageAsync(
    userId: "usr_test123",
    requestBody: new SetUserProfileImageRequestBody() {}
);

// handle response
```

### Parameters

| Parameter                                                                                   | Type                                                                                        | Required                                                                                    | Description                                                                                 | Example                                                                                     |
| ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |
| `UserId`                                                                                    | *string*                                                                                    | :heavy_check_mark:                                                                          | The ID of the user to update the profile image for                                          | usr_test123                                                                                 |
| `RequestBody`                                                                               | [SetUserProfileImageRequestBody](../../Models/Operations/SetUserProfileImageRequestBody.md) | :heavy_check_mark:                                                                          | N/A                                                                                         |                                                                                             |

### Response

**[SetUserProfileImageResponse](../../Models/Operations/SetUserProfileImageResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteProfileImage

Delete a user's profile image

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeleteProfileImageAsync(userId: "usr_test123");

// handle response
```

### Parameters

| Parameter                                          | Type                                               | Required                                           | Description                                        | Example                                            |
| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- |
| `UserId`                                           | *string*                                           | :heavy_check_mark:                                 | The ID of the user to delete the profile image for | usr_test123                                        |

### Response

**[DeleteUserProfileImageResponse](../../Models/Operations/DeleteUserProfileImageResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## UpdateMetadata

Update a user's metadata attributes by merging existing values with the provided parameters.

This endpoint behaves differently than the *Update a user* endpoint.
Metadata values will not be replaced entirely.
Instead, a deep merge will be performed.
Deep means that any nested JSON objects will be merged as well.

You can remove metadata keys at any level by setting their value to `null`.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.UpdateMetadataAsync(
    userId: "user_123456789",
    requestBody: new UpdateUserMetadataRequestBody() {}
);

// handle response
```

### Parameters

| Parameter                                                                                 | Type                                                                                      | Required                                                                                  | Description                                                                               | Example                                                                                   |
| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `UserId`                                                                                  | *string*                                                                                  | :heavy_check_mark:                                                                        | The ID of the user whose metadata will be updated and merged                              | user_123456789                                                                            |
| `RequestBody`                                                                             | [UpdateUserMetadataRequestBody](../../Models/Operations/UpdateUserMetadataRequestBody.md) | :heavy_minus_sign:                                                                        | N/A                                                                                       |                                                                                           |

### Response

**[UpdateUserMetadataResponse](../../Models/Operations/UpdateUserMetadataResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404, 422                         | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## GetOAuthAccessToken

Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.
For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

GetOAuthAccessTokenRequest req = new GetOAuthAccessTokenRequest() {
    UserId = "user_123",
    Provider = "oauth_google",
};

var res = await sdk.Users.GetOAuthAccessTokenAsync(req);

// handle response
```

### Parameters

| Parameter                                                                           | Type                                                                                | Required                                                                            | Description                                                                         |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `request`                                                                           | [GetOAuthAccessTokenRequest](../../Models/Operations/GetOAuthAccessTokenRequest.md) | :heavy_check_mark:                                                                  | The request object to use for the request.                                          |

### Response

**[GetOAuthAccessTokenResponse](../../Models/Operations/GetOAuthAccessTokenResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 404, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## GetOrganizationMemberships

Retrieve a paginated list of the user's organization memberships

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.GetOrganizationMembershipsAsync(
    userId: "usr_1234567890",
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                  | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The ID of the user whose organization memberships we want to retrieve                                                                     | usr_1234567890                                                                                                                            |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |

### Response

**[UsersGetOrganizationMembershipsResponse](../../Models/Operations/UsersGetOrganizationMembershipsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## GetOrganizationInvitations

Retrieve a paginated list of the user's organization invitations

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.GetOrganizationInvitationsAsync(
    userId: "<id>",
    limit: 20,
    offset: 10,
    status: QueryParamStatus.Pending
);

// handle response
```

### Parameters

| Parameter                                                                                                                                 | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |
| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| `UserId`                                                                                                                                  | *string*                                                                                                                                  | :heavy_check_mark:                                                                                                                        | The ID of the user whose organization invitations we want to retrieve                                                                     |                                                                                                                                           |
| `Limit`                                                                                                                                   | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |
| `Offset`                                                                                                                                  | *long*                                                                                                                                    | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |
| `Status`                                                                                                                                  | [QueryParamStatus](../../Models/Operations/QueryParamStatus.md)                                                                           | :heavy_minus_sign:                                                                                                                        | Filter organization invitations based on their status                                                                                     |                                                                                                                                           |

### Response

**[UsersGetOrganizationInvitationsResponse](../../Models/Operations/UsersGetOrganizationInvitationsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## VerifyPassword

Check that the user's password matches the supplied input.
Useful for custom auth flows and re-verification.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.VerifyPasswordAsync(
    userId: "user_123",
    requestBody: new VerifyPasswordRequestBody() {
        Password = "securepassword123",
    }
);

// handle response
```

### Parameters

| Parameter                                                                         | Type                                                                              | Required                                                                          | Description                                                                       | Example                                                                           |
| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |
| `UserId`                                                                          | *string*                                                                          | :heavy_check_mark:                                                                | The ID of the user for whom to verify the password                                | user_123                                                                          |
| `RequestBody`                                                                     | [VerifyPasswordRequestBody](../../Models/Operations/VerifyPasswordRequestBody.md) | :heavy_minus_sign:                                                                | N/A                                                                               |                                                                                   |

### Response

**[VerifyPasswordResponse](../../Models/Operations/VerifyPasswordResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## VerifyTotp

Verify that the provided TOTP or backup code is valid for the user.
Verifying a backup code will result it in being consumed (i.e. it will
become invalid).
Useful for custom auth flows and re-verification.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.VerifyTotpAsync(
    userId: "usr_1a2b3c",
    requestBody: new VerifyTOTPRequestBody() {
        Code = "123456",
    }
);

// handle response
```

### Parameters

| Parameter                                                                 | Type                                                                      | Required                                                                  | Description                                                               | Example                                                                   |
| ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------- |
| `UserId`                                                                  | *string*                                                                  | :heavy_check_mark:                                                        | The ID of the user for whom to verify the TOTP                            | usr_1a2b3c                                                                |
| `RequestBody`                                                             | [VerifyTOTPRequestBody](../../Models/Operations/VerifyTOTPRequestBody.md) | :heavy_minus_sign:                                                        | N/A                                                                       |                                                                           |

### Response

**[VerifyTOTPResponse](../../Models/Operations/VerifyTOTPResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DisableMfa

Disable all of a user's MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DisableMfaAsync(userId: "user_123456");

// handle response
```

### Parameters

| Parameter                                               | Type                                                    | Required                                                | Description                                             | Example                                                 |
| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |
| `UserId`                                                | *string*                                                | :heavy_check_mark:                                      | The ID of the user whose MFA methods are to be disabled | user_123456                                             |

### Response

**[DisableMFAResponse](../../Models/Operations/DisableMFAResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteBackupCodes

Disable all of a user's backup codes.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeleteBackupCodesAsync(userId: "<id>");

// handle response
```

### Parameters

| Parameter                                                | Type                                                     | Required                                                 | Description                                              |
| -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- |
| `UserId`                                                 | *string*                                                 | :heavy_check_mark:                                       | The ID of the user whose backup codes are to be deleted. |

### Response

**[DeleteBackupCodeResponse](../../Models/Operations/DeleteBackupCodeResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeletePasskey

Delete the passkey identification for a given user and notify them through email.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeletePasskeyAsync(
    userId: "<id>",
    passkeyIdentificationId: "<id>"
);

// handle response
```

### Parameters

| Parameter                                         | Type                                              | Required                                          | Description                                       |
| ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- |
| `UserId`                                          | *string*                                          | :heavy_check_mark:                                | The ID of the user that owns the passkey identity |
| `PasskeyIdentificationId`                         | *string*                                          | :heavy_check_mark:                                | The ID of the passkey identity to be deleted      |

### Response

**[UserPasskeyDeleteResponse](../../Models/Operations/UserPasskeyDeleteResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 403, 404                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteWeb3Wallet

Delete the web3 wallet identification for a given user.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeleteWeb3WalletAsync(
    userId: "<id>",
    web3WalletIdentificationId: "<id>"
);

// handle response
```

### Parameters

| Parameter                                        | Type                                             | Required                                         | Description                                      |
| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |
| `UserId`                                         | *string*                                         | :heavy_check_mark:                               | The ID of the user that owns the web3 wallet     |
| `Web3WalletIdentificationId`                     | *string*                                         | :heavy_check_mark:                               | The ID of the web3 wallet identity to be deleted |

### Response

**[UserWeb3WalletDeleteResponse](../../Models/Operations/UserWeb3WalletDeleteResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteTOTP

Deletes all of the user's TOTPs.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeleteTOTPAsync(userId: "<id>");

// handle response
```

### Parameters

| Parameter                                        | Type                                             | Required                                         | Description                                      |
| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |
| `UserId`                                         | *string*                                         | :heavy_check_mark:                               | The ID of the user whose TOTPs are to be deleted |

### Response

**[DeleteTOTPResponse](../../Models/Operations/DeleteTOTPResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 404                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteExternalAccount

Delete an external account by ID.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.DeleteExternalAccountAsync(
    userId: "<id>",
    externalAccountId: "<id>"
);

// handle response
```

### Parameters

| Parameter                                | Type                                     | Required                                 | Description                              |
| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| `UserId`                                 | *string*                                 | :heavy_check_mark:                       | The ID of the user's external account    |
| `ExternalAccountId`                      | *string*                                 | :heavy_check_mark:                       | The ID of the external account to delete |

### Response

**[DeleteExternalAccountResponse](../../Models/Operations/DeleteExternalAccountResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 403, 404                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## GetInstanceOrganizationMemberships

Retrieves all organization user memberships for the given instance.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Users.GetInstanceOrganizationMembershipsAsync(
    orderBy: "<value>",
    limit: 20,
    offset: 10
);

// handle response
```

### Parameters

| Parameter                                                                                                                                                                                                                          | Type                                                                                                                                                                                                                               | Required                                                                                                                                                                                                                           | Description                                                                                                                                                                                                                        | Example                                                                                                                                                                                                                            |
| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `OrderBy`                                                                                                                                                                                                                          | *string*                                                                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                                                                 | Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>By prepending one of those values with + or -,<br/>we can choose to sort in ascending (ASC) or descending (DESC) order. |                                                                                                                                                                                                                                    |
| `Limit`                                                                                                                                                                                                                            | *long*                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                 | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                              | 20                                                                                                                                                                                                                                 |
| `Offset`                                                                                                                                                                                                                           | *long*                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                 | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.                                                                                  | 10                                                                                                                                                                                                                                 |

### Response

**[InstanceGetOrganizationMembershipsResponse](../../Models/Operations/InstanceGetOrganizationMembershipsResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 422                              | application/json                           |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 500                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/waitlistentries/README.md
================
# WaitlistEntries
(*WaitlistEntries*)

## Overview

### Available Operations

* [List](#list) - List all waitlist entries
* [Create](#create) - Create a waitlist entry

## List

Retrieve a list of waitlist entries for the instance.
Entries are ordered by creation date in descending order by default.
Supports filtering by email address or status and pagination with limit and offset parameters.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

ListWaitlistEntriesRequest req = new ListWaitlistEntriesRequest() {};

var res = await sdk.WaitlistEntries.ListAsync(req);

// handle response
```

### Parameters

| Parameter                                                                           | Type                                                                                | Required                                                                            | Description                                                                         |
| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `request`                                                                           | [ListWaitlistEntriesRequest](../../Models/Operations/ListWaitlistEntriesRequest.md) | :heavy_check_mark:                                                                  | The request object to use for the request.                                          |

### Response

**[ListWaitlistEntriesResponse](../../Models/Operations/ListWaitlistEntriesResponse.md)**

### Errors

| Error Type                              | Status Code                             | Content Type                            |
| --------------------------------------- | --------------------------------------- | --------------------------------------- |
| Clerk.BackendAPI.Models.Errors.SDKError | 4XX, 5XX                                | \*/\*                                   |

## Create

Creates a new waitlist entry for the given email address.
If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

CreateWaitlistEntryRequestBody req = new CreateWaitlistEntryRequestBody() {
    EmailAddress = "Loyal79@yahoo.com",
};

var res = await sdk.WaitlistEntries.CreateAsync(req);

// handle response
```

### Parameters

| Parameter                                                                                   | Type                                                                                        | Required                                                                                    | Description                                                                                 |
| ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |
| `request`                                                                                   | [CreateWaitlistEntryRequestBody](../../Models/Operations/CreateWaitlistEntryRequestBody.md) | :heavy_check_mark:                                                                          | The request object to use for the request.                                                  |

### Response

**[CreateWaitlistEntryResponse](../../Models/Operations/CreateWaitlistEntryResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 422                                   | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: docs/sdks/webhooks/README.md
================
# Webhooks
(*Webhooks*)

## Overview

### Available Operations

* [CreateSvixApp](#createsvixapp) - Create a Svix app
* [DeleteSvixApp](#deletesvixapp) - Delete a Svix app
* [GenerateSvixAuthURL](#generatesvixauthurl) - Create a Svix Dashboard URL

## CreateSvixApp

Create a Svix app and associate it with the current instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Webhooks.CreateSvixAppAsync();

// handle response
```

### Response

**[CreateSvixAppResponse](../../Models/Operations/CreateSvixAppResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## DeleteSvixApp

Delete a Svix app and disassociate it from the current instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Webhooks.DeleteSvixAppAsync();

// handle response
```

### Response

**[DeleteSvixAppResponse](../../Models/Operations/DeleteSvixAppResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

## GenerateSvixAuthURL

Generate a new url for accessing the Svix's management dashboard for that particular instance

### Example Usage

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

var res = await sdk.Webhooks.GenerateSvixAuthURLAsync();

// handle response
```

### Response

**[GenerateSvixAuthURLResponse](../../Models/Operations/GenerateSvixAuthURLResponse.md)**

### Errors

| Error Type                                 | Status Code                                | Content Type                               |
| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400                                        | application/json                           |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX                                   | \*/\*                                      |

================
File: examples.yaml
================
overlay: 1.0.0
info:
  title: Overlay File generated by an LLM to add examples
  version: 0.0.1
extends: file://clerk.yaml
actions:
  - target: $["paths"]["/public/interstitial"]["get"]["parameters"][0]["schema"]
    update:
      example: "frontend-api_1a2b3c4d"
  - target: $["paths"]["/public/interstitial"]["get"]["parameters"][1]["schema"]
    update:
      example: "pub_1a2b3c4d"
  - target: $["components"]["parameters"]["LimitParameter"]["schema"]
    update:
      example: 20
  - target: $["components"]["parameters"]["OffsetParameter"]["schema"]
    update:
      example: 10
  - target: $["components"]["schemas"]["Session"]["properties"]["object"]
    update:
      example: "session"
  - target: $["components"]["schemas"]["Session"]["properties"]["id"]
    update:
      example: "sess_123456789abcd"
  - target: $["components"]["schemas"]["Session"]["properties"]["user_id"]
    update:
      example: "user_123456789abcd"
  - target: $["components"]["schemas"]["Session"]["properties"]["client_id"]
    update:
      example: "client_123456789abcd"
  - target: $["components"]["schemas"]["Session"]["properties"]["status"]
    update:
      example: "active"
  - target: $["components"]["schemas"]["Session"]["properties"]["last_active_organization_id"]
    update:
      example: "org_123456789abcd"
  - target: $["components"]["schemas"]["Session"]["properties"]["last_active_at"]
    update:
      example: 1622471123
  - target: $["components"]["schemas"]["Session"]["properties"]["expire_at"]
    update:
      example: 1685471123
  - target: $["components"]["schemas"]["Session"]["properties"]["abandon_at"]
    update:
      example: 1630471123
  - target: $["components"]["schemas"]["Session"]["properties"]["updated_at"]
    update:
      example: 1622532323
  - target: $["components"]["schemas"]["Session"]["properties"]["created_at"]
    update:
      example: 1622470000
  - target: $["components"]["schemas"]["Client"]["properties"]["object"]
    update:
      example: "client"
  - target: $["components"]["schemas"]["Client"]["properties"]["id"]
    update:
      example: "client_123456789abcd"
  - target: $["components"]["schemas"]["Client"]["properties"]["session_ids"]
    update:
      example: ["sess_123456789abcd", "sess_23456789abcd"]
  - target: $["components"]["schemas"]["Client"]["properties"]["sign_in_id"]
    update:
      example: "signin_123456789abcd"
  - target: $["components"]["schemas"]["Client"]["properties"]["sign_up_id"]
    update:
      example: "signup_123456789abcd"
  - target: $["components"]["schemas"]["Client"]["properties"]["last_active_session_id"]
    update:
      example: "session_123456789abcd"
  - target: $["components"]["schemas"]["Client"]["properties"]["updated_at"]
    update:
      example: 1632580323
  - target: $["components"]["schemas"]["Client"]["properties"]["created_at"]
    update:
      example: 1622481123
  - target: $["components"]["schemas"]["ClerkError"]["properties"]["message"]
    update:
      example: "Invalid input"
  - target: $["components"]["schemas"]["ClerkError"]["properties"]["long_message"]
    update:
      example: "The input provided does not meet the requirements."
  - target: $["components"]["schemas"]["ClerkError"]["properties"]["code"]
    update:
      example: "400_bad_request"
  - target: $["components"]["schemas"]["ClerkError"]["properties"]["clerk_trace_id"]
    update:
      example: "trace_123456789abcd"
  - target: $["components"]["schemas"]["ClerkErrors"]["properties"]["errors"]
    update:
      example:
        [
          {
            "message": "Invalid input",
            "long_message": "The input provided does not meet the requirements.",
            "code": "400_bad_request",
            "clerk_trace_id": "trace_123456789abcd",
          },
        ]
  - target: $["paths"]["/clients/verify"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["token"]
    update:
      example: "jwt_token_example"
  - target: $["components"]["schemas"]["ClerkError"]["properties"]["meta"]
    update:
      example: {}
  - target: $["components"]["schemas"]["ClerkErrors"]["properties"]["meta"]
    update:
      example: {}
  - target: $["paths"]["/clients/{client_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "cli_123456789"
  - target: $["paths"]["/email_addresses"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["user_id"]
    update:
      example: "user_12345"
  - target: $["paths"]["/email_addresses"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["email_address"]
    update:
      example: "example@clerk.com"
  - target: $["paths"]["/email_addresses"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["verified"]
    update:
      example: false
  - target: $["paths"]["/email_addresses"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary"]
    update:
      example: true
  - target: $["components"]["schemas"]["OTP"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["OTP"]["properties"]["strategy"]
    update:
      example: "email_code"
  - target: $["components"]["schemas"]["OTP"]["properties"]["attempts"]
    update:
      example: 1
  - target: $["components"]["schemas"]["OTP"]["properties"]["expire_at"]
    update:
      example: 1615462399
  - target: $["components"]["schemas"]["Admin"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["Admin"]["properties"]["strategy"]
    update:
      example: "admin"
  - target: $["components"]["schemas"]["Admin"]["properties"]["attempts"]
    update:
      example: 0
  - target: $["components"]["schemas"]["Admin"]["properties"]["expire_at"]
    update:
      example: 1620000000
  - target: $["components"]["schemas"]["Oauth"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["Oauth"]["properties"]["strategy"]
    update:
      example: "oauth_google"
  - target: $["components"]["schemas"]["Oauth"]["properties"]["external_verification_redirect_url"]
    update:
      example: "https://oauth.google.com/verify"
  - target: $["components"]["schemas"]["Oauth"]["properties"]["error"]
    update:
      example: null
  - target: $["components"]["schemas"]["Oauth"]["properties"]["expire_at"]
    update:
      example: 1615462399
  - target: $["components"]["schemas"]["Oauth"]["properties"]["attempts"]
    update:
      example: 1
  - target: $["components"]["schemas"]["IdentificationLink"]["properties"]["type"]
    update:
      example: "oauth_google"
  - target: $["components"]["schemas"]["IdentificationLink"]["properties"]["id"]
    update:
      example: "link_12345"
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["id"]
    update:
      example: "email_id_56789"
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["object"]
    update:
      example: "email_address"
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["email_address"]
    update:
      example: "example@clerk.com"
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["reserved"]
    update:
      example: false
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["verification"]
    update:
      example: { "status": "verified", "strategy": "admin" }
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["linked_to"]
    update:
      example: [{ "type": "oauth_google", "id": "link_12345" }]
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["created_at"]
    update:
      example: 1615458901
  - target: $["components"]["schemas"]["EmailAddress"]["properties"]["updated_at"]
    update:
      example: 1615459001
  - target: $["paths"]["/email_addresses/{email_address_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "email_address_id_example"
  - target: $["paths"]["/email_addresses/{email_address_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "email_address_id_example"
  - target: $["paths"]["/email_addresses/{email_address_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "email_address_id_example"
  - target: $["paths"]["/email_addresses/{email_address_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["verified"]
    update:
      example: false
  - target: $["paths"]["/email_addresses/{email_address_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary"]
    update:
      example: true
  - target: $["components"]["schemas"]["DeletedObject"]["properties"]["object"]
    update:
      example: "deleted_object"
  - target: $["components"]["schemas"]["DeletedObject"]["properties"]["id"]
    update:
      example: "deleted_object_id_example"
  - target: $["components"]["schemas"]["DeletedObject"]["properties"]["slug"]
    update:
      example: "deleted-object-slug"
  - target: $["components"]["schemas"]["DeletedObject"]["properties"]["deleted"]
    update:
      example: true
  - target: $["paths"]["/phone_numbers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["user_id"]
    update:
      example: "usr_12345"
  - target: $["paths"]["/phone_numbers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["phone_number"]
    update:
      example: "+11234567890"
  - target: $["paths"]["/phone_numbers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["verified"]
    update:
      example: true
  - target: $["paths"]["/phone_numbers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary"]
    update:
      example: false
  - target: $["paths"]["/phone_numbers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["reserved_for_second_factor"]
    update:
      example: false
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["id"]
    update:
      example: "ph_123456789"
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["object"]
    update:
      example: "phone_number"
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["phone_number"]
    update:
      example: "+11234567890"
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["reserved_for_second_factor"]
    update:
      example: false
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["default_second_factor"]
    update:
      example: true
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["reserved"]
    update:
      example: false
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["backup_codes"]
    update:
      example: ["code1", "code2", "code3"]
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["created_at"]
    update:
      example: 1594842023
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["updated_at"]
    update:
      example: 1604842023
  - target: $["paths"]["/phone_numbers/{phone_number_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "phone_12345" # Added example
  - target: $["paths"]["/phone_numbers/{phone_number_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "phone_12345" # Added example
  - target: $["paths"]["/phone_numbers/{phone_number_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "phone_12345" # Added example
  - target: $["paths"]["/phone_numbers/{phone_number_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["verified"]
    update:
      example: false # Added example
  - target: $["paths"]["/phone_numbers/{phone_number_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary"]
    update:
      example: true # Added example
  - target: $["paths"]["/phone_numbers/{phone_number_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["reserved_for_second_factor"]
    update:
      example: true # Added example
  - target: $["paths"]["/sessions"]["get"]["parameters"][0]["schema"]
    update:
      example: "client_123"
  - target: $["paths"]["/sessions"]["get"]["parameters"][1]["schema"]
    update:
      example: "user_456"
  - target: $["paths"]["/sessions"]["get"]["parameters"][2]["schema"]
    update:
      example: "active"
  - target: $["components"]["responses"]["Session.List"]["content"]["application/json"]["schema"]
    update:
      example:
        [
          {
            "object": "session",
            "id": "sess_12345",
            "user_id": "user_456",
            "client_id": "client_123",
            "status": "active",
            "last_active_organization_id": "org_789",
            "last_active_at": 1617970799,
            "expire_at": 1620559199,
            "abandon_at": 1618853599,
            "updated_at": 1619459200,
            "created_at": 1617864359,
          },
        ]
  - target: $["paths"]["/sessions/{session_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "sess_1234567890abcdef"
  - target: $["paths"]["/sessions/{session_id}/revoke"]["post"]["parameters"][0]["schema"]
    update:
      example: "sess_1234567890abcdef"
  - target: $["components"]["schemas"]["Session"]["properties"]["actor"]
    update:
      example: null
  - target: $["paths"]["/sessions/{session_id}/verify"]["post"]["parameters"][0]["schema"]
    update:
      example: "sess_w8q4g9s60j28fghv00f3"
  - target: $["paths"]["/sessions/{session_id}/verify"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["token"]
    update:
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoic2Vzc193OHF4ZzZzNm9qMjhmZ2h2MDBmMyIsImlhdCI6MTU4MjY0OTg2Mn0.J4KP2L6bEZ6YccHFW4E2vKbOLw_mmO0gF_GNRw-wtLM"
  - target: $["paths"]["/sessions/{session_id}/tokens/{template_name}"]["post"]["parameters"][0]["schema"]
    update:
      example: "ses_123abcd4567"
  - target: $["paths"]["/sessions/{session_id}/tokens/{template_name}"]["post"]["parameters"][1]["schema"]
    update:
      example: "custom_hasura"
  - target: $["paths"]["/sessions/{session_id}/tokens/{template_name}"]["post"]["responses"]["200"]["content"]["application/json"]["schema"]["properties"]["object"]
    update:
      example: "token"
  - target: $["paths"]["/sessions/{session_id}/tokens/{template_name}"]["post"]["responses"]["200"]["content"]["application/json"]["schema"]["properties"]["jwt"]
    update:
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvZSBCbG9nZ3MiLCJpYXQiOjE1MTYyMzkwMjJ9.qKVwLLnbfqfM5VCfU8vDhXXXS0VklRcsErgTpELYgfw"
  - target: $["paths"]["/templates/{template_type}"]["get"]["parameters"][0]
    update:
      example: "email"
  - target: $["components"]["schemas"]["Template"]["properties"]["id"]
    update:
      example: "temp_12345"
  - target: $["components"]["schemas"]["Template"]["properties"]["object"]
    update:
      example: "template"
  - target: $["components"]["schemas"]["Template"]["properties"]["instance_id"]
    update:
      example: "inst_67890"
  - target: $["components"]["schemas"]["Template"]["properties"]["resource_type"]
    update:
      example: "system"
  - target: $["components"]["schemas"]["Template"]["properties"]["template_type"]
    update:
      example: "email"
  - target: $["components"]["schemas"]["Template"]["properties"]["name"]
    update:
      example: "Welcome Email"
  - target: $["components"]["schemas"]["Template"]["properties"]["slug"]
    update:
      example: "welcome_email"
  - target: $["components"]["schemas"]["Template"]["properties"]["position"]
    update:
      example: 1
  - target: $["components"]["schemas"]["Template"]["properties"]["can_revert"]
    update:
      example: false
  - target: $["components"]["schemas"]["Template"]["properties"]["can_delete"]
    update:
      example: true
  - target: $["components"]["schemas"]["Template"]["properties"]["can_disable"]
    update:
      example: false
  - target: $["components"]["schemas"]["Template"]["properties"]["subject"]
    update:
      example: "Welcome to our service!"
  - target: $["components"]["schemas"]["Template"]["properties"]["markup"]
    update:
      example: "<p>Hello, {{ user.name }}</p>"
  - target: $["components"]["schemas"]["Template"]["properties"]["body"]
    update:
      example: "You are now signed up. Welcome!"
  - target: $["components"]["schemas"]["Template"]["properties"]["available_variables"]
    update:
      example: ["user.name", "user.email"]
  - target: $["components"]["schemas"]["Template"]["properties"]["required_variables"]
    update:
      example: ["user.name"]
  - target: $["components"]["schemas"]["Template"]["properties"]["from_email_name"]
    update:
      example: "Clerk Support"
  - target: $["components"]["schemas"]["Template"]["properties"]["reply_to_email_name"]
    update:
      example: "support@clerk.com"
  - target: $["components"]["schemas"]["Template"]["properties"]["delivered_by_clerk"]
    update:
      example: true
  - target: $["components"]["schemas"]["Template"]["properties"]["updated_at"]
    update:
      example: 1610000000
  - target: $["components"]["schemas"]["Template"]["properties"]["created_at"]
    update:
      example: 1600000000
  - target: $["paths"]["/templates/{template_type}/{slug}"]["get"]["parameters"][0]["schema"]
    update:
      example: "email"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["get"]["parameters"][1]["schema"]
    update:
      example: "welcome-email"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["parameters"][0]["schema"]
    update:
      example: "sms"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["parameters"][1]["schema"]
    update:
      example: "verification-code"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "Verification Code"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["subject"]
    update:
      example: "Your Verification Code"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["markup"]
    update:
      example: "<p>Your code: {{code}}</p>"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["body"]
    update:
      example: "Use this code to verify your email: {{code}}"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["delivered_by_clerk"]
    update:
      example: true
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["from_email_name"]
    update:
      example: "hello"
  - target: $["paths"]["/templates/{template_type}/{slug}"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["reply_to_email_name"]
    update:
      example: "support"
  - target: $["paths"]["/templates/{template_type}/{slug}/revert"]["post"]["parameters"][0]["schema"]
    update:
      example: "email"
  - target: $["paths"]["/templates/{template_type}/{slug}/revert"]["post"]["parameters"][1]["schema"]
    update:
      example: "welcome-email"
  - target: $["paths"]["/templates/{template_type}/{slug}/preview"]["post"]["parameters"][0]["schema"]
    update:
      example: "email"
  - target: $["paths"]["/templates/{template_type}/{slug}/preview"]["post"]["parameters"][1]["schema"]
    update:
      example: "welcome-email"
  - target: $["paths"]["/templates/{template_type}/{slug}/preview"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["subject"]
    update:
      example: "Welcome to our service!"
  - target: $["paths"]["/templates/{template_type}/{slug}/preview"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["body"]
    update:
      example: "Hi, thank you for joining our service."
  - target: $["paths"]["/templates/{template_type}/{slug}/preview"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["from_email_name"]
    update:
      example: "hello"
  - target: $["paths"]["/templates/{template_type}/{slug}/preview"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["reply_to_email_name"]
    update:
      example: "support"
  - target: $["paths"]["/templates/{template_type}/{slug}/toggle_delivery"]["post"]["parameters"][0]["schema"]
    update:
      example: "email"
  - target: $["paths"]["/templates/{template_type}/{slug}/toggle_delivery"]["post"]["parameters"][1]["schema"]
    update:
      example: "welcome-email"
  - target: $["paths"]["/templates/{template_type}/{slug}/toggle_delivery"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["delivered_by_clerk"]
    update:
      example: true
  - target: $["paths"]["/users"]["get"]["parameters"][0]["schema"]
    update:
      example: ["test@example.com"]
  - target: $["paths"]["/users"]["get"]["parameters"][1]["schema"]
    update:
      example: ["+12345678901"]
  - target: $["paths"]["/users"]["get"]["parameters"][2]["schema"]
    update:
      example: ["external-id-123"]
  - target: $["paths"]["/users"]["get"]["parameters"][3]["schema"]
    update:
      example: ["user123"]
  - target: $["paths"]["/users"]["get"]["parameters"][4]["schema"]
    update:
      example: ["0x123456789abcdef0x123456789abcdef"]
  - target: $["paths"]["/users"]["get"]["parameters"][5]["schema"]
    update:
      example: ["user-id-123"]
  - target: $["paths"]["/users"]["get"]["parameters"][6]["schema"]
    update:
      example: ["org-id-123"]
  - target: $["paths"]["/users"]["get"]["parameters"][7]["schema"]
    update:
      example: "John"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["external_id"]
    update:
      example: "ext-id-001"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["first_name"]
    update:
      example: "John"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["email_address"]["items"]
    update:
      example: "john.doe@example.com"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["phone_number"]["items"]
    update:
      example: "+12345678901"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["web3_wallet"]["items"]
    update:
      example: "0x123456789abcdef0x123456789abcdef"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["username"]
    update:
      example: "johndoe123"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password"]
    update:
      example: "Secure*Pass4"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password_digest"]
    update:
      example: "$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password_hasher"]
    update:
      example: "argon2i"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["skip_password_checks"]
    update:
      example: false
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["skip_password_requirement"]
    update:
      example: false
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["totp_secret"]
    update:
      example: "base32totpsecretkey"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["backup_codes"]
    update:
      example:
        - "123456"
        - "654321"
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: { "role": "user" }
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: { "internal_id": "789" }
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["unsafe_metadata"]
    update:
      example: { "preferences": { "theme": "dark" } }
  - target: $["paths"]["/users"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["created_at"]
    update:
      example: "2023-03-15T07:15:20.902Z"
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["verification"]
    update:
      example:
        {
          "status": "verified",
          "strategy": "phone_code",
          "attempts": 2,
          "expire_at": 1622852400,
        }
  - target: $["components"]["schemas"]["PhoneNumber"]["properties"]["linked_to"]
    update:
      example: [{ "type": "oauth_google", "id": "link_id_123" }]
  - target: $["components"]["schemas"]["Web3Signature"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["Web3Signature"]["properties"]["strategy"]
    update:
      example: "web3_metamask_signature"
  - target: $["components"]["schemas"]["Web3Signature"]["properties"]["nonce"]
    update:
      example: "nonce_value"
  - target: $["components"]["schemas"]["Web3Signature"]["properties"]["attempts"]
    update:
      example: null
  - target: $["components"]["schemas"]["Web3Signature"]["properties"]["expire_at"]
    update:
      example: null
  - target: $["components"]["schemas"]["Web3Wallet"]["properties"]["id"]
    update:
      example: "wallet_id_123"
  - target: $["components"]["schemas"]["Web3Wallet"]["properties"]["object"]
    update:
      example: "web3_wallet"
  - target: $["components"]["schemas"]["Web3Wallet"]["properties"]["web3_wallet"]
    update:
      example: "0x123456789abcdef"
  - target: $["components"]["schemas"]["Web3Wallet"]["properties"]["verification"]
    update:
      example:
        {
          "status": "verified",
          "strategy": "web3_metamask_signature",
          "nonce": "nonce_value",
        }
  - target: $["components"]["schemas"]["Web3Wallet"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["Web3Wallet"]["properties"]["updated_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["Passkey"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["Passkey"]["properties"]["strategy"]
    update:
      example: "passkey"
  - target: $["components"]["schemas"]["Passkey"]["properties"]["nonce"]
    update:
      example: "nonce_value"
  - target: $["components"]["schemas"]["Passkey"]["properties"]["attempts"]
    update:
      example: null
  - target: $["components"]["schemas"]["Passkey"]["properties"]["expire_at"]
    update:
      example: null
  - target: $["components"]["schemas"]["schemas-Passkey"]["properties"]["id"]
    update:
      example: "passkey_id_123"
  - target: $["components"]["schemas"]["schemas-Passkey"]["properties"]["object"]
    update:
      example: "passkey"
  - target: $["components"]["schemas"]["schemas-Passkey"]["properties"]["name"]
    update:
      example: "My Passkey"
  - target: $["components"]["schemas"]["schemas-Passkey"]["properties"]["last_used_at"]
    update:
      example: 1615852800
  - target: $["components"]["schemas"]["schemas-Passkey"]["properties"]["verification"]
    update:
      example:
        { "status": "verified", "strategy": "passkey", "nonce": "nonce_value" }
  - target: $["components"]["schemas"]["SAML"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["SAML"]["properties"]["strategy"]
    update:
      example: "saml"
  - target: $["components"]["schemas"]["SAML"]["properties"]["external_verification_redirect_url"]
    update:
      example: "https://example.com/saml_callback"
  - target: $["components"]["schemas"]["SAML"]["properties"]["error"]
    update:
      example: null
  - target: $["components"]["schemas"]["SAML"]["properties"]["expire_at"]
    update:
      example: 1622852400
  - target: $["components"]["schemas"]["SAML"]["properties"]["attempts"]
    update:
      example: null
  - target: $["components"]["schemas"]["Ticket"]["properties"]["status"]
    update:
      example: "verified"
  - target: $["components"]["schemas"]["Ticket"]["properties"]["strategy"]
    update:
      example: "ticket"
  - target: $["components"]["schemas"]["Ticket"]["properties"]["attempts"]
    update:
      example: null
  - target: $["components"]["schemas"]["Ticket"]["properties"]["expire_at"]
    update:
      example: null
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["id"]
    update:
      example: "saml_account_id_123"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["object"]
    update:
      example: "saml_account"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["provider"]
    update:
      example: "SAML Provider"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["active"]
    update:
      example: true
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["email_address"]
    update:
      example: "user@example.com"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["first_name"]
    update:
      example: "John"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["provider_user_id"]
    update:
      example: "prov_user_id_123"
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["public_metadata"]
    update:
      example: { "department": "IT" }
  - target: $["components"]["schemas"]["SAMLAccount"]["properties"]["verification"]
    update:
      example:
        {
          "status": "verified",
          "strategy": "saml",
          "external_verification_redirect_url": "https://example.com/saml_callback",
        }
  - target: $["components"]["schemas"]["User"]["properties"]["id"]
    update:
      example: "user_id_123"
  - target: $["components"]["schemas"]["User"]["properties"]["object"]
    update:
      example: "user"
  - target: $["components"]["schemas"]["User"]["properties"]["external_id"]
    update:
      example: "external_user_id_123"
  - target: $["components"]["schemas"]["User"]["properties"]["primary_email_address_id"]
    update:
      example: "email_id_123"
  - target: $["components"]["schemas"]["User"]["properties"]["primary_phone_number_id"]
    update:
      example: "phone_id_123"
  - target: $["components"]["schemas"]["User"]["properties"]["primary_web3_wallet_id"]
    update:
      example: "wallet_id_123"
  - target: $["components"]["schemas"]["User"]["properties"]["username"]
    update:
      example: "john_doe"
  - target: $["components"]["schemas"]["User"]["properties"]["first_name"]
    update:
      example: "John"
  - target: $["components"]["schemas"]["User"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["components"]["schemas"]["User"]["properties"]["profile_image_url"]
    update:
      example: "https://example.com/profile.jpg"
  - target: $["components"]["schemas"]["User"]["properties"]["image_url"]
    update:
      example: "https://example.com/new-profile.jpg"
  - target: $["components"]["schemas"]["User"]["properties"]["has_image"]
    update:
      example: true
  - target: $["components"]["schemas"]["User"]["properties"]["public_metadata"]
    update:
      example: { "role": "admin" }
  - target: $["components"]["schemas"]["User"]["properties"]["private_metadata"]
    update:
      example: { "ssn": "123-45-6789" }
  - target: $["components"]["schemas"]["User"]["properties"]["unsafe_metadata"]
    update:
      example: { "theme": "dark" }
  - target: $["components"]["schemas"]["User"]["properties"]["email_addresses"]
    update:
      example:
        [
          {
            "id": "email_id_123",
            "object": "email_address",
            "email_address": "john.doe@example.com",
            "verification": { "status": "verified", "strategy": "email_code" },
            "created_at": 1609459200,
            "updated_at": 1609459200,
          },
        ]
  - target: $["components"]["schemas"]["User"]["properties"]["phone_numbers"]
    update:
      example:
        [
          {
            "id": "phone_id_123",
            "object": "phone_number",
            "phone_number": "+12345678901",
            "verification": { "status": "verified", "strategy": "phone_code" },
            "created_at": 1609459200,
            "updated_at": 1609459200,
          },
        ]
  - target: $["components"]["schemas"]["User"]["properties"]["web3_wallets"]
    update:
      example:
        [
          {
            "id": "wallet_id_123",
            "object": "web3_wallet",
            "web3_wallet": "0x123456789abcdef",
            "verification":
              { "status": "verified", "strategy": "web3_metamask_signature" },
            "created_at": 1609459200,
            "updated_at": 1609459200,
          },
        ]
  - target: $["components"]["schemas"]["User"]["properties"]["passkeys"]
    update:
      example:
        [
          {
            "id": "passkey_id_123",
            "object": "passkey",
            "name": "My Passkey",
            "last_used_at": 1615852800,
            "verification": { "status": "verified", "strategy": "passkey" },
          },
        ]
  - target: $["components"]["schemas"]["User"]["properties"]["password_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["User"]["properties"]["two_factor_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["User"]["properties"]["totp_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["User"]["properties"]["backup_code_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["User"]["properties"]["mfa_enabled_at"]
    update:
      example: 1615852800
  - target: $["components"]["schemas"]["User"]["properties"]["mfa_disabled_at"]
    update:
      example: null
  - target: $["components"]["schemas"]["User"]["properties"]["external_accounts"]
    update:
      example:
        [
          {
            "id": "ext_account_id_123",
            "provider": "Facebook",
            "user_id": "user_id_at_provider",
          },
        ]
  - target: $["components"]["schemas"]["User"]["properties"]["saml_accounts"]
    update:
      example:
        [
          {
            "id": "saml_account_id_123",
            "object": "saml_account",
            "provider": "SAML Provider",
            "active": true,
            "email_address": "user@example.com",
            "public_metadata": { "department": "IT" },
            "verification": { "status": "verified", "strategy": "saml" },
          },
        ]
  - target: $["components"]["schemas"]["User"]["properties"]["last_sign_in_at"]
    update:
      example: 1622852400
  - target: $["components"]["schemas"]["User"]["properties"]["banned"]
    update:
      example: false
  - target: $["components"]["schemas"]["User"]["properties"]["locked"]
    update:
      example: false
  - target: $["components"]["schemas"]["User"]["properties"]["lockout_expires_in_seconds"]
    update:
      example: null
  - target: $["components"]["schemas"]["User"]["properties"]["verification_attempts_remaining"]
    update:
      example: 5
  - target: $["components"]["schemas"]["User"]["properties"]["updated_at"]
    update:
      example: 1622852400
  - target: $["components"]["schemas"]["User"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["User"]["properties"]["delete_self_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["User"]["properties"]["create_organization_enabled"]
    update:
      example: true
  - target: $["paths"]["/users/count"]["get"]["parameters"][0]["schema"]
    update:
      example: ["user@example.com"]
  - target: $["paths"]["/users/count"]["get"]["parameters"][1]["schema"]
    update:
      example: ["+1234567890"]
  - target: $["paths"]["/users/count"]["get"]["parameters"][2]["schema"]
    update:
      example: ["external-id-123"]
  - target: $["paths"]["/users/count"]["get"]["parameters"][3]["schema"]
    update:
      example: ["username123"]
  - target: $["paths"]["/users/count"]["get"]["parameters"][4]["schema"]
    update:
      example: ["0x123456789abcdef"]
  - target: $["paths"]["/users/count"]["get"]["parameters"][5]["schema"]
    update:
      example: ["user-id-123"]
  - target: $["paths"]["/users/count"]["get"]["parameters"][6]["schema"]
    update:
      example: "John Doe"
  - target: $["components"]["schemas"]["TotalCount"]["properties"]["object"]
    update:
      example: "total_count"
  - target: $["components"]["schemas"]["TotalCount"]["properties"]["total_count"]
    update:
      example: 100
  - target: $["paths"]["/users/{user_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "usr_1"
  - target: $["paths"]["/users/{user_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "usr_1"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["external_id"]
    update:
      example: "ext_123"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["first_name"]
    update:
      example: "Jane"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary_email_address_id"]
    update:
      example: "eml_12345"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["notify_primary_email_address_changed"]
    update:
      example: true
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary_phone_number_id"]
    update:
      example: "phn_67890"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["primary_web3_wallet_id"]
    update:
      example: "wlt_123"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["username"]
    update:
      example: "janedoe"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["profile_image_id"]
    update:
      example: "img_789"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password"]
    update:
      example: "secretPass123!"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password_digest"]
    update:
      example: "$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password_hasher"]
    update:
      example: "argon2i"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["skip_password_checks"]
    update:
      example: false
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["sign_out_of_other_sessions"]
    update:
      example: true
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["totp_secret"]
    update:
      example: "ABCD1234EFGH5678"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["backup_codes"]
    update:
      example:
        - "123456"
        - "654321"
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: { "theme": "dark" }
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: { "vip": true }
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["unsafe_metadata"]
    update:
      example: { "age": 30 }
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["delete_self_enabled"]
    update:
      example: true
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["create_organization_enabled"]
    update:
      example: false
  - target: $["paths"]["/users/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["created_at"]
    update:
      example: "2021-04-05T14:30:00.000Z"
  - target: $["paths"]["/users/{user_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "usr_1"
  - target: $["paths"]["/users/{user_id}/ban"]["post"]["parameters"][0]["schema"]
    update:
      example: "user_12345"
  - target: $["paths"]["/users/{user_id}/unban"]["post"]["parameters"][0]["schema"]
    update:
      example: "user_12345"
  - target: $["paths"]["/users/{user_id}/lock"]["post"]["parameters"][0]["schema"]
    update:
      example: "user_123456789"
  - target: $["paths"]["/users/{user_id}/unlock"]["post"]["parameters"][0]["schema"]
    update:
      example: "user_12345"
  - target: $["paths"]["/users/{user_id}/profile_image"]["post"]["parameters"][0]["schema"]
    update:
      example: "usr_test123"
  - target: $["paths"]["/users/{user_id}/profile_image"]["delete"]["parameters"][0]["schema"]
    update:
      example: "usr_test123"
  - target: $["paths"]["/users/{user_id}/metadata"]["patch"]["parameters"][0]["schema"]
    update:
      example: "user_123456789"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["parameters"][0]["schema"]
    update:
      example: "user_123"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["parameters"][1]["schema"]
    update:
      example: "oauth_google"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["object"]
    update:
      example: "oauth_access_token"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["external_account_id"]
    update:
      example: "external_account_456"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["provider_user_id"]
    update:
      example: "provider_user_789"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["token"]
    update:
      example: "access_token_123"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["provider"]
    update:
      example: "oauth_google"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["label"]
    update:
      example: "Primary account"
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["scopes"]
    update:
      example: ["email", "profile"]
  - target: $["paths"]["/users/{user_id}/oauth_access_tokens/{provider}"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["items"]["properties"]["token_secret"]
    update:
      example: "token_secret_xyz"
  - target: $["paths"]["/users/{user_id}/organization_memberships"]["get"]["parameters"][0]["schema"]
    update:
      example: "usr_1234567890"
  - target: $["components"]["schemas"]["Organization"]["properties"]["object"]
    update:
      example: "organization"
  - target: $["components"]["schemas"]["Organization"]["properties"]["id"]
    update:
      example: "org_123"
  - target: $["components"]["schemas"]["Organization"]["properties"]["name"]
    update:
      example: "Acme Corp"
  - target: $["components"]["schemas"]["Organization"]["properties"]["slug"]
    update:
      example: "acme-corp"
  - target: $["components"]["schemas"]["Organization"]["properties"]["members_count"]
    update:
      example: 150
  - target: $["components"]["schemas"]["Organization"]["properties"]["max_allowed_memberships"]
    update:
      example: 300
  - target: $["components"]["schemas"]["Organization"]["properties"]["admin_delete_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["Organization"]["properties"]["created_by"]
    update:
      example: "user_123456"
  - target: $["components"]["schemas"]["Organization"]["properties"]["created_at"]
    update:
      example: 1625078400
  - target: $["components"]["schemas"]["Organization"]["properties"]["updated_at"]
    update:
      example: 1625164800
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["id"]
    update:
      example: "org_mem_123"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["object"]
    update:
      example: "organization_membership"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["role"]
    update:
      example: "member"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["permissions"]
    update:
      example: ["read", "write"]
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["user_id"]
    update:
      example: "usr_123456"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["first_name"]
    update:
      example: "John"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["image_url"]
    update:
      example: "https://example.com/path/to/image.jpg"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["has_image"]
    update:
      example: true
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["identifier"]
    update:
      example: "john.doe@example.com"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["created_at"]
    update:
      example: 1625078400
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["updated_at"]
    update:
      example: 1625164800
  - target: $["components"]["schemas"]["OrganizationMemberships"]["properties"]["total_count"]
    update:
      example: 1
  - target: $["paths"]["/users/{user_id}/verify_password"]["post"]["parameters"][0]["schema"]
    update:
      example: "user_123"
  - target: $["paths"]["/users/{user_id}/verify_password"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["password"]
    update:
      example: "securepassword123"
  - target: $["paths"]["/users/{user_id}/verify_password"]["post"]["responses"]["200"]["content"]["application/json"]["schema"]["properties"]["verified"]
    update:
      example: true
  - target: $["paths"]["/users/{user_id}/verify_totp"]["post"]["parameters"][0]["schema"]
    update:
      example: "usr_1a2b3c"
  - target: $["paths"]["/users/{user_id}/verify_totp"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["code"]
    update:
      example: "123456"
  - target: $["paths"]["/users/{user_id}/verify_totp"]["post"]["responses"]["200"]["content"]["application/json"]["schema"]["properties"]["verified"]
    update:
      example: true
  - target: $["paths"]["/users/{user_id}/verify_totp"]["post"]["responses"]["200"]["content"]["application/json"]["schema"]["properties"]["code_type"]
    update:
      example: "totp"
  - target: $["paths"]["/users/{user_id}/mfa"]["delete"]["parameters"][0]["schema"]
    update:
      example: "user_123456"
  - target: $["paths"]["/users/{user_id}/mfa"]["delete"]["responses"]["200"]["content"]["application/json"]["schema"]["properties"]["user_id"]
    update:
      example: "user_123456"
  - target: $["paths"]["/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["email_address"]
    update:
      example: "user@example.com"
  - target: $["paths"]["/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["paths"]["/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["redirect_url"]
    update:
      example: "https://example.com/welcome"
  - target: $["paths"]["/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["notify"]
    update:
      example: true
  - target: $["paths"]["/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["ignore_existing"]
    update:
      example: ​false
  - target: $["paths"]["/invitations"]["get"]["parameters"][2]["schema"]
    update:
      example: "pending"
  - target: $["components"]["schemas"]["Invitation"]["properties"]["object"]
    update:
      example: "invitation"
  - target: $["components"]["schemas"]["Invitation"]["properties"]["id"]
    update:
      example: "inv_f02930r3"
  - target: $["components"]["schemas"]["Invitation"]["properties"]["email_address"]
    update:
      example: "invitee@example.com"
  - target: $["components"]["schemas"]["Invitation"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["components"]["schemas"]["Invitation"]["properties"]["url"]
    update:
      example: "https://example.com/invitations/accept?code=abcd1234"
  - target: $["components"]["schemas"]["Invitation"]["properties"]["created_at"]
    update:
      example: 1622549600
  - target: $["components"]["schemas"]["Invitation"]["properties"]["updated_at"]
    update:
      example: 1622553200
  - target: $["paths"]["/invitations/{invitation_id}/revoke"]["post"]["parameters"][0]["schema"]
    update:
      example: "inv_123"
  - target: $["paths"]["/allowlist_identifiers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["identifier"]
    update:
      example: "user@example.com"
  - target: $["paths"]["/allowlist_identifiers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["notify"]
    update:
      example: true
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["object"]
    update:
      example: "allowlist_identifier"
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["id"]
    update:
      example: "alid_123456"
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["invitation_id"]
    update:
      example: "inv_123456"
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["identifier"]
    update:
      example: "user@example.com"
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["identifier_type"]
    update:
      example: "email_address"
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["instance_id"]
    update:
      example: "instance_12345"
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["created_at"]
    update:
      example: 1622547600
  - target: $["components"]["schemas"]["AllowlistIdentifier"]["properties"]["updated_at"]
    update:
      example: 1622648600
  - target: $["paths"]["/allowlist_identifiers/{identifier_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "example_identifier_id"
  - target: $["paths"]["/blocklist_identifiers"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["identifier"]
    update:
      example: "example@example.com"
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["object"]
    update:
      example: "blocklist_identifier"
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["id"]
    update:
      example: "identifier_id"
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["identifier"]
    update:
      example: "blocked@example.com"
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["identifier_type"]
    update:
      example: "email_address"
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["instance_id"]
    update:
      example: "instance_id_here"
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["BlocklistIdentifier"]["properties"]["updated_at"]
    update:
      example: 1612137600
  - target: $["components"]["schemas"]["BlocklistIdentifiers"]["properties"]["total_count"]
    update:
      example: 100
  - target: $["paths"]["/blocklist_identifiers/{identifier_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "identifier123"
  - target: $["paths"]["/beta_features/instance_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["restricted_to_allowlist"]
    update:
      example: false
  - target: $["paths"]["/beta_features/instance_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["from_email_address"]
    update:
      example: "noreply"
  - target: $["paths"]["/beta_features/instance_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["progressive_sign_up"]
    update:
      example: true
  - target: $["paths"]["/beta_features/instance_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["session_token_template"]
    update:
      example: "defaultSessionToken"
  - target: $["paths"]["/beta_features/instance_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["enhanced_email_deliverability"]
    update:
      example: true
  - target: $["paths"]["/beta_features/instance_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["test_mode"]
    update:
      example: true
  - target: $["components"]["responses"]["InstanceSettings"]["content"]["application/json"]["schema"]["properties"]["object"]
    update:
      example: "instance_settings"
  - target: $["components"]["responses"]["InstanceSettings"]["content"]["application/json"]["schema"]["properties"]["id"]
    update:
      example: "inst_123456789"
  - target: $["components"]["responses"]["InstanceSettings"]["content"]["application/json"]["schema"]["properties"]["restricted_to_allowlist"]
    update:
      example: false
  - target: $["components"]["responses"]["InstanceSettings"]["content"]["application/json"]["schema"]["properties"]["from_email_address"]
    update:
      example: "noreply@clerk.dev"
  - target: $["components"]["responses"]["InstanceSettings"]["content"]["application/json"]["schema"]["properties"]["progressive_sign_up"]
    update:
      example: true
  - target: $["components"]["responses"]["InstanceSettings"]["content"]["application/json"]["schema"]["properties"]["enhanced_email_deliverability"]
    update:
      example: true
  - target: $["paths"]["/beta_features/domain"]["put"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["home_url"]
    update:
      example: "https://www.example.com"
  - target: $["paths"]["/actor_tokens"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["user_id"]
    update:
      example: "user_1a2b3c"
  - target: $["paths"]["/actor_tokens"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["expires_in_seconds"]
    update:
      example: 3600
  - target: $["paths"]["/actor_tokens"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["session_max_duration_in_seconds"]
    update:
      example: 1800
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["object"]
    update:
      example: "actor_token"
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["id"]
    update:
      example: "actor_tok_1a2b3c"
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["status"]
    update:
      example: "pending"
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["user_id"]
    update:
      example: "user_1a2b3c"
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["actor"]
    update:
      example: { "sub": "user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb" }
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["token"]
    update:
      example: "token_string"
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["url"]
    update:
      example: "https://example.com/token"
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["ActorToken"]["properties"]["updated_at"]
    update:
      example: 1612137600
  - target: $["paths"]["/actor_tokens/{actor_token_id}/revoke"]["post"]["parameters"][0]["schema"]
    update:
      example: "act_tok_abcdefghijk"
  - target: $["paths"]["/domains"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "example.com"
  - target: $["paths"]["/domains"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["is_satellite"]
    update:
      example: true
  - target: $["paths"]["/domains"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["proxy_url"]
    update:
      example: "https://proxy.example.com"
  - target: $["components"]["schemas"]["CNameTarget"]["properties"]["host"]
    update:
      example: "cname.example.com"
  - target: $["components"]["schemas"]["CNameTarget"]["properties"]["value"]
    update:
      example: "value.example.com"
  - target: $["components"]["schemas"]["CNameTarget"]["properties"]["required"]
    update:
      example: true
  - target: $["components"]["schemas"]["Domain"]["properties"]["object"]
    update:
      example: "domain"
  - target: $["components"]["schemas"]["Domain"]["properties"]["id"]
    update:
      example: "domain_id"
  - target: $["components"]["schemas"]["Domain"]["properties"]["name"]
    update:
      example: "example.com"
  - target: $["components"]["schemas"]["Domain"]["properties"]["is_satellite"]
    update:
      example: false
  - target: $["components"]["schemas"]["Domain"]["properties"]["frontend_api_url"]
    update:
      example: "https://frontend.example.com"
  - target: $["components"]["schemas"]["Domain"]["properties"]["accounts_portal_url"]
    update:
      example: null
  - target: $["components"]["schemas"]["Domain"]["properties"]["proxy_url"]
    update:
      example: null
  - target: $["components"]["schemas"]["Domain"]["properties"]["development_origin"]
    update:
      example: "http://localhost:3000"
  - target: $["components"]["schemas"]["Domain"]["properties"]["cname_targets"]
    update:
      example:
        [
          {
            "host": "example-host.clerk.com",
            "value": "example-value.clerk.services",
            "required": true,
          },
        ]
  - target: $["components"]["schemas"]["Domains"]["properties"]["total_count"]
    update:
      example: 1
  - target: $["paths"]["/domains/{domain_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "domain_12345"
  - target: $["paths"]["/domains/{domain_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "domain_12345"
  - target: $["paths"]["/domains/{domain_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "example.com"
  - target: $["paths"]["/domains/{domain_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["proxy_url"]
    update:
      example: "http://proxy.example.com"
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["test_mode"]
    update:
      example: true
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["hibp"]
    update:
      example: false
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["enhanced_email_deliverability"]
    update:
      example: true
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["support_email"]
    update:
      example: "support@example.com"
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["clerk_js_version"]
    update:
      example: "2.3.1"
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["development_origin"]
    update:
      example: "http://localhost:3000"
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["allowed_origins"]
    update:
      example:
        [
          "http://localhost:3000",
          "chrome-extension://extension_uiid",
          "capacitor://localhost",
        ]
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["cookieless_dev"]
    update:
      example: false
  - target: $["paths"]["/instance"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["url_based_session_syncing"]
    update:
      example: true
  - target: $["paths"]["/instance/restrictions"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["allowlist"]
    update:
      example: false
  - target: $["paths"]["/instance/restrictions"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["blocklist"]
    update:
      example: true
  - target: $["paths"]["/instance/restrictions"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["block_email_subaddresses"]
    update:
      example: true
  - target: $["paths"]["/instance/restrictions"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["block_disposable_email_domains"]
    update:
      example: true
  - target: $["paths"]["/instance/restrictions"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["ignore_dots_for_gmail_addresses"]
    update:
      example: false
  - target: $["components"]["schemas"]["InstanceRestrictions"]["properties"]["object"]
    update:
      example: "instance_restrictions"
  - target: $["components"]["schemas"]["InstanceRestrictions"]["properties"]["allowlist"]
    update:
      example: false
  - target: $["components"]["schemas"]["InstanceRestrictions"]["properties"]["blocklist"]
    update:
      example: true
  - target: $["components"]["schemas"]["InstanceRestrictions"]["properties"]["block_email_subaddresses"]
    update:
      example: true
  - target: $["components"]["schemas"]["InstanceRestrictions"]["properties"]["ignore_dots_for_gmail_addresses"]
    update:
      example: false
  - target: $["paths"]["/instance/change_domain"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["home_url"]
    update:
      example: "https://www.newdomain.com"
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["enabled"]
    update:
      example: true
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["max_allowed_memberships"]
    update:
      example: 10
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["admin_delete_enabled"]
    update:
      example: false
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["domains_enabled"]
    update:
      example: true
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["domains_enrollment_modes"]
    update:
      example: ["automatic_invitation", "automatic_suggestion"]
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["creator_role_id"]
    update:
      example: "creator_role"
  - target: $["paths"]["/instance/organization_settings"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["domains_default_role_id"]
    update:
      example: "member_role"
  - target: $["components"]["schemas"]["ClerkError"]
    update:
      example:
        message: "Error message"
        long_message: "Longer error message with more details"
        code: "error_code"
        clerk_trace_id: "trace_id"
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["object"]
    update:
      example: "organization_settings"
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["max_allowed_memberships"]
    update:
      example: 5
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["max_allowed_roles"]
    update:
      example: 3
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["max_allowed_permissions"]
    update:
      example: 15
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["creator_role"]
    update:
      example: "admin"
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["admin_delete_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["domains_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["domains_enrollment_modes"]
    update:
      example: ["automatic_invitation", "automatic_suggestion"]
  - target: $["components"]["schemas"]["OrganizationSettings"]["properties"]["domains_default_role"]
    update:
      example: "member"
  - target: $["components"]["schemas"]["SvixURL"]["properties"]["svix_url"]
    update:
      example: "https://app.svix.com/your-instance-url"
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "Example Template"
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["claims"]
    update:
      example: {}
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["lifetime"]
    update:
      example: 3600
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["allowed_clock_skew"]
    update:
      example: 5
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["custom_signing_key"]
    update:
      example: false
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["signing_algorithm"]
    update:
      example: "RS256"
  - target: $["paths"]["/jwt_templates"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["signing_key"]
    update:
      example: "PRIVATE_KEY_PLACEHOLDER"
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["object"]
    update:
      example: "jwt_template"
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["id"]
    update:
      example: "jt_1234567890abcdef"
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["name"]
    update:
      example: "My First JWT Template"
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["claims"]
    update:
      example: {}
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["lifetime"]
    update:
      example: 3600
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["allowed_clock_skew"]
    update:
      example: 5
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["custom_signing_key"]
    update:
      example: false
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["signing_algorithm"]
    update:
      example: "RS256"
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["JWTTemplate"]["properties"]["updated_at"]
    update:
      example: 1612137600
  - target: $["paths"]["/jwt_templates/{template_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "template_123"
  - target: $["paths"]["/organizations"]["get"]["parameters"][2]["schema"]
    update:
      example: false
  - target: $["paths"]["/organizations"]["get"]["parameters"][3]["schema"]
    update:
      example: "clerk"
  - target: $["paths"]["/organizations"]["get"]["parameters"][4]["schema"]
    update:
      example: "-name"
  - target: $["paths"]["/organizations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "NewOrg"
  - target: $["paths"]["/organizations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["created_by"]
    update:
      example: "user_123"
  - target: $["paths"]["/organizations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: { "internal_code": "ABC123" }
  - target: $["paths"]["/organizations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: { "public_event": "Annual Summit" }
  - target: $["paths"]["/organizations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["slug"]
    update:
      example: "neworg"
  - target: $["paths"]["/organizations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["max_allowed_memberships"]
    update:
      example: 100
  - target: $["components"]["schemas"]["Organization"]["properties"]["public_metadata"]
    update:
      example: { "public_info": "Info visible to everyone" }
  - target: $["components"]["schemas"]["Organization"]["properties"]["private_metadata"]
    update:
      example: { "internal_use_only": "Sensitive data" }
  - target: $["components"]["schemas"]["Organizations"]["properties"]["data"]
    update:
      example: [{ "id": "org_1234", "name": "Sample Organization" }]
  - target: $["components"]["schemas"]["Organizations"]["properties"]["total_count"]
    update:
      example: 1
  - target: $["paths"]["/organizations/{organization_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "org_123"
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "org_123_update"
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: {}
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "New Organization Name"
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["slug"]
    update:
      example: "new-org-slug"
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["max_allowed_memberships"]
    update:
      example: 100
  - target: $["paths"]["/organizations/{organization_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["admin_delete_enabled"]
    update:
      example: true
  - target: $["paths"]["/organizations/{organization_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "org_321_delete"
  - target: $["paths"]["/organizations/{organization_id}/metadata"]["patch"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/metadata"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: { "announcement": "We are opening a new office!" }
  - target: $["paths"]["/organizations/{organization_id}/metadata"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: { "internal_use_only": "Future plans discussion." }
  - target: $["paths"]["/organizations/{organization_id}/logo"]["put"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/logo"]["put"]["requestBody"]["content"]["multipart/form-data"]["schema"]["properties"]["uploader_user_id"]
    update:
      example: "user_67890"
  - target: $["paths"]["/organizations/{organization_id}/logo"]["put"]["requestBody"]["content"]["multipart/form-data"]["schema"]["properties"]["file"]
    update:
      example: "path/to/your/logo.png"
  - target: $["paths"]["/organizations/{organization_id}/logo"]["delete"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["components"]["schemas"]["OrganizationWithLogo"]["allOf"][1]["properties"]["logo_url"]
    update:
      example: "https://example.com/logo_url.png"
  - target: $["components"]["schemas"]["OrganizationWithLogo"]["allOf"][1]["properties"]["image_url"]
    update:
      example: "https://example.com/image_url.png"
  - target: $["components"]["schemas"]["OrganizationWithLogo"]["allOf"][1]["properties"]["has_image"]
    update:
      example: true
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["email_address"]
    update:
      example: "user@example.com"
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["inviter_user_id"]
    update:
      example: "user_67890"
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["role"]
    update:
      example: "admin"
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: { "key": "value" }
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: { "private_key": "secret_value" }
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["redirect_url"]
    update:
      example: "https://example.com/welcome"
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["get"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/invitations"]["get"]["parameters"][3]["schema"]
    update:
      example: "pending"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["id"]
    update:
      example: "inv_12345"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["object"]
    update:
      example: "organization_invitation"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["email_address"]
    update:
      example: "user@example.com"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["role"]
    update:
      example: "admin"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["organization_id"]
    update:
      example: "org_12345"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["status"]
    update:
      example: "pending"
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["public_metadata"]
    update:
      example: { "key": "value" }
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["private_metadata"]
    update:
      example: { "private_key": "secret_value" }
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["created_at"]
    update:
      example: 1622547600
  - target: $["components"]["schemas"]["OrganizationInvitation"]["properties"]["updated_at"]
    update:
      example: 1622551200
  - target: $["components"]["schemas"]["OrganizationInvitations"]["properties"]["total_count"]
    update:
      example: 10
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["requestBody"]["content"]["application/json"]["schema"]["items"]["properties"]["email_address"]
    update:
      example: "newmember@example.com"
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["requestBody"]["content"]["application/json"]["schema"]["items"]["properties"]["inviter_user_id"]
    update:
      example: "user_67890"
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["requestBody"]["content"]["application/json"]["schema"]["items"]["properties"]["role"]
    update:
      example: "admin"
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["requestBody"]["content"]["application/json"]["schema"]["items"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["requestBody"]["content"]["application/json"]["schema"]["items"]["properties"]["private_metadata"]
    update:
      example: {}
  - target: $["paths"]["/organizations/{organization_id}/invitations/bulk"]["post"]["requestBody"]["content"]["application/json"]["schema"]["items"]["properties"]["redirect_url"]
    update:
      example: "https://example.com/welcome"
  - target: $["paths"]["/organizations/{organization_id}/invitations/pending"]["get"]["parameters"][0]
    update:
      example: "org_12345"
  - target: $["components"]["schemas"]["OrganizationInvitations"]["properties"]["data"]
    update:
      example:
        [
          {
            "id": "inv_12345",
            "object": "organization_invitation",
            "email_address": "user@example.com",
            "role": "member",
            "organization_id": "org_12345",
            "status": "pending",
            "created_at": 1617981379,
            "updated_at": 1625581379,
          },
        ]
  - target: $["paths"]["/organizations/{organization_id}/invitations/{invitation_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "org_123456789"
  - target: $["paths"]["/organizations/{organization_id}/invitations/{invitation_id}"]["get"]["parameters"][1]["schema"]
    update:
      example: "inv_987654321"
  - target: $["paths"]["/organizations/{organization_id}/invitations/{invitation_id}/revoke"]["post"]["parameters"][0]["schema"]
    update:
      example: "org_123456"
  - target: $["paths"]["/organizations/{organization_id}/invitations/{invitation_id}/revoke"]["post"]["parameters"][1]["schema"]
    update:
      example: "inv_123456"
  - target: $["paths"]["/organizations/{organization_id}/invitations/{invitation_id}/revoke"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["requesting_user_id"]
    update:
      example: "usr_12345"
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["post"]["description"]
    update: "Adds a user as a member to the given organization."
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["post"]["parameters"][0]["schema"]
    update:
      example: "org_123"
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["user_id"]["description"]
    update: "The ID of the user that will be added as a member in the organization."
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["user_id"]
    update:
      example: "user_456"
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["role"]
    update:
      example: "admin"
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["get"]["parameters"][0]["schema"]
    update:
      example: "org_789"
  - target: $["paths"]["/organizations/{organization_id}/memberships"]["get"]["parameters"][3]["schema"]
    update:
      example: "+created_at"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["permissions"]["items"]
    update:
      example: "read"
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["private_metadata"]
    update:
      example: {}
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]["properties"]["profile_image_url"]
    update:
      example: "https://example.com/profile.jpg"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}"]["patch"]["parameters"][1]["schema"]
    update:
      example: "user_67890"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["role"]
    update:
      example: "admin"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "org_12345"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}"]["delete"]["parameters"][1]["schema"]
    update:
      example: "user_67890"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}/metadata"]["patch"]["parameters"][0]["schema"]
    update:
      example: "org_123456"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}/metadata"]["patch"]["parameters"][1]["schema"]
    update:
      example: "user_654321"
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}/metadata"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public_metadata"]
    update:
      example: {}
  - target: $["paths"]["/organizations/{organization_id}/memberships/{user_id}/metadata"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["private_metadata"]
    update:
      example: {}
  - target: $["components"]["schemas"]["OrganizationMembership"]["properties"]["public_user_data"]
    update:
      example:
        user_id: "user_123"
        first_name: "John"
        last_name: "Doe"
        image_url: "https://example.com/profile.jpg"
        has_image: true
        identifier: "johndoe"
  - target: $["paths"]["/proxy_checks"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["domain_id"]
    update:
      example: "domain_32hfu3e"
  - target: $["paths"]["/proxy_checks"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["proxy_url"]
    update:
      example: "https://example.com/__clerk"
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["object"]
    update:
      example: "proxy_check"
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["id"]
    update:
      example: "chk_3498fd"
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["domain_id"]
    update:
      example: "domain_32hfu3e"
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["last_run_at"]
    update:
      example: 1622547600
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["proxy_url"]
    update:
      example: "https://example.com/__clerk"
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["successful"]
    update:
      example: true
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["created_at"]
    update:
      example: 1622547000
  - target: $["components"]["schemas"]["ProxyCheck"]["properties"]["updated_at"]
    update:
      example: 1622547700
  - target: $["paths"]["/redirect_urls"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["url"]
    update:
      example: "https://my-app.com/oauth-callback"
  - target: $["components"]["schemas"]["RedirectURL"]["properties"]["object"]
    update:
      example: "redirect_url"
  - target: $["components"]["schemas"]["RedirectURL"]["properties"]["id"]
    update:
      example: "red_12345"
  - target: $["components"]["schemas"]["RedirectURL"]["properties"]["url"]
    update:
      example: "https://my-app.com/oauth-callback"
  - target: $["components"]["schemas"]["RedirectURL"]["properties"]["created_at"]
    update:
      example: 1610000000
  - target: $["components"]["schemas"]["RedirectURL"]["properties"]["updated_at"]
    update:
      example: 1620000000
  - target: $["paths"]["/redirect_urls/{id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3"
  - target: $["paths"]["/redirect_urls/{id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3"
  - target: $["paths"]["/sign_in_tokens"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["user_id"]
    update:
      example: "user_12345"
  - target: $["paths"]["/sign_in_tokens"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["expires_in_seconds"]
    update:
      example: 2592000
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["object"]
    update:
      example: "sign_in_token"
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["id"]
    update:
      example: "token_12345"
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["status"]
    update:
      example: "pending"
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["user_id"]
    update:
      example: "user_12345"
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["token"]
    update:
      example: "secret_token"
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["url"]
    update:
      example: "https://example.com/signin/token"
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["SignInToken"]["properties"]["updated_at"]
    update:
      example: 1612137600
  - target: $["paths"]["/sign_in_tokens/{sign_in_token_id}/revoke"]["post"]["parameters"][0]["schema"]
    update:
      example: "tok_test_1234567890"
  - target: $["paths"]["/sign_ups/{id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "signup_1234567890abcdef"
  - target: $["paths"]["/sign_ups/{id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["custom_action"]
    update:
      example: false
  - target: $["paths"]["/sign_ups/{id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["external_id"]
    update:
      example: "ext_id_7890abcdef123456"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["object"]
    update:
      example: "sign_up_attempt"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["id"]
    update:
      example: "signup_1234567890abcdef"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["status"]
    update:
      example: "complete"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["required_fields"]
    update:
      example: ["email_address"]
  - target: $["components"]["schemas"]["SignUp"]["properties"]["optional_fields"]
    update:
      example: ["first_name", "last_name"]
  - target: $["components"]["schemas"]["SignUp"]["properties"]["missing_fields"]
    update:
      example: ["phone_number"]
  - target: $["components"]["schemas"]["SignUp"]["properties"]["unverified_fields"]
    update:
      example: ["email_address"]
  - target: $["components"]["schemas"]["SignUp"]["properties"]["username"]
    update:
      example: "user_123456"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["email_address"]
    update:
      example: "user@example.com"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["phone_number"]
    update:
      example: "+1234567890"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["web3_wallet"]
    update:
      example: "0x1234567890abcdef1234567890abcdef12345678"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["password_enabled"]
    update:
      example: true
  - target: $["components"]["schemas"]["SignUp"]["properties"]["first_name"]
    update:
      example: "John"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["custom_action"]
    update:
      example: false
  - target: $["components"]["schemas"]["SignUp"]["properties"]["external_id"]
    update:
      example: "ext_id_7890abcdef123456"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["created_session_id"]
    update:
      example: "sess_1234567890abcdef"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["created_user_id"]
    update:
      example: "user_1234567890abcdef"
  - target: $["components"]["schemas"]["SignUp"]["properties"]["abandon_at"]
    update:
      example: 1609459200
  - target: $["paths"]["/oauth_applications"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "Example App"
  - target: $["paths"]["/oauth_applications"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["callback_url"]
    update:
      example: "https://example.com/oauth/callback"
  - target: $["paths"]["/oauth_applications"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["public"]
    update:
      example: true
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["object"]
    update:
      example: "oauth_application"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["id"]
    update:
      example: "oauth_app_1234"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["instance_id"]
    update:
      example: "instance_5678"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["name"]
    update:
      example: "Example OAuth App"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["client_id"]
    update:
      example: "client_12345"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["public"]
    update:
      example: false
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["scopes"]
    update:
      example: "profile email"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["callback_url"]
    update:
      example: "https://example.com/oauth/callback"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["authorize_url"]
    update:
      example: "https://example.com/authorize"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["token_fetch_url"]
    update:
      example: "https://example.com/oauth/token"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["user_info_url"]
    update:
      example: "https://example.com/userinfo"
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["created_at"]
    update:
      example: 1609459200
  - target: $["components"]["schemas"]["OAuthApplication"]["properties"]["updated_at"]
    update:
      example: 1612137600
  - target: $["components"]["schemas"]["OAuthApplications"]["properties"]["data"]
    update:
      example:
        [
          {
            "object": "oauth_application",
            "id": "oauth_app_1234",
            "instance_id": "instance_5678",
            "name": "Example OAuth App",
            "client_id": "client_12345",
            "public": false,
            "scopes": "profile email",
            "callback_url": "https://example.com/oauth/callback",
            "authorize_url": "https://example.com/authorize",
            "token_fetch_url": "https://example.com/oauth/token",
            "user_info_url": "https://example.com/userinfo",
            "created_at": 1609459200,
            "updated_at": 1612137600,
          },
        ]
  - target: $["components"]["schemas"]["OAuthApplications"]["properties"]["total_count"]
    update:
      example: 1
  - target: $["components"]["schemas"]["OAuthApplicationWithSecret"]["allOf"][1]["properties"]["client_secret"]
    update:
      example: "secretXYZ123"
  - target: $["paths"]["/oauth_applications/{oauth_application_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "oauth_app_12345"
  - target: $["paths"]["/oauth_applications/{oauth_application_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "oauth_app_67890"
  - target: $["paths"]["/oauth_applications/{oauth_application_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "Updated OAuth App Name"
  - target: $["paths"]["/oauth_applications/{oauth_application_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["callback_url"]
    update:
      example: "https://example.com/oauth/callback"
  - target: $["paths"]["/oauth_applications/{oauth_application_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "oauth_app_09876"
  - target: $["paths"]["/oauth_applications/{oauth_application_id}/rotate_secret"]["post"]["parameters"][0]["schema"]
    update:
      example: "oauth_application_12345"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "My SAML Connection"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["domain"]
    update:
      example: "example.org"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["provider"]
    update:
      example: "saml_custom"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_entity_id"]
    update:
      example: "http://idp.example.org/"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_sso_url"]
    update:
      example: "http://idp.example.org/sso"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_certificate"]
    update:
      example: "MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT..."
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_metadata_url"]
    update:
      example: "http://idp.example.org/metadata.xml"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_metadata"]
    update:
      example: "<EntityDescriptor ..."
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["user_id"]
    update:
      example: "nameid"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["email_address"]
    update:
      example: "mail"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["first_name"]
    update:
      example: "givenName"
  - target: $["paths"]["/saml_connections"]["post"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["last_name"]
    update:
      example: "surname"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["object"]
    update:
      example: "saml_connection"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["id"]
    update:
      example: "sc_1234567890"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["name"]
    update:
      example: "My Company SAML Config"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["domain"]
    update:
      example: "mycompany.com"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["idp_entity_id"]
    update:
      example: "idp-entity-id"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["idp_sso_url"]
    update:
      example: "https://sso.mycompany.com"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["idp_certificate"]
    update:
      example: "MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT..."
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["idp_metadata_url"]
    update:
      example: "https://sso.mycompany.com/metadata"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["idp_metadata"]
    update:
      example: "<EntityDescriptor ..."
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["acs_url"]
    update:
      example: "https://mycompany.clerk.com/saml/callback"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["sp_entity_id"]
    update:
      example: "sp-entity-id"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["sp_metadata_url"]
    update:
      example: "https://mycompany.clerk.com/saml/metadata"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["attribute_mapping"]["properties"]["user_id"]
    update:
      example: "nameid"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["attribute_mapping"]["properties"]["email_address"]
    update:
      example: "email"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["attribute_mapping"]["properties"]["first_name"]
    update:
      example: "firstName"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["attribute_mapping"]["properties"]["last_name"]
    update:
      example: "lastName"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["active"]
    update:
      example: true
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["provider"]
    update:
      example: "saml_custom"
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["user_count"]
    update:
      example: 150
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["sync_user_attributes"]
    update:
      example: true
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["allow_subdomains"]
    update:
      example: false
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["allow_idp_initiated"]
    update:
      example: true
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["created_at"]
    update:
      example: 1614768000
  - target: $["components"]["schemas"]["SAMLConnection"]["properties"]["updated_at"]
    update:
      example: 1622540800
  - target: $["components"]["schemas"]["SAMLConnections"]["properties"]["total_count"]
    update:
      example: 5
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["get"]["parameters"][0]["schema"]
    update:
      example: "saml_conn_123"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["parameters"][0]["schema"]
    update:
      example: "saml_conn_123_update"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["name"]
    update:
      example: "Example SAML Connection"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["domain"]
    update:
      example: "example.com"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_entity_id"]
    update:
      example: "entity_123"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_sso_url"]
    update:
      example: "https://idp.example.com/sso"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_certificate"]
    update:
      example: "MIIDBTCCAe2gAwIBAgIQ..."
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_metadata_url"]
    update:
      example: "https://idp.example.com/metadata"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["idp_metadata"]
    update:
      example: "<EntityDescriptor>...</EntityDescriptor>"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["user_id"]
    update:
      example: "id123"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["email_address"]
    update:
      example: "user@example.com"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["first_name"]
    update:
      example: "Jane"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["attribute_mapping"]["properties"]["last_name"]
    update:
      example: "Doe"
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["active"]
    update:
      example: true
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["sync_user_attributes"]
    update:
      example: false
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["allow_subdomains"]
    update:
      example: true
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["patch"]["requestBody"]["content"]["application/json"]["schema"]["properties"]["allow_idp_initiated"]
    update:
      example: false
  - target: $["paths"]["/saml_connections/{saml_connection_id}"]["delete"]["parameters"][0]["schema"]
    update:
      example: "saml_conn_123_delete"
  - target: $["components"]["schemas"]["TestingToken"]["properties"]["object"]
    update:
      example: "testing_token" # added to comply with instructions, though it seems redundant given the enum

================
File: global.json
================
{
  "sdk": {
    "version": "8.0.0",
    "rollForward": "latestMinor"
    }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Clerk, Inc

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: NUGET.md
================
# Clerk.BackendAPI


<!-- Start SDK Example Usage [usage] -->
## SDK Example Usage

### Example

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi();

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End SDK Example Usage [usage] -->

<!-- Start Authentication [security] -->
## Authentication

### Per-Client Security Schemes

This SDK supports the following security scheme globally:

| Name         | Type | Scheme      |
| ------------ | ---- | ----------- |
| `BearerAuth` | http | HTTP Bearer |

To authenticate with the API the `BearerAuth` parameter must be set when initializing the SDK client instance. For example:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End Authentication [security] -->

<!-- Start Retries [retries] -->
## Retries

Some of the endpoints in this SDK support retries. If you use the SDK without any configuration, it will fall back to the default retry strategy provided by the API. However, the default retry strategy can be overridden on a per-operation basis, or across the entire SDK.

To change the default retry strategy for a single API call, simply pass a `RetryConfig` to the call:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi();

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(
    retryConfig: new RetryConfig(
        strategy: RetryConfig.RetryStrategy.BACKOFF,
        backoff: new BackoffStrategy(
            initialIntervalMs: 1L,
            maxIntervalMs: 50L,
            maxElapsedTimeMs: 100L,
            exponent: 1.1
        ),
        retryConnectionErrors: false
    ),
    request: req
);

// handle response
```

If you'd like to override the default retry strategy for all operations that support retries, you can use the `RetryConfig` optional parameter when intitializing the SDK:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(retryConfig: new RetryConfig(
    strategy: RetryConfig.RetryStrategy.BACKOFF,
    backoff: new BackoffStrategy(
        initialIntervalMs: 1L,
        maxIntervalMs: 50L,
        maxElapsedTimeMs: 100L,
        exponent: 1.1
    ),
    retryConnectionErrors: false
));

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End Retries [retries] -->

<!-- Start Error Handling [errors] -->
## Error Handling

Handling errors in this SDK should largely match your expectations. All operations return a response object or throw an exception.

By default, an API error will raise a `Clerk.BackendAPI.Models.Errors.SDKError` exception, which has the following properties:

| Property      | Type                  | Description           |
|---------------|-----------------------|-----------------------|
| `Message`     | *string*              | The error message     |
| `Request`     | *HttpRequestMessage*  | The HTTP request      |
| `Response`    | *HttpResponseMessage* | The HTTP response     |

When custom error responses are specified for an operation, the SDK may also throw their associated exceptions. You can refer to respective *Errors* tables in SDK docs for more details on possible exception types for each operation. For example, the `VerifyAsync` method throws the following exceptions:

| Error Type                                 | Status Code   | Content Type     |
| ------------------------------------------ | ------------- | ---------------- |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404 | application/json |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX      | \*/\*            |

### Example

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Errors;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

try
{
    VerifyClientRequestBody req = new VerifyClientRequestBody() {
        Token = "jwt_token_example",
    };

    var res = await sdk.Clients.VerifyAsync(req);

    // handle response
}
catch (Exception ex)
{
    if (ex is ClerkErrors)
    {
        // Handle exception data
        throw;
    }
    else if (ex is Clerk.BackendAPI.Models.Errors.SDKError)
    {
        // Handle default exception
        throw;
    }
}
```
<!-- End Error Handling [errors] -->

<!-- Start Server Selection [server] -->
## Server Selection

### Override Server URL Per-Client

The default server can be overridden globally by passing a URL to the `serverUrl: string` optional parameter when initializing the SDK client instance. For example:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(serverUrl: "https://api.clerk.com/v1");

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End Server Selection [server] -->

<!-- Placeholder for Future Speakeasy SDK Sections -->

================
File: README.md
================
<div align="center">
  <a href="https://clerk.com?utm_source=github&utm_medium=clerk_javascript" target="_blank" rel="noopener noreferrer">
    <picture>
      <source media="(prefers-color-scheme: dark)" srcset="https://images.clerk.com/static/logo-dark-mode-400x400.png">
      <img src="https://images.clerk.com/static/logo-light-mode-400x400.png" height="100">
    </picture>
  </a>
   <p>The most comprehensive User Management Platform</p>
   <a href="https://clerk.com/docs/reference/backend-api"><img src="https://img.shields.io/static/v1?label=Docs&message=API Ref&color=000000&style=for-the-badge" /></a>
  <a href="https://opensource.org/licenses/MIT"><img src="https://img.shields.io/badge/License-MIT-blue.svg?style=for-the-badge" /></a>
</div>
<br /><br />

<!-- Start Summary [summary] -->
## Summary

Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.

### Versions

When the API changes in a way that isn't compatible with older versions, a new version is released.
Each version is identified by its release date, e.g. `2024-10-01`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).

Please see https://clerk.com/docs for more information.

More information about the API can be found at https://clerk.com/docs
<!-- End Summary [summary] -->

<!-- Start Table of Contents [toc] -->
## Table of Contents
<!-- $toc-max-depth=2 -->
  * [SDK Installation](#sdk-installation)
  * [SDK Example Usage](#sdk-example-usage)
  * [Authentication](#authentication)
  * [Request Authentication](#request-authentication)
  * [Available Resources and Operations](#available-resources-and-operations)
  * [Retries](#retries)
  * [Error Handling](#error-handling)
  * [Server Selection](#server-selection)
* [Development](#development)
  * [Maturity](#maturity)
  * [Contributions](#contributions)

<!-- End Table of Contents [toc] -->

<!-- Start SDK Installation [installation] -->
## SDK Installation

### NuGet

To add the [NuGet](https://www.nuget.org/) package to a .NET project:
```bash
dotnet add package Clerk.BackendAPI
```

### Locally

To add a reference to a local instance of the SDK in a .NET project:
```bash
dotnet add reference src/Clerk/BackendAPI/Clerk.BackendAPI.csproj
```
<!-- End SDK Installation [installation] -->

<!-- Start SDK Example Usage [usage] -->
## SDK Example Usage

### Example

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi();

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End SDK Example Usage [usage] -->

<!-- Start Authentication [security] -->
## Authentication

### Per-Client Security Schemes

This SDK supports the following security scheme globally:

| Name         | Type | Scheme      |
| ------------ | ---- | ----------- |
| `BearerAuth` | http | HTTP Bearer |

To authenticate with the API the `BearerAuth` parameter must be set when initializing the SDK client instance. For example:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End Authentication [security] -->

## Request Authentication

Use the [AuthenticateRequestAsync](https://github.com/clerk/clerk-sdk-csharp/blob/main/src/Clerk/BackendAPI/Helpers/AuthenticateRequest.cs) method to authenticate a request from your app's frontend (when using a Clerk frontend SDK) to Clerk's Backend API. For example the following utility function checks if the user is effectively signed in:

```csharp
using Clerk.BackendAPI.Helpers.Jwks;
using System;
using System.Net.Http;
using System.Threading.Tasks;

public class UserAuthentication
{
    public static async Task<bool> IsSignedInAsync(HttpRequestMessage request)
    {
        var options = new AuthenticateRequestOptions(
            secretKey: Environment.GetEnvironmentVariable("CLERK_SECRET_KEY"),
            authorizedParties: new string[] { "https://example.com" }
        );

        var requestState = await AuthenticateRequest.AuthenticateRequestAsync(request, options);

        return requestState.isSignedIn();
    }
}
```

If the request is correctly authenticated, the token's claims are made available in `requestState.Claims`. Otherwise the reason for the token verification failure is given by `requestState.ErrorReason`.


<!-- Start Available Resources and Operations [operations] -->
## Available Resources and Operations

<details open>
<summary>Available methods</summary>

### [ActorTokens](docs/sdks/actortokens/README.md)

* [Create](docs/sdks/actortokens/README.md#create) - Create actor token
* [Revoke](docs/sdks/actortokens/README.md#revoke) - Revoke actor token

### [AllowlistIdentifiers](docs/sdks/allowlistidentifiers/README.md)

* [List](docs/sdks/allowlistidentifiers/README.md#list) - List all identifiers on the allow-list
* [Create](docs/sdks/allowlistidentifiers/README.md#create) - Add identifier to the allow-list
* [Delete](docs/sdks/allowlistidentifiers/README.md#delete) - Delete identifier from allow-list

### [BetaFeatures](docs/sdks/betafeatures/README.md)

* [UpdateInstanceSettings](docs/sdks/betafeatures/README.md#updateinstancesettings) - Update instance settings
* [~~UpdateProductionInstanceDomain~~](docs/sdks/betafeatures/README.md#updateproductioninstancedomain) - Update production instance domain :warning: **Deprecated**

### [BlocklistIdentifiers](docs/sdks/blocklistidentifiers/README.md)

* [List](docs/sdks/blocklistidentifiers/README.md#list) - List all identifiers on the block-list
* [Create](docs/sdks/blocklistidentifiers/README.md#create) - Add identifier to the block-list
* [Delete](docs/sdks/blocklistidentifiers/README.md#delete) - Delete identifier from block-list


### [Clients](docs/sdks/clients/README.md)

* [~~List~~](docs/sdks/clients/README.md#list) - List all clients :warning: **Deprecated**
* [Verify](docs/sdks/clients/README.md#verify) - Verify a client
* [Get](docs/sdks/clients/README.md#get) - Get a client

### [Domains](docs/sdks/domains/README.md)

* [List](docs/sdks/domains/README.md#list) - List all instance domains
* [Add](docs/sdks/domains/README.md#add) - Add a domain
* [Delete](docs/sdks/domains/README.md#delete) - Delete a satellite domain
* [Update](docs/sdks/domains/README.md#update) - Update a domain

### [EmailAddresses](docs/sdks/emailaddresses/README.md)

* [Create](docs/sdks/emailaddresses/README.md#create) - Create an email address
* [Get](docs/sdks/emailaddresses/README.md#get) - Retrieve an email address
* [Delete](docs/sdks/emailaddresses/README.md#delete) - Delete an email address
* [Update](docs/sdks/emailaddresses/README.md#update) - Update an email address

### [~~EmailAndSmsTemplates~~](docs/sdks/emailandsmstemplates/README.md)

* [~~Upsert~~](docs/sdks/emailandsmstemplates/README.md#upsert) - Update a template for a given type and slug :warning: **Deprecated**

### [~~EmailSMSTemplates~~](docs/sdks/emailsmstemplates/README.md)

* [~~List~~](docs/sdks/emailsmstemplates/README.md#list) - List all templates :warning: **Deprecated**
* [~~Get~~](docs/sdks/emailsmstemplates/README.md#get) - Retrieve a template :warning: **Deprecated**
* [~~Revert~~](docs/sdks/emailsmstemplates/README.md#revert) - Revert a template :warning: **Deprecated**
* [~~ToggleTemplateDelivery~~](docs/sdks/emailsmstemplates/README.md#toggletemplatedelivery) - Toggle the delivery by Clerk for a template of a given type and slug :warning: **Deprecated**

### [InstanceSettings](docs/sdks/instancesettings/README.md)

* [Get](docs/sdks/instancesettings/README.md#get) - Fetch the current instance
* [Update](docs/sdks/instancesettings/README.md#update) - Update instance settings
* [UpdateRestrictions](docs/sdks/instancesettings/README.md#updaterestrictions) - Update instance restrictions
* [ChangeDomain](docs/sdks/instancesettings/README.md#changedomain) - Update production instance domain
* [UpdateOrganizationSettings](docs/sdks/instancesettings/README.md#updateorganizationsettings) - Update instance organization settings

### [Invitations](docs/sdks/invitations/README.md)

* [Create](docs/sdks/invitations/README.md#create) - Create an invitation
* [List](docs/sdks/invitations/README.md#list) - List all invitations
* [BulkCreate](docs/sdks/invitations/README.md#bulkcreate) - Create multiple invitations
* [Revoke](docs/sdks/invitations/README.md#revoke) - Revokes an invitation

### [Jwks](docs/sdks/jwks/README.md)

* [GetJWKS](docs/sdks/jwks/README.md#getjwks) - Retrieve the JSON Web Key Set of the instance

### [JwtTemplates](docs/sdks/jwttemplates/README.md)

* [List](docs/sdks/jwttemplates/README.md#list) - List all templates
* [Create](docs/sdks/jwttemplates/README.md#create) - Create a JWT template
* [Get](docs/sdks/jwttemplates/README.md#get) - Retrieve a template
* [Update](docs/sdks/jwttemplates/README.md#update) - Update a JWT template
* [Delete](docs/sdks/jwttemplates/README.md#delete) - Delete a Template

### [Miscellaneous](docs/sdks/miscellaneous/README.md)

* [GetPublicInterstitial](docs/sdks/miscellaneous/README.md#getpublicinterstitial) - Returns the markup for the interstitial page

### [OauthApplications](docs/sdks/oauthapplications/README.md)

* [List](docs/sdks/oauthapplications/README.md#list) - Get a list of OAuth applications for an instance
* [Create](docs/sdks/oauthapplications/README.md#create) - Create an OAuth application
* [Get](docs/sdks/oauthapplications/README.md#get) - Retrieve an OAuth application by ID
* [Update](docs/sdks/oauthapplications/README.md#update) - Update an OAuth application
* [Delete](docs/sdks/oauthapplications/README.md#delete) - Delete an OAuth application
* [RotateSecret](docs/sdks/oauthapplications/README.md#rotatesecret) - Rotate the client secret of the given OAuth application

### [OrganizationDomains](docs/sdks/organizationdomains/README.md)

* [Create](docs/sdks/organizationdomains/README.md#create) - Create a new organization domain.
* [List](docs/sdks/organizationdomains/README.md#list) - Get a list of all domains of an organization.
* [Update](docs/sdks/organizationdomains/README.md#update) - Update an organization domain.
* [Delete](docs/sdks/organizationdomains/README.md#delete) - Remove a domain from an organization.

### [OrganizationInvitations](docs/sdks/organizationinvitations/README.md)

* [GetAll](docs/sdks/organizationinvitations/README.md#getall) - Get a list of organization invitations for the current instance
* [Create](docs/sdks/organizationinvitations/README.md#create) - Create and send an organization invitation
* [List](docs/sdks/organizationinvitations/README.md#list) - Get a list of organization invitations
* [BulkCreate](docs/sdks/organizationinvitations/README.md#bulkcreate) - Bulk create and send organization invitations
* [~~ListPending~~](docs/sdks/organizationinvitations/README.md#listpending) - Get a list of pending organization invitations :warning: **Deprecated**
* [Get](docs/sdks/organizationinvitations/README.md#get) - Retrieve an organization invitation by ID
* [Revoke](docs/sdks/organizationinvitations/README.md#revoke) - Revoke a pending organization invitation

### [OrganizationMemberships](docs/sdks/organizationmemberships/README.md)

* [Create](docs/sdks/organizationmemberships/README.md#create) - Create a new organization membership
* [List](docs/sdks/organizationmemberships/README.md#list) - Get a list of all members of an organization
* [Update](docs/sdks/organizationmemberships/README.md#update) - Update an organization membership
* [Delete](docs/sdks/organizationmemberships/README.md#delete) - Remove a member from an organization
* [UpdateMetadata](docs/sdks/organizationmemberships/README.md#updatemetadata) - Merge and update organization membership metadata

### [Organizations](docs/sdks/organizations/README.md)

* [List](docs/sdks/organizations/README.md#list) - Get a list of organizations for an instance
* [Create](docs/sdks/organizations/README.md#create) - Create an organization
* [Get](docs/sdks/organizations/README.md#get) - Retrieve an organization by ID or slug
* [Update](docs/sdks/organizations/README.md#update) - Update an organization
* [Delete](docs/sdks/organizations/README.md#delete) - Delete an organization
* [MergeMetadata](docs/sdks/organizations/README.md#mergemetadata) - Merge and update metadata for an organization
* [UploadLogo](docs/sdks/organizations/README.md#uploadlogo) - Upload a logo for the organization
* [DeleteLogo](docs/sdks/organizations/README.md#deletelogo) - Delete the organization's logo.

### [PhoneNumbers](docs/sdks/phonenumbers/README.md)

* [Create](docs/sdks/phonenumbers/README.md#create) - Create a phone number
* [Get](docs/sdks/phonenumbers/README.md#get) - Retrieve a phone number
* [Delete](docs/sdks/phonenumbers/README.md#delete) - Delete a phone number
* [Update](docs/sdks/phonenumbers/README.md#update) - Update a phone number

### [ProxyChecks](docs/sdks/proxychecks/README.md)

* [Verify](docs/sdks/proxychecks/README.md#verify) - Verify the proxy configuration for your domain

### [RedirectUrls](docs/sdks/redirecturls/README.md)

* [List](docs/sdks/redirecturls/README.md#list) - List all redirect URLs
* [Create](docs/sdks/redirecturls/README.md#create) - Create a redirect URL
* [Get](docs/sdks/redirecturls/README.md#get) - Retrieve a redirect URL
* [Delete](docs/sdks/redirecturls/README.md#delete) - Delete a redirect URL

### [SamlConnections](docs/sdks/samlconnections/README.md)

* [List](docs/sdks/samlconnections/README.md#list) - Get a list of SAML Connections for an instance
* [Create](docs/sdks/samlconnections/README.md#create) - Create a SAML Connection
* [Get](docs/sdks/samlconnections/README.md#get) - Retrieve a SAML Connection by ID
* [Update](docs/sdks/samlconnections/README.md#update) - Update a SAML Connection
* [Delete](docs/sdks/samlconnections/README.md#delete) - Delete a SAML Connection

### [Sessions](docs/sdks/sessions/README.md)

* [List](docs/sdks/sessions/README.md#list) - List all sessions
* [Create](docs/sdks/sessions/README.md#create) - Create a new active session
* [Get](docs/sdks/sessions/README.md#get) - Retrieve a session
* [Revoke](docs/sdks/sessions/README.md#revoke) - Revoke a session
* [~~Verify~~](docs/sdks/sessions/README.md#verify) - Verify a session :warning: **Deprecated**
* [CreateToken](docs/sdks/sessions/README.md#createtoken) - Create a session token
* [CreateTokenFromTemplate](docs/sdks/sessions/README.md#createtokenfromtemplate) - Create a session token from a jwt template

### [SignInTokens](docs/sdks/signintokens/README.md)

* [Create](docs/sdks/signintokens/README.md#create) - Create sign-in token
* [Revoke](docs/sdks/signintokens/README.md#revoke) - Revoke the given sign-in token

### [SignUps](docs/sdks/signups/README.md)

* [Get](docs/sdks/signups/README.md#get) - Retrieve a sign-up by ID
* [Update](docs/sdks/signups/README.md#update) - Update a sign-up

### [~~Templates~~](docs/sdks/templates/README.md)

* [~~Preview~~](docs/sdks/templates/README.md#preview) - Preview changes to a template :warning: **Deprecated**

### [TestingTokens](docs/sdks/testingtokens/README.md)

* [Create](docs/sdks/testingtokens/README.md#create) - Retrieve a new testing token

### [Users](docs/sdks/users/README.md)

* [List](docs/sdks/users/README.md#list) - List all users
* [Create](docs/sdks/users/README.md#create) - Create a new user
* [Count](docs/sdks/users/README.md#count) - Count users
* [Get](docs/sdks/users/README.md#get) - Retrieve a user
* [Update](docs/sdks/users/README.md#update) - Update a user
* [Delete](docs/sdks/users/README.md#delete) - Delete a user
* [Ban](docs/sdks/users/README.md#ban) - Ban a user
* [Unban](docs/sdks/users/README.md#unban) - Unban a user
* [Lock](docs/sdks/users/README.md#lock) - Lock a user
* [Unlock](docs/sdks/users/README.md#unlock) - Unlock a user
* [SetProfileImage](docs/sdks/users/README.md#setprofileimage) - Set user profile image
* [DeleteProfileImage](docs/sdks/users/README.md#deleteprofileimage) - Delete user profile image
* [UpdateMetadata](docs/sdks/users/README.md#updatemetadata) - Merge and update a user's metadata
* [GetOAuthAccessToken](docs/sdks/users/README.md#getoauthaccesstoken) - Retrieve the OAuth access token of a user
* [GetOrganizationMemberships](docs/sdks/users/README.md#getorganizationmemberships) - Retrieve all memberships for a user
* [GetOrganizationInvitations](docs/sdks/users/README.md#getorganizationinvitations) - Retrieve all invitations for a user
* [VerifyPassword](docs/sdks/users/README.md#verifypassword) - Verify the password of a user
* [VerifyTotp](docs/sdks/users/README.md#verifytotp) - Verify a TOTP or backup code for a user
* [DisableMfa](docs/sdks/users/README.md#disablemfa) - Disable a user's MFA methods
* [DeleteBackupCodes](docs/sdks/users/README.md#deletebackupcodes) - Disable all user's Backup codes
* [DeletePasskey](docs/sdks/users/README.md#deletepasskey) - Delete a user passkey
* [DeleteWeb3Wallet](docs/sdks/users/README.md#deleteweb3wallet) - Delete a user web3 wallet
* [DeleteTOTP](docs/sdks/users/README.md#deletetotp) - Delete all the user's TOTPs
* [DeleteExternalAccount](docs/sdks/users/README.md#deleteexternalaccount) - Delete External Account
* [GetInstanceOrganizationMemberships](docs/sdks/users/README.md#getinstanceorganizationmemberships) - Get a list of all organization memberships within an instance.

### [WaitlistEntries](docs/sdks/waitlistentries/README.md)

* [List](docs/sdks/waitlistentries/README.md#list) - List all waitlist entries
* [Create](docs/sdks/waitlistentries/README.md#create) - Create a waitlist entry

### [Webhooks](docs/sdks/webhooks/README.md)

* [CreateSvixApp](docs/sdks/webhooks/README.md#createsvixapp) - Create a Svix app
* [DeleteSvixApp](docs/sdks/webhooks/README.md#deletesvixapp) - Delete a Svix app
* [GenerateSvixAuthURL](docs/sdks/webhooks/README.md#generatesvixauthurl) - Create a Svix Dashboard URL

</details>
<!-- End Available Resources and Operations [operations] -->

<!-- Start Retries [retries] -->
## Retries

Some of the endpoints in this SDK support retries. If you use the SDK without any configuration, it will fall back to the default retry strategy provided by the API. However, the default retry strategy can be overridden on a per-operation basis, or across the entire SDK.

To change the default retry strategy for a single API call, simply pass a `RetryConfig` to the call:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi();

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(
    retryConfig: new RetryConfig(
        strategy: RetryConfig.RetryStrategy.BACKOFF,
        backoff: new BackoffStrategy(
            initialIntervalMs: 1L,
            maxIntervalMs: 50L,
            maxElapsedTimeMs: 100L,
            exponent: 1.1
        ),
        retryConnectionErrors: false
    ),
    request: req
);

// handle response
```

If you'd like to override the default retry strategy for all operations that support retries, you can use the `RetryConfig` optional parameter when intitializing the SDK:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(retryConfig: new RetryConfig(
    strategy: RetryConfig.RetryStrategy.BACKOFF,
    backoff: new BackoffStrategy(
        initialIntervalMs: 1L,
        maxIntervalMs: 50L,
        maxElapsedTimeMs: 100L,
        exponent: 1.1
    ),
    retryConnectionErrors: false
));

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End Retries [retries] -->

<!-- Start Error Handling [errors] -->
## Error Handling

Handling errors in this SDK should largely match your expectations. All operations return a response object or throw an exception.

By default, an API error will raise a `Clerk.BackendAPI.Models.Errors.SDKError` exception, which has the following properties:

| Property      | Type                  | Description           |
|---------------|-----------------------|-----------------------|
| `Message`     | *string*              | The error message     |
| `Request`     | *HttpRequestMessage*  | The HTTP request      |
| `Response`    | *HttpResponseMessage* | The HTTP response     |

When custom error responses are specified for an operation, the SDK may also throw their associated exceptions. You can refer to respective *Errors* tables in SDK docs for more details on possible exception types for each operation. For example, the `VerifyAsync` method throws the following exceptions:

| Error Type                                 | Status Code   | Content Type     |
| ------------------------------------------ | ------------- | ---------------- |
| Clerk.BackendAPI.Models.Errors.ClerkErrors | 400, 401, 404 | application/json |
| Clerk.BackendAPI.Models.Errors.SDKError    | 4XX, 5XX      | \*/\*            |

### Example

```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Models.Errors;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(bearerAuth: "<YOUR_BEARER_TOKEN_HERE>");

try
{
    VerifyClientRequestBody req = new VerifyClientRequestBody() {
        Token = "jwt_token_example",
    };

    var res = await sdk.Clients.VerifyAsync(req);

    // handle response
}
catch (Exception ex)
{
    if (ex is ClerkErrors)
    {
        // Handle exception data
        throw;
    }
    else if (ex is Clerk.BackendAPI.Models.Errors.SDKError)
    {
        // Handle default exception
        throw;
    }
}
```
<!-- End Error Handling [errors] -->

<!-- Start Server Selection [server] -->
## Server Selection

### Override Server URL Per-Client

The default server can be overridden globally by passing a URL to the `serverUrl: string` optional parameter when initializing the SDK client instance. For example:
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi(serverUrl: "https://api.clerk.com/v1");

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End Server Selection [server] -->

<!-- Placeholder for Future Speakeasy SDK Sections -->

# Development

## Maturity

This SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage
to a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally
looking for the latest version.

## Contributions

While we value open-source contributions to this SDK, this library is generated programmatically. Any manual changes added to internal files will be overwritten on the next generation. 
We look forward to hearing your feedback. Feel free to open a PR or an issue with a proof of concept and we'll do our best to include it in a future release. 

### SDK Created by [Speakeasy](https://www.speakeasy.com/?utm_source=openapi-clerk-backend-api-sdk-clerk-backend-api-sd-ksas&utm_campaign=csharp)

================
File: RELEASES.md
================
## 2024-11-25 20:10:28
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.445.2 (2.461.4) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.2.2] .
### Releases
- [NuGet v0.2.2] https://www.nuget.org/packages/Clerk.BackendAPI/0.2.2 - .

## 2024-11-27 14:34:49
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.448.0 (2.466.0) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.2.3] .
### Releases
- [NuGet v0.2.3] https://www.nuget.org/packages/Clerk.BackendAPI/0.2.3 - .

## 2024-12-18 14:34:48
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.456.0 (2.481.0) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.2.4] .
### Releases
- [NuGet v0.2.4] https://www.nuget.org/packages/Clerk.BackendAPI/0.2.4 - .

## 2025-01-23 22:02:03
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.473.0 (2.495.0) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.3.0] .
### Releases
- [NuGet v0.3.0] https://www.nuget.org/packages/Clerk.BackendAPI/0.3.0 - .

## 2025-02-18 00:05:26
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.493.2 (2.512.4) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.4.0] .
### Releases
- [NuGet v0.4.0] https://www.nuget.org/packages/Clerk.BackendAPI/0.4.0 - .

## 2025-02-19 18:23:19
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.495.1 (2.515.4) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.5.0] .
### Releases
- [NuGet v0.5.0] https://www.nuget.org/packages/Clerk.BackendAPI/0.5.0 - .

## 2025-03-04 00:05:28
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.509.0 (2.539.0) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.6.0] .
### Releases
- [NuGet v0.6.0] https://www.nuget.org/packages/Clerk.BackendAPI/0.6.0 - .

## 2025-03-04 20:49:38
### Changes
Based on:
- OpenAPI Doc  
- Speakeasy CLI 1.509.1 (2.539.1) https://github.com/speakeasy-api/speakeasy
### Generated
- [csharp v0.6.1] .
### Releases
- [NuGet v0.6.1] https://www.nuget.org/packages/Clerk.BackendAPI/0.6.1 - .

================
File: src/Clerk/BackendAPI/.genignore
================
Helpers/

================
File: src/Clerk/BackendAPI/ActorTokens.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IActorTokens
    {

        /// <summary>
        /// Create actor token
        /// 
        /// <remarks>
        /// Create an actor token that can be used to impersonate the given user.<br/>
        /// The `actor` parameter needs to include at least a &quot;sub&quot; key whose value is the ID of the actor (impersonating) user.
        /// </remarks>
        /// </summary>
        Task<CreateActorTokenResponse> CreateAsync(CreateActorTokenRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Revoke actor token
        /// 
        /// <remarks>
        /// Revokes a pending actor token.
        /// </remarks>
        /// </summary>
        Task<RevokeActorTokenResponse> RevokeAsync(string actorTokenId, RetryConfig? retryConfig = null);
    }

    public class ActorTokens: IActorTokens
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public ActorTokens(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateActorTokenResponse> CreateAsync(CreateActorTokenRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/actor_tokens";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateActorToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ActorToken>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateActorTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.ActorToken = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<RevokeActorTokenResponse> RevokeAsync(string actorTokenId, RetryConfig? retryConfig = null)
        {
            var request = new RevokeActorTokenRequest()
            {
                ActorTokenId = actorTokenId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/actor_tokens/{actor_token_id}/revoke", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RevokeActorToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ActorToken>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RevokeActorTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.ActorToken = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/AllowlistIdentifiers.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IAllowlistIdentifiers
    {

        /// <summary>
        /// List all identifiers on the allow-list
        /// 
        /// <remarks>
        /// Get a list of all identifiers allowed to sign up to an instance
        /// </remarks>
        /// </summary>
        Task<ListAllowlistIdentifiersResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Add identifier to the allow-list
        /// 
        /// <remarks>
        /// Create an identifier allowed to sign up to an instance
        /// </remarks>
        /// </summary>
        Task<CreateAllowlistIdentifierResponse> CreateAsync(CreateAllowlistIdentifierRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete identifier from allow-list
        /// 
        /// <remarks>
        /// Delete an identifier from the instance allow-list
        /// </remarks>
        /// </summary>
        Task<DeleteAllowlistIdentifierResponse> DeleteAsync(string identifierId, RetryConfig? retryConfig = null);
    }

    public class AllowlistIdentifiers: IAllowlistIdentifiers
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public AllowlistIdentifiers(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListAllowlistIdentifiersResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new ListAllowlistIdentifiersRequest()
            {
                Paginated = paginated,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/allowlist_identifiers", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListAllowlistIdentifiers", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 402 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<AllowlistIdentifier>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListAllowlistIdentifiersResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.AllowlistIdentifierList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 402}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateAllowlistIdentifierResponse> CreateAsync(CreateAllowlistIdentifierRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/allowlist_identifiers";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateAllowlistIdentifier", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<AllowlistIdentifier>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateAllowlistIdentifierResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.AllowlistIdentifier = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteAllowlistIdentifierResponse> DeleteAsync(string identifierId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteAllowlistIdentifierRequest()
            {
                IdentifierId = identifierId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/allowlist_identifiers/{identifier_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteAllowlistIdentifier", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteAllowlistIdentifierResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/BetaFeatures.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IBetaFeatures
    {

        /// <summary>
        /// Update instance settings
        /// 
        /// <remarks>
        /// Updates the settings of an instance
        /// </remarks>
        /// </summary>
        Task<UpdateInstanceAuthConfigResponse> UpdateInstanceSettingsAsync(UpdateInstanceAuthConfigRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update production instance domain
        /// 
        /// <remarks>
        /// Change the domain of a production instance.<br/>
        /// <br/>
        /// Changing the domain requires updating the <a href="https://clerk.com/docs/deployments/overview#dns-records">DNS records</a> accordingly, deploying new <a href="https://clerk.com/docs/deployments/overview#deploy">SSL certificates</a>, updating your Social Connection&apos;s redirect URLs and setting the new keys in your code.<br/>
        /// <br/>
        /// WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.
        /// </remarks>
        /// </summary>
        Task<UpdateProductionInstanceDomainResponse> UpdateProductionInstanceDomainAsync(UpdateProductionInstanceDomainRequestBody? request = null, RetryConfig? retryConfig = null);
    }

    public class BetaFeatures: IBetaFeatures
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public BetaFeatures(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<UpdateInstanceAuthConfigResponse> UpdateInstanceSettingsAsync(UpdateInstanceAuthConfigRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/beta_features/instance_settings";

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateInstanceAuthConfig", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.InstanceSettings>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new UpdateInstanceAuthConfigResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.InstanceSettings = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<UpdateProductionInstanceDomainResponse> UpdateProductionInstanceDomainAsync(UpdateProductionInstanceDomainRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/beta_features/domain";

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateProductionInstanceDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 202)
            {                
                return new UpdateProductionInstanceDomainResponse()
                {
                    HttpMeta = new Models.Components.HTTPMetadata()
                    {
                        Response = httpResponse,
                        Request = httpRequest
                    }
                };
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/BlocklistIdentifiers.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IBlocklistIdentifiers
    {

        /// <summary>
        /// List all identifiers on the block-list
        /// 
        /// <remarks>
        /// Get a list of all identifiers which are not allowed to access an instance
        /// </remarks>
        /// </summary>
        Task<ListBlocklistIdentifiersResponse> ListAsync(RetryConfig? retryConfig = null);

        /// <summary>
        /// Add identifier to the block-list
        /// 
        /// <remarks>
        /// Create an identifier that is blocked from accessing an instance
        /// </remarks>
        /// </summary>
        Task<CreateBlocklistIdentifierResponse> CreateAsync(CreateBlocklistIdentifierRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete identifier from block-list
        /// 
        /// <remarks>
        /// Delete an identifier from the instance block-list
        /// </remarks>
        /// </summary>
        Task<DeleteBlocklistIdentifierResponse> DeleteAsync(string identifierId, RetryConfig? retryConfig = null);
    }

    public class BlocklistIdentifiers: IBlocklistIdentifiers
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public BlocklistIdentifiers(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListBlocklistIdentifiersResponse> ListAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/blocklist_identifiers";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListBlocklistIdentifiers", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 402 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.BlocklistIdentifiers>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ListBlocklistIdentifiersResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.BlocklistIdentifiers = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 402}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateBlocklistIdentifierResponse> CreateAsync(CreateBlocklistIdentifierRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/blocklist_identifiers";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateBlocklistIdentifier", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<BlocklistIdentifier>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateBlocklistIdentifierResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.BlocklistIdentifier = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteBlocklistIdentifierResponse> DeleteAsync(string identifierId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteBlocklistIdentifierRequest()
            {
                IdentifierId = identifierId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/blocklist_identifiers/{identifier_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteBlocklistIdentifier", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteBlocklistIdentifierResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Clerk.BackendAPI.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <IsPackable>true</IsPackable>
    <PackageId>Clerk.BackendAPI</PackageId>
    <Version>0.6.1</Version>
    <TargetFramework>net8.0</TargetFramework>
    <Authors>Clerk</Authors>
    <Copyright>Copyright (c) Clerk 2025</Copyright>
    <RepositoryUrl>https://github.com/clerk/clerk-sdk-csharp.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>Clerk SDK</PackageTags>
    <PackageProjectUrl>https://clerk.com/docs</PackageProjectUrl>
    <Description>Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.<br/>
<br/>
### Versions<br/>
<br/>
When the API changes in a way that isn&apos;t compatible with older versions, a new version is released.<br/>
Each version is identified by its release date, e.g. `2024-10-01`. For more information, please see <a href="https://clerk.com/docs/versioning/available-versions">Clerk API Versions</a>.<br/>
<br/>
Please see https://clerk.com/docs for more information.</Description>
  </PropertyGroup>

  <PropertyGroup>
    <Nullable>enable</Nullable>
    <NoWarn>1591</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageIcon>icon.png</PackageIcon>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\..\NUGET.md" Pack="true" PackagePath="README.md"/>
    <None Include="..\..\..\LICENSE" Pack="true" PackagePath="\"/>
    <None Include="..\..\..\icon.png" Pack="true" PackagePath="\"/>
    <None Include="..\..\..\docs\**\*" Pack="true" PackagePath="\docs"  CopyToOutputDirectory="PreserveNewest"/>
  </ItemGroup>

  <PropertyGroup>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>portable</DebugType>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedAllSources>true</EmbedAllSources>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="newtonsoft.json" Version="13.0.3" />
    <PackageReference Include="nodatime" Version="3.1.9" />
    <PackageReference Include="Microsoft.AspNetCore" Version="2.3.0" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.2.0" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All"/>
  </ItemGroup>

</Project>

================
File: src/Clerk/BackendAPI/ClerkBackendApi.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ### Versions<br/>
    /// <br/>
    /// When the API changes in a way that isn&apos;t compatible with older versions, a new version is released.<br/>
    /// Each version is identified by its release date, e.g. `2024-10-01`. For more information, please see <a href="https://clerk.com/docs/versioning/available-versions">Clerk API Versions</a>.<br/>
    /// <br/>
    /// Please see https://clerk.com/docs for more information.
    /// </remarks>
    /// 
    /// <see>https://clerk.com/docs}</see>
    /// </summary>
    public interface IClerkBackendApi
    {
        public IMiscellaneous Miscellaneous { get; }
        public IJwks Jwks { get; }
        public IClients Clients { get; }
        public IEmailAddresses EmailAddresses { get; }
        public IPhoneNumbers PhoneNumbers { get; }
        public ISessions Sessions { get; }
        public IEmailSMSTemplates EmailSMSTemplates { get; }
        public IEmailAndSmsTemplates EmailAndSmsTemplates { get; }
        public ITemplates Templates { get; }
        public IUsers Users { get; }
        public IInvitations Invitations { get; }
        public IOrganizationInvitations OrganizationInvitations { get; }
        public IAllowlistIdentifiers AllowlistIdentifiers { get; }
        public IBlocklistIdentifiers BlocklistIdentifiers { get; }
        public IBetaFeatures BetaFeatures { get; }
        public IActorTokens ActorTokens { get; }
        public IDomains Domains { get; }
        public IInstanceSettings InstanceSettings { get; }
        public IWebhooks Webhooks { get; }
        public IJwtTemplates JwtTemplates { get; }
        public IOrganizations Organizations { get; }
        public IOrganizationMemberships OrganizationMemberships { get; }
        public IOrganizationDomains OrganizationDomains { get; }
        public IProxyChecks ProxyChecks { get; }
        public IRedirectUrls RedirectUrls { get; }
        public ISignInTokens SignInTokens { get; }
        public ISignUps SignUps { get; }
        public IOauthApplications OauthApplications { get; }
        public ISamlConnections SamlConnections { get; }
        public ITestingTokens TestingTokens { get; }
        public IWaitlistEntries WaitlistEntries { get; }
    }

    public class SDKConfig
    {
        /// <summary>
        /// List of server URLs available to the SDK.
        /// </summary>
        public static readonly string[] ServerList = {
            "https://api.clerk.com/v1",
        };

        public string ServerUrl = "";
        public int ServerIndex = 0;
        public SDKHooks Hooks = new SDKHooks();
        public RetryConfig? RetryConfig = null;

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.ServerIndex], new Dictionary<string, string>());
        }

        public ISpeakeasyHttpClient InitHooks(ISpeakeasyHttpClient client)
        {
            string preHooksUrl = GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = this.Hooks.SDKInit(preHooksUrl, client);
            if (preHooksUrl != postHooksUrl)
            {
                this.ServerUrl = postHooksUrl;
            }
            return postHooksClient;
        }
    }

    /// <summary>
    /// Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ### Versions<br/>
    /// <br/>
    /// When the API changes in a way that isn&apos;t compatible with older versions, a new version is released.<br/>
    /// Each version is identified by its release date, e.g. `2024-10-01`. For more information, please see <a href="https://clerk.com/docs/versioning/available-versions">Clerk API Versions</a>.<br/>
    /// <br/>
    /// Please see https://clerk.com/docs for more information.
    /// </remarks>
    /// 
    /// <see>https://clerk.com/docs}</see>
    /// </summary>
    public class ClerkBackendApi: IClerkBackendApi
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private int _serverIndex = 0;
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;
        public IMiscellaneous Miscellaneous { get; private set; }
        public IJwks Jwks { get; private set; }
        public IClients Clients { get; private set; }
        public IEmailAddresses EmailAddresses { get; private set; }
        public IPhoneNumbers PhoneNumbers { get; private set; }
        public ISessions Sessions { get; private set; }
        public IEmailSMSTemplates EmailSMSTemplates { get; private set; }
        public IEmailAndSmsTemplates EmailAndSmsTemplates { get; private set; }
        public ITemplates Templates { get; private set; }
        public IUsers Users { get; private set; }
        public IInvitations Invitations { get; private set; }
        public IOrganizationInvitations OrganizationInvitations { get; private set; }
        public IAllowlistIdentifiers AllowlistIdentifiers { get; private set; }
        public IBlocklistIdentifiers BlocklistIdentifiers { get; private set; }
        public IBetaFeatures BetaFeatures { get; private set; }
        public IActorTokens ActorTokens { get; private set; }
        public IDomains Domains { get; private set; }
        public IInstanceSettings InstanceSettings { get; private set; }
        public IWebhooks Webhooks { get; private set; }
        public IJwtTemplates JwtTemplates { get; private set; }
        public IOrganizations Organizations { get; private set; }
        public IOrganizationMemberships OrganizationMemberships { get; private set; }
        public IOrganizationDomains OrganizationDomains { get; private set; }
        public IProxyChecks ProxyChecks { get; private set; }
        public IRedirectUrls RedirectUrls { get; private set; }
        public ISignInTokens SignInTokens { get; private set; }
        public ISignUps SignUps { get; private set; }
        public IOauthApplications OauthApplications { get; private set; }
        public ISamlConnections SamlConnections { get; private set; }
        public ITestingTokens TestingTokens { get; private set; }
        public IWaitlistEntries WaitlistEntries { get; private set; }

        public ClerkBackendApi(string? bearerAuth = null, Func<string>? bearerAuthSource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
                _serverIndex = serverIndex.Value;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _client = client ?? new SpeakeasyHttpClient();

            if(bearerAuthSource != null)
            {
                _securitySource = () => new Clerk.BackendAPI.Models.Components.Security() { BearerAuth = bearerAuthSource() };
            }
            else if(bearerAuth != null)
            {
                _securitySource = () => new Clerk.BackendAPI.Models.Components.Security() { BearerAuth = bearerAuth };
            }

            SDKConfiguration = new SDKConfig()
            {
                ServerIndex = _serverIndex,
                ServerUrl = _serverUrl,
                RetryConfig = retryConfig
            };

            _client = SDKConfiguration.InitHooks(_client);


            Miscellaneous = new Miscellaneous(_client, _securitySource, _serverUrl, SDKConfiguration);


            Jwks = new Jwks(_client, _securitySource, _serverUrl, SDKConfiguration);


            Clients = new Clients(_client, _securitySource, _serverUrl, SDKConfiguration);


            EmailAddresses = new EmailAddresses(_client, _securitySource, _serverUrl, SDKConfiguration);


            PhoneNumbers = new PhoneNumbers(_client, _securitySource, _serverUrl, SDKConfiguration);


            Sessions = new Sessions(_client, _securitySource, _serverUrl, SDKConfiguration);


            EmailSMSTemplates = new EmailSMSTemplates(_client, _securitySource, _serverUrl, SDKConfiguration);


            EmailAndSmsTemplates = new EmailAndSmsTemplates(_client, _securitySource, _serverUrl, SDKConfiguration);


            Templates = new Templates(_client, _securitySource, _serverUrl, SDKConfiguration);


            Users = new Users(_client, _securitySource, _serverUrl, SDKConfiguration);


            Invitations = new Invitations(_client, _securitySource, _serverUrl, SDKConfiguration);


            OrganizationInvitations = new OrganizationInvitations(_client, _securitySource, _serverUrl, SDKConfiguration);


            AllowlistIdentifiers = new AllowlistIdentifiers(_client, _securitySource, _serverUrl, SDKConfiguration);


            BlocklistIdentifiers = new BlocklistIdentifiers(_client, _securitySource, _serverUrl, SDKConfiguration);


            BetaFeatures = new BetaFeatures(_client, _securitySource, _serverUrl, SDKConfiguration);


            ActorTokens = new ActorTokens(_client, _securitySource, _serverUrl, SDKConfiguration);


            Domains = new Domains(_client, _securitySource, _serverUrl, SDKConfiguration);


            InstanceSettings = new InstanceSettings(_client, _securitySource, _serverUrl, SDKConfiguration);


            Webhooks = new Webhooks(_client, _securitySource, _serverUrl, SDKConfiguration);


            JwtTemplates = new JwtTemplates(_client, _securitySource, _serverUrl, SDKConfiguration);


            Organizations = new Organizations(_client, _securitySource, _serverUrl, SDKConfiguration);


            OrganizationMemberships = new OrganizationMemberships(_client, _securitySource, _serverUrl, SDKConfiguration);


            OrganizationDomains = new OrganizationDomains(_client, _securitySource, _serverUrl, SDKConfiguration);


            ProxyChecks = new ProxyChecks(_client, _securitySource, _serverUrl, SDKConfiguration);


            RedirectUrls = new RedirectUrls(_client, _securitySource, _serverUrl, SDKConfiguration);


            SignInTokens = new SignInTokens(_client, _securitySource, _serverUrl, SDKConfiguration);


            SignUps = new SignUps(_client, _securitySource, _serverUrl, SDKConfiguration);


            OauthApplications = new OauthApplications(_client, _securitySource, _serverUrl, SDKConfiguration);


            SamlConnections = new SamlConnections(_client, _securitySource, _serverUrl, SDKConfiguration);


            TestingTokens = new TestingTokens(_client, _securitySource, _serverUrl, SDKConfiguration);


            WaitlistEntries = new WaitlistEntries(_client, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}

================
File: src/Clerk/BackendAPI/Clients.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IClients
    {

        /// <summary>
        /// List all clients
        /// 
        /// <remarks>
        /// Returns a list of all clients. The clients are returned sorted by creation date,<br/>
        /// with the newest clients appearing first.<br/>
        /// Warning: the endpoint is being deprecated and will be removed in future versions.
        /// </remarks>
        /// </summary>
        Task<GetClientListResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Verify a client
        /// 
        /// <remarks>
        /// Verifies the client in the provided token
        /// </remarks>
        /// </summary>
        Task<VerifyClientResponse> VerifyAsync(VerifyClientRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Get a client
        /// 
        /// <remarks>
        /// Returns the details of a client.
        /// </remarks>
        /// </summary>
        Task<GetClientResponse> GetAsync(string clientId, RetryConfig? retryConfig = null);
    }

    public class Clients: IClients
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Clients(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<GetClientListResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new GetClientListRequest()
            {
                Paginated = paginated,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/clients", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetClientList", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 410 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<Client>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new GetClientListResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.ClientList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 410, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<VerifyClientResponse> VerifyAsync(VerifyClientRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/clients/verify";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("VerifyClient", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Client>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new VerifyClientResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Client = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetClientResponse> GetAsync(string clientId, RetryConfig? retryConfig = null)
        {
            var request = new GetClientRequest()
            {
                ClientId = clientId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/clients/{client_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetClient", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Client>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetClientResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Client = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Domains.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IDomains
    {

        /// <summary>
        /// List all instance domains
        /// 
        /// <remarks>
        /// Use this endpoint to get a list of all domains for an instance.<br/>
        /// The response will contain the primary domain for the instance and any satellite domains. Each domain in the response contains information about the URLs where Clerk operates and the required CNAME targets.
        /// </remarks>
        /// </summary>
        Task<ListDomainsResponse> ListAsync(RetryConfig? retryConfig = null);

        /// <summary>
        /// Add a domain
        /// 
        /// <remarks>
        /// Add a new domain for your instance.<br/>
        /// Useful in the case of multi-domain instances, allows adding satellite domains to an instance.<br/>
        /// The new domain must have a `name`. The domain name can contain the port for development instances, like `localhost:3000`.<br/>
        /// At the moment, instances can have only one primary domain, so the `is_satellite` parameter must be set to `true`.<br/>
        /// If you&apos;re planning to configure the new satellite domain to run behind a proxy, pass the `proxy_url` parameter accordingly.
        /// </remarks>
        /// </summary>
        Task<AddDomainResponse> AddAsync(AddDomainRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a satellite domain
        /// 
        /// <remarks>
        /// Deletes a satellite domain for the instance.<br/>
        /// It is currently not possible to delete the instance&apos;s primary domain.
        /// </remarks>
        /// </summary>
        Task<DeleteDomainResponse> DeleteAsync(string domainId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update a domain
        /// 
        /// <remarks>
        /// The `proxy_url` can be updated only for production instances.<br/>
        /// Update one of the instance&apos;s domains. Both primary and satellite domains can be updated.<br/>
        /// If you choose to use Clerk via proxy, use this endpoint to specify the `proxy_url`.<br/>
        /// Whenever you decide you&apos;d rather switch to DNS setup for Clerk, simply set `proxy_url`<br/>
        /// to `null` for the domain. When you update a production instance&apos;s primary domain name,<br/>
        /// you have to make sure that you&apos;ve completed all the necessary setup steps for DNS and<br/>
        /// emails to work. Expect downtime otherwise. Updating a primary domain&apos;s name will also<br/>
        /// update the instance&apos;s home origin, affecting the default application paths.
        /// </remarks>
        /// </summary>
        Task<UpdateDomainResponse> UpdateAsync(string domainId, UpdateDomainRequestBody requestBody, RetryConfig? retryConfig = null);
    }

    public class Domains: IDomains
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Domains(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListDomainsResponse> ListAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/domains";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListDomains", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.Domains>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ListDomainsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Domains = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<AddDomainResponse> AddAsync(AddDomainRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/domains";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("AddDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Domain>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new AddDomainResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Domain = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteDomainResponse> DeleteAsync(string domainId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteDomainRequest()
            {
                DomainId = domainId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/domains/{domain_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteDomainResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateDomainResponse> UpdateAsync(string domainId, UpdateDomainRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateDomainRequest()
            {
                DomainId = domainId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/domains/{domain_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Domain>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateDomainResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Domain = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/EmailAddresses.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IEmailAddresses
    {

        /// <summary>
        /// Create an email address
        /// 
        /// <remarks>
        /// Create a new email address
        /// </remarks>
        /// </summary>
        Task<CreateEmailAddressResponse> CreateAsync(CreateEmailAddressRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve an email address
        /// 
        /// <remarks>
        /// Returns the details of an email address.
        /// </remarks>
        /// </summary>
        Task<GetEmailAddressResponse> GetAsync(string emailAddressId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete an email address
        /// 
        /// <remarks>
        /// Delete the email address with the given ID
        /// </remarks>
        /// </summary>
        Task<DeleteEmailAddressResponse> DeleteAsync(string emailAddressId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update an email address
        /// 
        /// <remarks>
        /// Updates an email address.
        /// </remarks>
        /// </summary>
        Task<UpdateEmailAddressResponse> UpdateAsync(string emailAddressId, UpdateEmailAddressRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class EmailAddresses: IEmailAddresses
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public EmailAddresses(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateEmailAddressResponse> CreateAsync(CreateEmailAddressRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/email_addresses";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateEmailAddress", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<EmailAddress>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateEmailAddressResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.EmailAddress = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetEmailAddressResponse> GetAsync(string emailAddressId, RetryConfig? retryConfig = null)
        {
            var request = new GetEmailAddressRequest()
            {
                EmailAddressId = emailAddressId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/email_addresses/{email_address_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetEmailAddress", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<EmailAddress>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetEmailAddressResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.EmailAddress = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteEmailAddressResponse> DeleteAsync(string emailAddressId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteEmailAddressRequest()
            {
                EmailAddressId = emailAddressId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/email_addresses/{email_address_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteEmailAddress", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteEmailAddressResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateEmailAddressResponse> UpdateAsync(string emailAddressId, UpdateEmailAddressRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpdateEmailAddressRequest()
            {
                EmailAddressId = emailAddressId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/email_addresses/{email_address_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateEmailAddress", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<EmailAddress>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateEmailAddressResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.EmailAddress = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/EmailAndSmsTemplates.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IEmailAndSmsTemplates
    {

        /// <summary>
        /// Update a template for a given type and slug
        /// 
        /// <remarks>
        /// Updates the existing template of the given type and slug
        /// </remarks>
        /// </summary>
        Task<UpsertTemplateResponse> UpsertAsync(UpsertTemplatePathParamTemplateType templateType, string slug, UpsertTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class EmailAndSmsTemplates: IEmailAndSmsTemplates
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public EmailAndSmsTemplates(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<UpsertTemplateResponse> UpsertAsync(UpsertTemplatePathParamTemplateType templateType, string slug, UpsertTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpsertTemplateRequest()
            {
                TemplateType = templateType,
                Slug = slug,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/templates/{template_type}/{slug}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpsertTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 402 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Template>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpsertTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Template = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 402, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/EmailSMSTemplates.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IEmailSMSTemplates
    {

        /// <summary>
        /// List all templates
        /// 
        /// <remarks>
        /// Returns a list of all templates.<br/>
        /// The templates are returned sorted by position.
        /// </remarks>
        /// </summary>
        Task<GetTemplateListResponse> ListAsync(TemplateType templateType, bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a template
        /// 
        /// <remarks>
        /// Returns the details of a template
        /// </remarks>
        /// </summary>
        Task<GetTemplateResponse> GetAsync(PathParamTemplateType templateType, string slug, RetryConfig? retryConfig = null);

        /// <summary>
        /// Revert a template
        /// 
        /// <remarks>
        /// Reverts an updated template to its default state
        /// </remarks>
        /// </summary>
        Task<RevertTemplateResponse> RevertAsync(RevertTemplatePathParamTemplateType templateType, string slug, RetryConfig? retryConfig = null);

        /// <summary>
        /// Toggle the delivery by Clerk for a template of a given type and slug
        /// 
        /// <remarks>
        /// Toggles the delivery by Clerk for a template of a given type and slug.<br/>
        /// If disabled, Clerk will not deliver the resulting email or SMS.<br/>
        /// The app developer will need to listen to the `email.created` or `sms.created` webhooks in order to handle delivery themselves.
        /// </remarks>
        /// </summary>
        Task<ToggleTemplateDeliveryResponse> ToggleTemplateDeliveryAsync(ToggleTemplateDeliveryPathParamTemplateType templateType, string slug, ToggleTemplateDeliveryRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class EmailSMSTemplates: IEmailSMSTemplates
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public EmailSMSTemplates(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<GetTemplateListResponse> ListAsync(TemplateType templateType, bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new GetTemplateListRequest()
            {
                TemplateType = templateType,
                Paginated = paginated,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/templates/{template_type}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetTemplateList", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<Template>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetTemplateListResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.TemplateList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<GetTemplateResponse> GetAsync(PathParamTemplateType templateType, string slug, RetryConfig? retryConfig = null)
        {
            var request = new GetTemplateRequest()
            {
                TemplateType = templateType,
                Slug = slug,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/templates/{template_type}/{slug}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Template>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Template = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<RevertTemplateResponse> RevertAsync(RevertTemplatePathParamTemplateType templateType, string slug, RetryConfig? retryConfig = null)
        {
            var request = new RevertTemplateRequest()
            {
                TemplateType = templateType,
                Slug = slug,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/templates/{template_type}/{slug}/revert", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RevertTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 402 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Template>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RevertTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Template = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 402, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<ToggleTemplateDeliveryResponse> ToggleTemplateDeliveryAsync(ToggleTemplateDeliveryPathParamTemplateType templateType, string slug, ToggleTemplateDeliveryRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new ToggleTemplateDeliveryRequest()
            {
                TemplateType = templateType,
                Slug = slug,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/templates/{template_type}/{slug}/toggle_delivery", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ToggleTemplateDelivery", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Template>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ToggleTemplateDeliveryResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Template = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Helpers/AuthenticateRequest.cs
================
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Primitives;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;



namespace Clerk.BackendAPI.Helpers.Jwks;

/// <summary>
///     AuthenticateRequest - Helper methods to authenticate requests.
/// </summary>
public static class AuthenticateRequest
{
    private const string SESSION_COOKIE_PREFIX = "__session";

    /// <summary>
    ///     Checks if the HTTP request is authenticated.
    ///     First the session token is retrieved from either the __session cookie
    ///     or the HTTP Authorization header.
    ///     Then the session token is verified: networklessly if the options.jwtKey
    ///     is provided, otherwise by fetching the JWKS from Clerk's Backend API.
    /// </summary>
    /// <param name="request">The HTTP request</param>
    /// <param name="options">The request authentication options</param>
    /// <returns>The request state</returns>
    /// <remarks>WARNING: AuthenticateRequestAsync is applicable in the context of Backend APIs only.</remarks>
    public static async Task<RequestState> AuthenticateRequestAsync(
        HttpRequest request,
        AuthenticateRequestOptions options)
    {
        var sessionToken = GetSessionToken(request);
        if (sessionToken == null) return RequestState.SignedOut(AuthErrorReason.SESSION_TOKEN_MISSING);

        VerifyTokenOptions verifyTokenOptions;

        if (options.JwtKey != null)
            verifyTokenOptions = new VerifyTokenOptions(
                jwtKey: options.JwtKey,
                audiences: options.Audiences,
                authorizedParties: options.AuthorizedParties,
                clockSkewInMs: options.ClockSkewInMs
            );
        else if (options.SecretKey != null)
            verifyTokenOptions = new VerifyTokenOptions(
                options.SecretKey,
                audiences: options.Audiences,
                authorizedParties: options.AuthorizedParties,
                clockSkewInMs: options.ClockSkewInMs
            );
        else
            return RequestState.SignedOut(AuthErrorReason.SECRET_KEY_MISSING);

        try
        {
            var claims = await VerifyToken.VerifyTokenAsync(sessionToken, verifyTokenOptions);
            return RequestState.SignedIn(sessionToken, claims);
        }
        catch (TokenVerificationException e)
        {
            return RequestState.SignedOut(e.Reason);
        }
    }

    /// <summary>
    ///     Retrieve token from __session cookie or Authorization header.
    /// </summary>
    /// <param name="request">The HTTP request</param>
    /// <returns>The session token, if present</returns>
    private static string? GetSessionToken(HttpRequest request)
    {
        var authorizationHeaders = request.Headers.GetCommaSeparatedValues("Authorization");
        if (authorizationHeaders != StringValues.Empty)
        {
            var bearerToken = authorizationHeaders.FirstOrDefault();
            if (!string.IsNullOrEmpty(bearerToken)) return bearerToken.Replace("Bearer ", "");
        }
        var cookieHeaders = request.Headers.GetCommaSeparatedValues("Cookie");
        if (cookieHeaders != StringValues.Empty)
        {
            var cookieHeaderValue = cookieHeaders.FirstOrDefault();
            if (!string.IsNullOrEmpty(cookieHeaderValue))
            {
                var cookies = cookieHeaderValue.Split(';')
                    .Select(cookie => cookie.Trim())
                    .Select(cookie => new Cookie(cookie.Split('=')[0], cookie.Split('=')[1]));

                foreach (var cookie in cookies)
                    if (cookie.Name.StartsWith(SESSION_COOKIE_PREFIX))
                        return cookie.Value;
            }
        }

        return null;
    }
}

================
File: src/Clerk/BackendAPI/Helpers/AuthenticateRequestException.cs
================
using System;

namespace Clerk.BackendAPI.Helpers.Jwks;

public static class AuthErrorReason
{
    public static readonly ErrorReason
        SESSION_TOKEN_MISSING = new(
            "session-token-missing",
            "Could not retrieve session token. Please make sure that the __session cookie or the HTTP authorization header contain a Clerk-generated session JWT"
        ),
        SECRET_KEY_MISSING = new(
            "secret-key-missing",
            "Missing Clerk Secret Key. Go to https://dashboard.clerk.com and get your key for your instance."
        );
}

public class AuthenticateRequestException : Exception
{
    public readonly ErrorReason Reason;

    public AuthenticateRequestException(ErrorReason reason) : base(reason.Message)
    {
        Reason = reason;
    }

    public AuthenticateRequestException(ErrorReason reason, Exception cause) : base(reason.Message, cause)
    {
        Reason = reason;
    }

    public override string ToString()
    {
        return Reason.Message;
    }
}

================
File: src/Clerk/BackendAPI/Helpers/AuthenticateRequestOptions.cs
================
using System.Collections.Generic;

namespace Clerk.BackendAPI.Helpers.Jwks;

public sealed class AuthenticateRequestOptions
{
    private static readonly long DEFAULT_CLOCK_SKEW_MS = 5000L;
    public readonly IEnumerable<string>? Audiences;
    public readonly IEnumerable<string> AuthorizedParties;
    public readonly long ClockSkewInMs;
    public readonly string? JwtKey;

    public readonly string? SecretKey;

    /// <summary>
    ///     Options to configure AuthenticateRequestAsync.
    /// </summary>
    /// <param name="secretKey">The Clerk secret key from the API Keys page in the Clerk Dashboard. (Optional)</param>
    /// <param name="jwtKey">PEM Public String used to verify the session token in a networkless manner. (Optional)</param>
    /// <param name="audiences">A list of audiences to verify against.</param>
    /// <param name="authorizedParties">An allowlist of origins to verify against.</param>
    /// <param name="clockSkewInMs">
    ///     Allowed time difference (in milliseconds) between the Clerk server (which generates the
    ///     token) and the clock of the user's application server when validating a token. Defaults to 5000 ms.
    /// </param>
    public AuthenticateRequestOptions(
        string? secretKey = null,
        string? jwtKey = null,
        IEnumerable<string>? audiences = null,
        IEnumerable<string>? authorizedParties = null,
        long? clockSkewInMs = null)
    {
        if (string.IsNullOrEmpty(secretKey) && string.IsNullOrEmpty(jwtKey))
            throw new AuthenticateRequestException(AuthErrorReason.SECRET_KEY_MISSING);

        SecretKey = secretKey;
        JwtKey = jwtKey;
        Audiences = audiences;
        AuthorizedParties = authorizedParties ?? new List<string>();
        ClockSkewInMs = clockSkewInMs ?? DEFAULT_CLOCK_SKEW_MS;
    }
}

================
File: src/Clerk/BackendAPI/Helpers/ErrorReason.cs
================
namespace Clerk.BackendAPI.Helpers.Jwks;

/// <summary>
///     Represents the reason for a TokenVerificationException or AuthenticateRequestException.
/// </summary>
public class ErrorReason
{
    public readonly string Id;
    public readonly string Message;

    public ErrorReason(string id, string message)
    {
        Id = id;
        Message = message;
    }
}

================
File: src/Clerk/BackendAPI/Helpers/RequestState.cs
================
using System.Security.Claims;

namespace Clerk.BackendAPI.Helpers.Jwks;

/// <summary>
///     AuthStatus - The request authentication status.
/// </summary>
public class AuthStatus
{
    public static readonly AuthStatus SignedIn = new("signed-in");
    public static readonly AuthStatus SignedOut = new("signed-out");

    private readonly string value;

    private AuthStatus(string value)
    {
        this.value = value;
    }

    public string Value()
    {
        return value;
    }
}

/// <summary>
///     RequestState - Authentication State of the request.
/// </summary>
public class RequestState
{
    public readonly ClaimsPrincipal? Claims;
    public readonly ErrorReason? ErrorReason;
    public readonly AuthStatus Status;
    public readonly string? Token;


    public RequestState(AuthStatus status,
        ErrorReason? errorReason,
        string? token,
        ClaimsPrincipal? claims)
    {
        Status = status;
        ErrorReason = errorReason;
        Token = token;
        Claims = claims;
    }

    public static RequestState SignedIn(string token, ClaimsPrincipal claims)
    {
        return new RequestState(AuthStatus.SignedIn, null, token, claims);
    }

    public static RequestState SignedOut(ErrorReason errorReason)
    {
        return new RequestState(AuthStatus.SignedOut, errorReason, null, null);
    }

    public bool IsSignedIn()
    {
        return Status == AuthStatus.SignedIn;
    }

    public bool IsSignedOut()
    {
        return Status == AuthStatus.SignedOut;
    }
}

================
File: src/Clerk/BackendAPI/Helpers/TokenVerificationException.cs
================
using System;

namespace Clerk.BackendAPI.Helpers.Jwks;

public class TokenVerificationException : Exception
{
    public readonly ErrorReason Reason;

    public TokenVerificationException(ErrorReason reason) : base(reason.Message)
    {
        Reason = reason;
    }

    public TokenVerificationException(ErrorReason reason, Exception cause) : base(reason.Message, cause)
    {
        Reason = reason;
    }

    public override string ToString()
    {
        return Reason.Message;
    }
}

public static class TokenVerificationErrorReason
{
    public static readonly ErrorReason
        JWK_FAILED_TO_LOAD = new(
            "jwk-failed-to-load",
            "Failed to load JWKS from Clerk Backend API. Contact support@clerk.com."
        ),
        JWK_REMOTE_INVALID = new(
            "jwk-remote-invalid",
            "The JWKS endpoint did not contain any signing keys. Contact support@clerk.com."
        ),
        JWK_LOCAL_INVALID = new(
            "jwk-local-invalid",
            "The provided PEM Public Key is not in the proper format."
        ),
        JWK_FAILED_TO_RESOLVE = new(
            "jwk-failed-to-resolve",
            "Failed to resolve JWK. Public Key is not in the proper format."
        ),
        JWK_KID_MISMATCH = new(
            "jwk-kid-mismatch",
            "Unable to find a signing key in JWKS that matches the kid of the provided session token."
        ),
        TOKEN_EXPIRED = new(
            "token-expired",
            "Token has expired and is no longer valid."
        ),
        TOKEN_INVALID = new(
            "token-invalid",
            "Token is invalid and could not be verified."
        ),
        TOKEN_INVALID_AUTHORIZED_PARTIES = new(
            "token-invalid-authorized-parties",
            "Authorized party claim (azp) does not match any of the authorized parties."
        ),
        TOKEN_INVALID_AUDIENCE = new(
            "token-invalid-audience",
            "Token audience claim (aud) does not match one of the expected audience values."
        ),
        TOKEN_IAT_IN_THE_FUTURE = new(
            "token-iat-in-the-future",
            "Token Issued At claim (iat) represents a time in the future."
        ),
        TOKEN_NOT_ACTIVE_YET = new(
            "token-not-active-yet",
            "Token is not yet valid. Not Before claim (nbf) is in the future."
        ),
        TOKEN_INVALID_SIGNATURE = new(
            "token-invalid-signature",
            "Token signature is invalid and could not be verified."
        ),
        SECRET_KEY_MISSING = new(
            "secret-key-missing",
            "Missing Clerk Secret Key. Go to https://dashboard.clerk.com and get your key for your instance."
        );
}

================
File: src/Clerk/BackendAPI/Helpers/VerifyToken.cs
================
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Clerk.BackendAPI.Models.Components;
using Clerk.BackendAPI.Utils;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;

using WellKnownJWKS = Clerk.BackendAPI.Models.Components.Jwks;

namespace Clerk.BackendAPI.Helpers.Jwks;

public static class VerifyToken
{
    public static async Task<ClaimsPrincipal> VerifyTokenAsync(string token, VerifyTokenOptions options)
    {
        RsaSecurityKey rsaKey;
        if (options.JwtKey != null)
            rsaKey = GetLocalJwtKey(options.JwtKey);
        else
            rsaKey = await GetRemoteJwtKeyAsync(token, options);

        var tokenHandler = new JwtSecurityTokenHandler();

        var validationParameters = new TokenValidationParameters
        {
            ValidateIssuer = false,
            ValidateAudience = options.Audiences != null,
            ValidAudiences = options.Audiences,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = rsaKey,
            ClockSkew = TimeSpan.FromMilliseconds(options.ClockSkewInMs)
        };

        ClaimsPrincipal claims;
        try
        {
            claims = tokenHandler.ValidateToken(token, validationParameters, out var validatedToken);
        }
        catch (SecurityTokenExpiredException ex)
        {
            throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_EXPIRED, ex);
        }
        catch (SecurityTokenNotYetValidException ex)
        {
            throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_NOT_ACTIVE_YET, ex);
        }
        catch (SecurityTokenInvalidSignatureException ex)
        {
            throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_INVALID_SIGNATURE, ex);
        }
        catch (SecurityTokenInvalidAudienceException ex)
        {
            throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_INVALID_AUDIENCE, ex);
        }
        catch (Exception ex)
        {
            throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_INVALID, ex);
        }

        if (options.AuthorizedParties != null)
        {
            var azpClaim = claims.FindFirst("azp");
            if (azpClaim != null && !options.AuthorizedParties.Contains(azpClaim.Value))
                throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_INVALID_AUTHORIZED_PARTIES);
        }

        var iatClaim = claims.FindFirst("iat");
        if (iatClaim != null && long.Parse(iatClaim.Value) >
            DateTimeOffset.UtcNow.ToUnixTimeSeconds() + options.ClockSkewInMs / 1000)
            throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_IAT_IN_THE_FUTURE);


        return claims;
    }

    /// <summary>
    ///     Converts a RSA PEM formatted public key to a RsaSecurityKey object
    ///     that can be used for networkless verification.
    /// </summary>
    /// <param name="jwtKey">The PEM formatted public key.</param>
    /// <returns>The RSA public key</returns>
    /// <exception cref="TokenVerificationException">if the public key could not be resolved.</exception>
    private static RsaSecurityKey GetLocalJwtKey(string jwtKey)
    {
        try
        {
            var rsa = RSA.Create();
            rsa.ImportFromPem(jwtKey.ToCharArray());
            return new RsaSecurityKey(rsa);
        }
        catch (Exception ex)
        {
            throw new TokenVerificationException(TokenVerificationErrorReason.JWK_LOCAL_INVALID, ex);
        }
    }

    /// <summary>
    ///     Retrieves the RSA public key used to sign the token from Clerk's Backend API.
    /// </summary>
    /// <param name="token">The token to parse.</param>
    /// <param name="options">The options used for token verification.</param>
    /// <returns>The RSA public key.</returns>
    /// <exception cref="TokenVerificationException">if the public key could not be resolved.</exception>
    private static async Task<RsaSecurityKey> GetRemoteJwtKeyAsync(string token, VerifyTokenOptions options)
    {
        var kid = ParseKid(token);

        var jwks = await FetchJwksAsync(options);
        if (jwks.Keys == null) throw new TokenVerificationException(TokenVerificationErrorReason.JWK_REMOTE_INVALID);

        foreach (var key in jwks.Keys)
            if (key.Kid == kid)
            {
                if ((key.N == null) | (key.E == null))
                    throw new TokenVerificationException(TokenVerificationErrorReason.JWK_REMOTE_INVALID);
                try
                {
                    var rsaParameters = new RSAParameters
                    {
                        Modulus = Base64UrlDecode(key.N!),
                        Exponent = Base64UrlDecode(key.E!)
                    };
                    var rsa = RSA.Create();
                    rsa.ImportParameters(rsaParameters);

                    return new RsaSecurityKey(rsa);
                }
                catch (Exception ex)
                {
                    throw new TokenVerificationException(TokenVerificationErrorReason.JWK_FAILED_TO_RESOLVE, ex);
                }
            }

        throw new TokenVerificationException(TokenVerificationErrorReason.JWK_KID_MISMATCH);
    }


    /// <summary>
    ///     Decodes a base64url encoded string.
    /// </summary>
    /// <param name="input">The base64url encoded string.</param>
    /// <returns>The decoded byte array.</returns>
    private static byte[] Base64UrlDecode(string input)
    {
        var base64 = input.Replace('-', '+').Replace('_', '/');
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }

        return Convert.FromBase64String(base64);
    }

    /// <summary>
    ///     Retrieves the key identifier (kid) from the token header.
    /// </summary>
    /// <param name="token">The token to parse.</param>
    /// <returns>The key identifier (kid).</returns>
    /// <exception cref="TokenVerificationException">if the kid cannot be parsed.</exception>
    private static string ParseKid(string token)
    {
        var handler = new JwtSecurityTokenHandler();

        if (handler.CanReadToken(token))
            try
            {
                var jwtToken = handler.ReadJwtToken(token);

                if (jwtToken.Header.TryGetValue("kid", out var kid))
                    if (kid != null)
                        return (string)kid;
            }
            catch (Exception ex)
            {
                throw new TokenVerificationException(TokenVerificationErrorReason.TOKEN_INVALID, ex);
            }

        throw new TokenVerificationException(TokenVerificationErrorReason.JWK_KID_MISMATCH);
    }

    /// <summary>
    ///     Fetches the JSON Web Key Set (JWKS) from Clerk's Backend API.
    /// </summary>
    /// <param name="options">The options used for token verification.</param>
    /// <returns>The JWKS keys array as a JSON node.</returns>
    /// <exception cref="TokenVerificationException">if the JWKS cannot be fetched.</exception>
    private static async Task<WellKnownJWKS> FetchJwksAsync(VerifyTokenOptions options)
    {
        if (options.SecretKey == null)
            throw new TokenVerificationException(TokenVerificationErrorReason.SECRET_KEY_MISSING);

        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", options.SecretKey);
            var jwksUrl = $"{options.ApiUrl}/{options.ApiVersion}/jwks";


            var httpResponse = await client.GetAsync(jwksUrl);
            if (!httpResponse.IsSuccessStatusCode)
                throw new TokenVerificationException(TokenVerificationErrorReason.JWK_FAILED_TO_LOAD);

            var responseBody = await httpResponse.Content.ReadAsStringAsync();

            WellKnownJWKS? wellKnownJWKS;
            try
            {
                wellKnownJWKS = ResponseBodyDeserializer.Deserialize<WellKnownJWKS>(responseBody);
            }
            catch (JsonReaderException ex)
            {
                throw new TokenVerificationException(TokenVerificationErrorReason.JWK_FAILED_TO_LOAD, ex);
            }

            if (wellKnownJWKS == null)
                throw new TokenVerificationException(TokenVerificationErrorReason.JWK_REMOTE_INVALID);

            return wellKnownJWKS!;
        }
    }
}

================
File: src/Clerk/BackendAPI/Helpers/VerifyTokenOptions.cs
================
using System.Collections.Generic;

namespace Clerk.BackendAPI.Helpers.Jwks;

public sealed class VerifyTokenOptions
{
    private static readonly long DEFAULT_CLOCK_SKEW_MS = 5000L;
    private static readonly string DEFAULT_API_URL = "https://api.clerk.com";
    private static readonly string DEFAULT_API_VERSION = "v1";
    public readonly string ApiUrl;
    public readonly string ApiVersion;
    public readonly IEnumerable<string>? Audiences;
    public readonly IEnumerable<string>? AuthorizedParties;
    public readonly long ClockSkewInMs;
    public readonly string? JwtKey;

    public readonly string? SecretKey;

    /// <summary>
    ///     Options to configure VerifyTokenAsync.
    /// </summary>
    /// <param name="secretKey">The Clerk secret key from the API Keys page in the Clerk Dashboard. (Optional)</param>
    /// <param name="jwtKey">PEM Public String used to verify the session token in a networkless manner. (Optional)</param>
    /// <param name="audiences">A list of audiences to verify against.</param>
    /// <param name="authorizedParties">An allowlist of origins to verify against.</param>
    /// <param name="clockSkewInMs">
    ///     Allowed time difference (in milliseconds) between the Clerk server (which generates the
    ///     token) and the clock of the user's application server when validating a token. Defaults to 5000 ms.
    /// </param>
    /// <param name="apiUrl">The Clerk Backend API endpoint. Defaults to 'https://api.clerk.com'</param>
    /// <param name="apiVersion">The version passed to the Clerk API. Defaults to 'v1'</param>
    public VerifyTokenOptions(
        string? secretKey = null,
        string? jwtKey = null,
        IEnumerable<string>? audiences = null,
        IEnumerable<string>? authorizedParties = null,
        long? clockSkewInMs = null,
        string? apiUrl = null,
        string? apiVersion = null)
    {
        if (string.IsNullOrEmpty(secretKey) && string.IsNullOrEmpty(jwtKey))
            throw new TokenVerificationException(TokenVerificationErrorReason.SECRET_KEY_MISSING);

        SecretKey = secretKey;
        JwtKey = jwtKey;
        Audiences = audiences;
        AuthorizedParties = authorizedParties;
        ClockSkewInMs = clockSkewInMs ?? DEFAULT_CLOCK_SKEW_MS;
        ApiUrl = apiUrl ?? DEFAULT_API_URL;
        ApiVersion = apiVersion ?? DEFAULT_API_VERSION;
    }
}

================
File: src/Clerk/BackendAPI/Hooks/ClerkBeforeRequestHook.cs
================
namespace Clerk.BackendAPI.Hooks
{
    using System.Net.Http;
    using System.Threading.Tasks;

    public class ClerkBeforeRequestHook : IBeforeRequestHook
    {
        public async Task<HttpRequestMessage> BeforeRequestAsync(BeforeRequestContext hookCtx, HttpRequestMessage request)
        {
            request.Headers.Add("Clerk-API-Version", "2024-10-01");
            return request;
        }
    }
}

================
File: src/Clerk/BackendAPI/Hooks/HookRegistration.cs
================
namespace Clerk.BackendAPI.Hooks
{
    /// <summary>
    /// Hook Registration File.
    /// </summary>
    /// <remarks>
    /// This file is only ever generated once on the first generation and then is free to be modified.
    /// Any hooks you wish to add should be registered in the InitHooks function. Feel free to define them
    /// in this file or in separate files in the Hooks folder.
    /// </remarks>
    public static class HookRegistration
    {
        /// <summary>
        /// Initializes hooks.
        /// </summary>
        /// <remarks>
        /// Add hooks by calling `Clerk.BackendAPI.Hooks.Register&lt;HookInterface&gt;(myHook);`
        /// where `I&lt;HookInterface&gt;` is one of the following interfaces defined in HookTypes.cs:
        ///   - ISDKInitHook
        ///   - IBeforeRequestHook
        ///   - IAfterSuccess
        ///   - IAfterError
        /// and `myHook` an instance that implements that specific interface.
        /// </remarks>
        public static void InitHooks(IHooks hooks)
        {
            var clerkBeforeRequestHook = new ClerkBeforeRequestHook();
            hooks.RegisterBeforeRequestHook(clerkBeforeRequestHook);

            // hooks.RegisterSDKInitHook(myHook);
            // hooks.RegisterBeforeRequestHook(myHook);
            // hooks.RegisterAfterSuccessHook(myHook);
            // hooks.RegisterAfterErrorHook(myHook;
        }
    }
}

================
File: src/Clerk/BackendAPI/Hooks/HookTypes.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Hooks
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using Clerk.BackendAPI.Utils;

    public class HookContext
    {
        public string OperationID { get; set; }
        public List<string>? Oauth2Scopes { get; set; }
        public Func<object>? SecuritySource { get; set; }

        public HookContext(string operationID, List<string>? oauth2Scopes, Func<object>? securitySource)
        {
            OperationID = operationID;
            Oauth2Scopes = oauth2Scopes;
            SecuritySource = securitySource;
        }
    }

    public class BeforeRequestContext : HookContext
    {
        public BeforeRequestContext(HookContext hookCtx)
            : base(hookCtx.OperationID, hookCtx.Oauth2Scopes, hookCtx.SecuritySource) { }
    }

    public class AfterSuccessContext : HookContext
    {
        public AfterSuccessContext(HookContext hookCtx)
            : base(hookCtx.OperationID, hookCtx.Oauth2Scopes, hookCtx.SecuritySource) { }
    }

    public class AfterErrorContext : HookContext
    {
        public AfterErrorContext(HookContext hookCtx)
            : base(hookCtx.OperationID, hookCtx.Oauth2Scopes, hookCtx.SecuritySource) { }
    }

    /// <summary>
    /// SDKInit hook is called when the SDK is initializing.
    /// The hook can modify and return a new baseUrl and HTTP client to be used by the SDK.
    /// </summary>
    public interface ISDKInitHook
    {
        (string, ISpeakeasyHttpClient) SDKInit(string baseUrl, ISpeakeasyHttpClient client);
    }

    /// <summary>
    /// BeforeRequestAsync hook is called before the SDK sends a request.
    /// The hook can modify the request before it is sent or throw an exception to stop the request from being sent.
    /// </summary>
    public interface IBeforeRequestHook
    {
        Task<HttpRequestMessage> BeforeRequestAsync(BeforeRequestContext hookCtx, HttpRequestMessage request);
    }

    /// <summary>
    /// AfterSuccessAsync is called after the SDK receives a response.
    /// The hook can modify the response before it is handled or throw an exception to stop the response from being handled.
    /// </summary>
    public interface IAfterSuccessHook
    {
        Task<HttpResponseMessage> AfterSuccessAsync(AfterSuccessContext hookCtx, HttpResponseMessage response);
    }

    /// <summary>
    /// AfterErrorAsync is called after the SDK encounters an error, or a non-successful response.
    /// The hook can modify the response, if available, otherwise modify the error.
    /// All hooks are called sequentially. If an error is returned, it will be passed to the subsequent hook implementing IAfterErrorHook.
    /// If you want to prevent other AfterError hooks from being run, you can throw an FailEarlyException instead.
    /// </summary>
    public interface IAfterErrorHook
    {
        Task<(HttpResponseMessage?, Exception?)> AfterErrorAsync(AfterErrorContext hookCtx, HttpResponseMessage? response, Exception? error);
    }

    public interface IHooks
    {
       void RegisterSDKInitHook(ISDKInitHook hook);

       void RegisterBeforeRequestHook(IBeforeRequestHook hook);

       void RegisterAfterSuccessHook(IAfterSuccessHook hook);

       void RegisterAfterErrorHook(IAfterErrorHook hook);
    }
}

================
File: src/Clerk/BackendAPI/Hooks/SDKHooks.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Hooks
{
    using Clerk.BackendAPI.Utils;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    public sealed class FailEarlyException : Exception {}

    public class SDKHooks: IHooks
    {
        public List<ISDKInitHook> sdkInitHooks;
        public List<IBeforeRequestHook> beforeRequestHooks;
        public List<IAfterSuccessHook> afterSuccessHooks;
        public List<IAfterErrorHook> afterErrorHooks;

        public SDKHooks()
        {
            this.sdkInitHooks = new List<ISDKInitHook>();
            this.beforeRequestHooks = new List<IBeforeRequestHook>();
            this.afterSuccessHooks = new List<IAfterSuccessHook>();
            this.afterErrorHooks = new List<IAfterErrorHook>();
            HookRegistration.InitHooks(this);
        }

        public void RegisterSDKInitHook(ISDKInitHook hook)
        {
            this.sdkInitHooks.Add(hook);
        }

        public void RegisterBeforeRequestHook(IBeforeRequestHook hook)
        {
            this.beforeRequestHooks.Add(hook);
        }

        public void RegisterAfterSuccessHook(IAfterSuccessHook hook)
        {
            this.afterSuccessHooks.Add(hook);
        }

        public void RegisterAfterErrorHook(IAfterErrorHook hook)
        {
            this.afterErrorHooks.Add(hook);
        }

        public (string, ISpeakeasyHttpClient) SDKInit(string baseUrl, ISpeakeasyHttpClient client)
        {
            var urlAndClient = (baseUrl, client);
            foreach (var hook in this.sdkInitHooks)
            {
                try
                {
                    urlAndClient = hook.SDKInit(urlAndClient.Item1, urlAndClient.Item2);
                } catch (Exception ex)
                {
                    throw new Exception("An error occurred while calling SDKInit hook.", ex);
                }
            }
            return urlAndClient;
        }

        public async Task<HttpRequestMessage> BeforeRequestAsync(BeforeRequestContext hookCtx, HttpRequestMessage request)
        {
            foreach (var hook in this.beforeRequestHooks)
            {
                try
                {
                    request = await hook.BeforeRequestAsync(hookCtx, request);
                } catch (Exception ex)
                {
                    throw new Exception("An error occurred while calling BeforeRequestAsync hook", ex);
                }
            }
            return request;
        }

        public async Task<HttpResponseMessage> AfterSuccessAsync(AfterSuccessContext hookCtx, HttpResponseMessage response)
        {
            foreach (var hook in this.afterSuccessHooks)
            {
                try
                {
                    response = await hook.AfterSuccessAsync(hookCtx, response);
                }
                catch (Exception ex)
                {
                    throw new Exception("An error occurred while calling AfterSuccessAsync hook.", ex);
                }
            }
            return response;
        }

        public async Task<HttpResponseMessage?> AfterErrorAsync(AfterErrorContext hookCtx, HttpResponseMessage? response, Exception? error)
        {

            (HttpResponseMessage?, Exception?) responseAndError = (response, error);
            foreach (var hook in this.afterErrorHooks)
            {
                try
                {
                    responseAndError = await hook.AfterErrorAsync(hookCtx, responseAndError.Item1, responseAndError.Item2);
                } catch (FailEarlyException)
                {
                    throw;
                } catch (Exception ex)
                {
                    throw new Exception("An error occurred while calling AfterErrorAsync hook", ex);
                }
            }

            if (responseAndError.Item2 != null)
            {
                throw responseAndError.Item2;
            }

            return responseAndError.Item1;
        }
    }
}

================
File: src/Clerk/BackendAPI/InstanceSettings.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IInstanceSettings
    {

        /// <summary>
        /// Fetch the current instance
        /// 
        /// <remarks>
        /// Fetches the current instance
        /// </remarks>
        /// </summary>
        Task<GetInstanceResponse> GetAsync(RetryConfig? retryConfig = null);

        /// <summary>
        /// Update instance settings
        /// 
        /// <remarks>
        /// Updates the settings of an instance
        /// </remarks>
        /// </summary>
        Task<UpdateInstanceResponse> UpdateAsync(UpdateInstanceRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update instance restrictions
        /// 
        /// <remarks>
        /// Updates the restriction settings of an instance
        /// </remarks>
        /// </summary>
        Task<UpdateInstanceRestrictionsResponse> UpdateRestrictionsAsync(UpdateInstanceRestrictionsRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update production instance domain
        /// 
        /// <remarks>
        /// Change the domain of a production instance.<br/>
        /// <br/>
        /// Changing the domain requires updating the <a href="https://clerk.com/docs/deployments/overview#dns-records">DNS records</a> accordingly, deploying new <a href="https://clerk.com/docs/deployments/overview#deploy">SSL certificates</a>, updating your Social Connection&apos;s redirect URLs and setting the new keys in your code.<br/>
        /// <br/>
        /// WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.
        /// </remarks>
        /// </summary>
        Task<ChangeProductionInstanceDomainResponse> ChangeDomainAsync(ChangeProductionInstanceDomainRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update instance organization settings
        /// 
        /// <remarks>
        /// Updates the organization settings of the instance
        /// </remarks>
        /// </summary>
        Task<UpdateInstanceOrganizationSettingsResponse> UpdateOrganizationSettingsAsync(UpdateInstanceOrganizationSettingsRequestBody? request = null, RetryConfig? retryConfig = null);
    }

    public class InstanceSettings: IInstanceSettings
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public InstanceSettings(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<GetInstanceResponse> GetAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/instance";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetInstance", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Instance>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetInstanceResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Instance = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateInstanceResponse> UpdateAsync(UpdateInstanceRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/instance";

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateInstance", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 204)
            {                
                return new UpdateInstanceResponse()
                {
                    HttpMeta = new Models.Components.HTTPMetadata()
                    {
                        Response = httpResponse,
                        Request = httpRequest
                    }
                };
            }
            else if(responseStatusCode == 422)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateInstanceRestrictionsResponse> UpdateRestrictionsAsync(UpdateInstanceRestrictionsRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/instance/restrictions";

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateInstanceRestrictions", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<InstanceRestrictions>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new UpdateInstanceRestrictionsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.InstanceRestrictions = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<ChangeProductionInstanceDomainResponse> ChangeDomainAsync(ChangeProductionInstanceDomainRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/instance/change_domain";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ChangeProductionInstanceDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 202)
            {                
                return new ChangeProductionInstanceDomainResponse()
                {
                    HttpMeta = new Models.Components.HTTPMetadata()
                    {
                        Response = httpResponse,
                        Request = httpRequest
                    }
                };
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateInstanceOrganizationSettingsResponse> UpdateOrganizationSettingsAsync(UpdateInstanceOrganizationSettingsRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/instance/organization_settings";

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateInstanceOrganizationSettings", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationSettings>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new UpdateInstanceOrganizationSettingsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationSettings = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Invitations.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IInvitations
    {

        /// <summary>
        /// Create an invitation
        /// 
        /// <remarks>
        /// Creates a new invitation for the given email address and sends the invitation email.<br/>
        /// Keep in mind that you cannot create an invitation if there is already one for the given email address.<br/>
        /// Also, trying to create an invitation for an email address that already exists in your application will result to an error.
        /// </remarks>
        /// </summary>
        Task<CreateInvitationResponse> CreateAsync(CreateInvitationRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// List all invitations
        /// 
        /// <remarks>
        /// Returns all non-revoked invitations for your application, sorted by creation date
        /// </remarks>
        /// </summary>
        Task<ListInvitationsResponse> ListAsync(ListInvitationsRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create multiple invitations
        /// 
        /// <remarks>
        /// Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the<br/>
        /// invitations as emails by setting the `notify` parameter to `true`. There cannot be an existing invitation for any<br/>
        /// of the email addresses you provide unless you set `ignore_existing` to `true` for specific email addresses. Please<br/>
        /// note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.
        /// </remarks>
        /// </summary>
        Task<CreateBulkInvitationsResponse> BulkCreateAsync(List<RequestBody>? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Revokes an invitation
        /// 
        /// <remarks>
        /// Revokes the given invitation.<br/>
        /// Revoking an invitation will prevent the user from using the invitation link that was sent to them.<br/>
        /// However, it doesn&apos;t prevent the user from signing up if they follow the sign up flow.<br/>
        /// Only active (i.e. non-revoked) invitations can be revoked.
        /// </remarks>
        /// </summary>
        Task<RevokeInvitationResponse> RevokeAsync(string invitationId, RetryConfig? retryConfig = null);
    }

    public class Invitations: IInvitations
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Invitations(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateInvitationResponse> CreateAsync(CreateInvitationRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/invitations";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateInvitation", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Invitation>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateInvitationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Invitation = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<ListInvitationsResponse> ListAsync(ListInvitationsRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/invitations", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListInvitations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<Invitation>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListInvitationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.InvitationList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateBulkInvitationsResponse> BulkCreateAsync(List<RequestBody>? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/invitations/bulk";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateBulkInvitations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<Invitation>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateBulkInvitationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.InvitationList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<RevokeInvitationResponse> RevokeAsync(string invitationId, RetryConfig? retryConfig = null)
        {
            var request = new RevokeInvitationRequest()
            {
                InvitationId = invitationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/invitations/{invitation_id}/revoke", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RevokeInvitation", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<InvitationRevoked>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RevokeInvitationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.InvitationRevoked = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Jwks.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    public interface IJwks
    {

        /// <summary>
        /// Retrieve the JSON Web Key Set of the instance
        /// 
        /// <remarks>
        /// Retrieve the JSON Web Key Set of the instance
        /// </remarks>
        /// </summary>
        Task<GetJWKSResponse> GetJWKSAsync(RetryConfig? retryConfig = null);
    }

    public class Jwks: IJwks
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Jwks(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<GetJWKSResponse> GetJWKSAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/jwks";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetJWKS", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.Jwks>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetJWKSResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Jwks = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/JwtTemplates.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IJwtTemplates
    {

        /// <summary>
        /// List all templates
        /// </summary>
        Task<ListJWTTemplatesResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a JWT template
        /// 
        /// <remarks>
        /// Create a new JWT template
        /// </remarks>
        /// </summary>
        Task<CreateJWTTemplateResponse> CreateAsync(CreateJWTTemplateRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a template
        /// 
        /// <remarks>
        /// Retrieve the details of a given JWT template
        /// </remarks>
        /// </summary>
        Task<GetJWTTemplateResponse> GetAsync(string templateId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update a JWT template
        /// 
        /// <remarks>
        /// Updates an existing JWT template
        /// </remarks>
        /// </summary>
        Task<UpdateJWTTemplateResponse> UpdateAsync(string templateId, UpdateJWTTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a Template
        /// </summary>
        Task<DeleteJWTTemplateResponse> DeleteAsync(string templateId, RetryConfig? retryConfig = null);
    }

    public class JwtTemplates: IJwtTemplates
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public JwtTemplates(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListJWTTemplatesResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new ListJWTTemplatesRequest()
            {
                Paginated = paginated,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/jwt_templates", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListJWTTemplates", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<JWTTemplate>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListJWTTemplatesResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.JWTTemplateList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateJWTTemplateResponse> CreateAsync(CreateJWTTemplateRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/jwt_templates";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateJWTTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<JWTTemplate>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateJWTTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.JWTTemplate = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetJWTTemplateResponse> GetAsync(string templateId, RetryConfig? retryConfig = null)
        {
            var request = new GetJWTTemplateRequest()
            {
                TemplateId = templateId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/jwt_templates/{template_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetJWTTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<JWTTemplate>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetJWTTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.JWTTemplate = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateJWTTemplateResponse> UpdateAsync(string templateId, UpdateJWTTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpdateJWTTemplateRequest()
            {
                TemplateId = templateId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/jwt_templates/{template_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateJWTTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 402 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<JWTTemplate>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateJWTTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.JWTTemplate = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 402, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteJWTTemplateResponse> DeleteAsync(string templateId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteJWTTemplateRequest()
            {
                TemplateId = templateId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/jwt_templates/{template_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteJWTTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteJWTTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Miscellaneous.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IMiscellaneous
    {

        /// <summary>
        /// Returns the markup for the interstitial page
        /// 
        /// <remarks>
        /// The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user&apos;s authentication state.<br/>
        /// It is used by Clerk SDKs when the user&apos;s authentication state cannot be immediately determined.
        /// </remarks>
        /// </summary>
        Task<GetPublicInterstitialResponse> GetPublicInterstitialAsync(GetPublicInterstitialRequest? request = null, RetryConfig? retryConfig = null);
    }

    public class Miscellaneous: IMiscellaneous
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Miscellaneous(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<GetPublicInterstitialResponse> GetPublicInterstitialAsync(GetPublicInterstitialRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/public/interstitial", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var hookCtx = new HookContext("GetPublicInterstitial", null, null);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {                
                return new GetPublicInterstitialResponse()
                {
                    HttpMeta = new Models.Components.HTTPMetadata()
                    {
                        Response = httpResponse,
                        Request = httpRequest
                    }
                };
            }
            else if(responseStatusCode == 400 || responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500 || responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Actor.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class Actor
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ActorToken.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Success
    /// </summary>
    public class ActorToken
    {

        [JsonProperty("object")]
        public ActorTokenObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("status")]
        public ActorTokenStatus Status { get; set; } = default!;

        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        [JsonProperty("actor")]
        public ActorTokenActor Actor { get; set; } = default!;

        [JsonProperty("token")]
        public string? Token { get; set; }

        [JsonProperty("url")]
        public string? Url { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ActorTokenActor.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class ActorTokenActor
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ActorTokenObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum ActorTokenObject
    {
        [JsonProperty("actor_token")]
        ActorToken,
    }

    public static class ActorTokenObjectExtension
    {
        public static string Value(this ActorTokenObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ActorTokenObject ToEnum(this string value)
        {
            foreach(var field in typeof(ActorTokenObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ActorTokenObject)
                    {
                        return (ActorTokenObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ActorTokenObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/ActorTokenStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum ActorTokenStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class ActorTokenStatusExtension
    {
        public static string Value(this ActorTokenStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ActorTokenStatus ToEnum(this string value)
        {
            foreach(var field in typeof(ActorTokenStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ActorTokenStatus)
                    {
                        return (ActorTokenStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ActorTokenStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Admin.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Admin
    {

        [JsonProperty("status")]
        public AdminVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public VerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/AdminVerificationPhoneNumberStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum AdminVerificationPhoneNumberStatus
    {
        [JsonProperty("verified")]
        Verified,
    }

    public static class AdminVerificationPhoneNumberStatusExtension
    {
        public static string Value(this AdminVerificationPhoneNumberStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AdminVerificationPhoneNumberStatus ToEnum(this string value)
        {
            foreach(var field in typeof(AdminVerificationPhoneNumberStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AdminVerificationPhoneNumberStatus)
                    {
                        return (AdminVerificationPhoneNumberStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AdminVerificationPhoneNumberStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/AdminVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum AdminVerificationStatus
    {
        [JsonProperty("verified")]
        Verified,
    }

    public static class AdminVerificationStatusExtension
    {
        public static string Value(this AdminVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AdminVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(AdminVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AdminVerificationStatus)
                    {
                        return (AdminVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AdminVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/AdminVerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum AdminVerificationStrategy
    {
        [JsonProperty("admin")]
        Admin,
    }

    public static class AdminVerificationStrategyExtension
    {
        public static string Value(this AdminVerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AdminVerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(AdminVerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AdminVerificationStrategy)
                    {
                        return (AdminVerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AdminVerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/AdminVerificationWeb3WalletStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum AdminVerificationWeb3WalletStatus
    {
        [JsonProperty("verified")]
        Verified,
    }

    public static class AdminVerificationWeb3WalletStatusExtension
    {
        public static string Value(this AdminVerificationWeb3WalletStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AdminVerificationWeb3WalletStatus ToEnum(this string value)
        {
            foreach(var field in typeof(AdminVerificationWeb3WalletStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AdminVerificationWeb3WalletStatus)
                    {
                        return (AdminVerificationWeb3WalletStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AdminVerificationWeb3WalletStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/AdminVerificationWeb3WalletStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum AdminVerificationWeb3WalletStrategy
    {
        [JsonProperty("admin")]
        Admin,
    }

    public static class AdminVerificationWeb3WalletStrategyExtension
    {
        public static string Value(this AdminVerificationWeb3WalletStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AdminVerificationWeb3WalletStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(AdminVerificationWeb3WalletStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AdminVerificationWeb3WalletStrategy)
                    {
                        return (AdminVerificationWeb3WalletStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AdminVerificationWeb3WalletStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/AllowlistIdentifier.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Success
    /// </summary>
    public class AllowlistIdentifier
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public AllowlistIdentifierObject? Object { get; set; }

        [JsonProperty("id")]
        public string? Id { get; set; }

        [JsonProperty("invitation_id")]
        public string? InvitationId { get; set; }

        /// <summary>
        /// An email address or a phone number.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("identifier")]
        public string? Identifier { get; set; }

        [JsonProperty("identifier_type")]
        public IdentifierType? IdentifierType { get; set; }

        [JsonProperty("instance_id")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long? UpdatedAt { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/AllowlistIdentifierObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum AllowlistIdentifierObject
    {
        [JsonProperty("allowlist_identifier")]
        AllowlistIdentifier,
    }

    public static class AllowlistIdentifierObjectExtension
    {
        public static string Value(this AllowlistIdentifierObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AllowlistIdentifierObject ToEnum(this string value)
        {
            foreach(var field in typeof(AllowlistIdentifierObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AllowlistIdentifierObject)
                    {
                        return (AllowlistIdentifierObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AllowlistIdentifierObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/BlocklistIdentifier.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class BlocklistIdentifier
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public BlocklistIdentifierObject? Object { get; set; }

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// An email address, email domain, phone number or web3 wallet.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("identifier")]
        public string? Identifier { get; set; }

        [JsonProperty("identifier_type")]
        public BlocklistIdentifierIdentifierType? IdentifierType { get; set; }

        [JsonProperty("instance_id")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long? UpdatedAt { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/BlocklistIdentifierIdentifierType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum BlocklistIdentifierIdentifierType
    {
        [JsonProperty("email_address")]
        EmailAddress,
        [JsonProperty("phone_number")]
        PhoneNumber,
        [JsonProperty("web3_wallet")]
        Web3Wallet,
    }

    public static class BlocklistIdentifierIdentifierTypeExtension
    {
        public static string Value(this BlocklistIdentifierIdentifierType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static BlocklistIdentifierIdentifierType ToEnum(this string value)
        {
            foreach(var field in typeof(BlocklistIdentifierIdentifierType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is BlocklistIdentifierIdentifierType)
                    {
                        return (BlocklistIdentifierIdentifierType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum BlocklistIdentifierIdentifierType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/BlocklistIdentifierObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum BlocklistIdentifierObject
    {
        [JsonProperty("blocklist_identifier")]
        BlocklistIdentifier,
    }

    public static class BlocklistIdentifierObjectExtension
    {
        public static string Value(this BlocklistIdentifierObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static BlocklistIdentifierObject ToEnum(this string value)
        {
            foreach(var field in typeof(BlocklistIdentifierObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is BlocklistIdentifierObject)
                    {
                        return (BlocklistIdentifierObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum BlocklistIdentifierObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/BlocklistIdentifiers.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class BlocklistIdentifiers
    {

        [JsonProperty("data")]
        public List<BlocklistIdentifier> Data { get; set; } = default!;

        /// <summary>
        /// Total number of blocklist identifiers<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Claims.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class Claims
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ClerkError.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ClerkError
    {

        [JsonProperty("message")]
        public string Message { get; set; } = default!;

        [JsonProperty("long_message")]
        public string LongMessage { get; set; } = default!;

        [JsonProperty("code")]
        public string Code { get; set; } = default!;

        [JsonProperty("meta")]
        public Models.Components.Meta? Meta { get; set; }

        [JsonProperty("clerk_trace_id")]
        public string? ClerkTraceId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ClerkErrorErrorMeta.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class ClerkErrorErrorMeta
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Client.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class Client
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public Models.Components.Object Object { get; set; } = default!;

        /// <summary>
        /// String representing the identifier of the session.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("session_ids")]
        public List<string> SessionIds { get; set; } = default!;

        [JsonProperty("sessions")]
        public List<Session> Sessions { get; set; } = default!;

        [JsonProperty("sign_in_id", NullValueHandling = NullValueHandling.Include)]
        public string? SignInId { get; set; }

        [JsonProperty("sign_up_id", NullValueHandling = NullValueHandling.Include)]
        public string? SignUpId { get; set; }

        /// <summary>
        /// Last active session_id.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_active_session_id", NullValueHandling = NullValueHandling.Include)]
        public string? LastActiveSessionId { get; set; }

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/CNameTarget.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CNameTarget
    {

        [JsonProperty("host")]
        public string Host { get; set; } = default!;

        [JsonProperty("value")]
        public string Value { get; set; } = default!;

        /// <summary>
        /// Denotes whether this CNAME target is required to be set in order for the domain to be considered deployed.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("required")]
        public bool Required { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/DeletedObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Deleted Object
    /// </summary>
    public class DeletedObject
    {

        [JsonProperty("object")]
        public string Object { get; set; } = default!;

        [JsonProperty("id")]
        public string? Id { get; set; }

        [JsonProperty("slug")]
        public string? Slug { get; set; }

        [JsonProperty("deleted")]
        public bool Deleted { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Domain.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class Domain
    {

        [JsonProperty("object")]
        public DomainObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("is_satellite")]
        public bool IsSatellite { get; set; } = default!;

        [JsonProperty("frontend_api_url")]
        public string FrontendApiUrl { get; set; } = default!;

        /// <summary>
        /// Null for satellite domains.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("accounts_portal_url")]
        public string? AccountsPortalUrl { get; set; } = null;

        [JsonProperty("proxy_url")]
        public string? ProxyUrl { get; set; } = null;

        [JsonProperty("development_origin")]
        public string DevelopmentOrigin { get; set; } = default!;

        [JsonProperty("cname_targets")]
        public List<CNameTarget>? CnameTargets { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/DomainObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum DomainObject
    {
        [JsonProperty("domain")]
        Domain,
    }

    public static class DomainObjectExtension
    {
        public static string Value(this DomainObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static DomainObject ToEnum(this string value)
        {
            foreach(var field in typeof(DomainObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is DomainObject)
                    {
                        return (DomainObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum DomainObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Domains.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of domains
    /// </summary>
    public class Domains
    {

        [JsonProperty("data")]
        public List<Domain> Data { get; set; } = default!;

        /// <summary>
        /// Total number of domains<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/DomainsEnrollmentModes.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum DomainsEnrollmentModes
    {
        [JsonProperty("manual_invitation")]
        ManualInvitation,
        [JsonProperty("automatic_invitation")]
        AutomaticInvitation,
        [JsonProperty("automatic_suggestion")]
        AutomaticSuggestion,
    }

    public static class DomainsEnrollmentModesExtension
    {
        public static string Value(this DomainsEnrollmentModes value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static DomainsEnrollmentModes ToEnum(this string value)
        {
            foreach(var field in typeof(DomainsEnrollmentModes).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is DomainsEnrollmentModes)
                    {
                        return (DomainsEnrollmentModes)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum DomainsEnrollmentModes");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/EmailAddress.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class EmailAddress
    {

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public EmailAddressObject Object { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddressValue { get; set; } = default!;

        [JsonProperty("reserved")]
        public bool Reserved { get; set; } = default!;

        [JsonProperty("verification", NullValueHandling = NullValueHandling.Include)]
        public Verification? Verification { get; set; }

        [JsonProperty("linked_to")]
        public List<IdentificationLink> LinkedTo { get; set; } = default!;

        /// <summary>
        /// Indicates whether this email address domain matches an active enterprise connection.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("matches_sso_connection")]
        public bool? MatchesSsoConnection { get; set; }

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/EmailAddressObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum EmailAddressObject
    {
        [JsonProperty("email_address")]
        EmailAddress,
    }

    public static class EmailAddressObjectExtension
    {
        public static string Value(this EmailAddressObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static EmailAddressObject ToEnum(this string value)
        {
            foreach(var field in typeof(EmailAddressObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is EmailAddressObject)
                    {
                        return (EmailAddressObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum EmailAddressObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/EnrollmentMode.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Mode of enrollment for the domain
    /// </summary>
    public enum EnrollmentMode
    {
        [JsonProperty("manual_invitation")]
        ManualInvitation,
        [JsonProperty("automatic_invitation")]
        AutomaticInvitation,
        [JsonProperty("automatic_suggestion")]
        AutomaticSuggestion,
    }

    public static class EnrollmentModeExtension
    {
        public static string Value(this EnrollmentMode value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static EnrollmentMode ToEnum(this string value)
        {
            foreach(var field in typeof(EnrollmentMode).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is EnrollmentMode)
                    {
                        return (EnrollmentMode)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum EnrollmentMode");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Error.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class ErrorType
    {
        private ErrorType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ErrorType ErrorClerkError { get { return new ErrorType("error_ClerkError"); } }
        
        public static ErrorType Null { get { return new ErrorType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ErrorType v) { return v.Value; }
        public static ErrorType FromString(string v) {
            switch(v) {
                case "error_ClerkError": return ErrorClerkError;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ErrorType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ErrorType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Error.ErrorConverter))]
    public class Error {
        public Error(ErrorType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public ErrorClerkError? ErrorClerkError { get; set; }

        public ErrorType Type { get; set; }


        public static Error CreateErrorClerkError(ErrorClerkError errorClerkError) {
            ErrorType typ = ErrorType.ErrorClerkError;

            Error res = new Error(typ);
            res.ErrorClerkError = errorClerkError;
            return res;
        }

        public static Error CreateNull() {
            ErrorType typ = ErrorType.Null;
            return new Error(typ);
        }

        public class ErrorConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Error);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Error(ErrorType.ErrorClerkError)
                    {
                        ErrorClerkError = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<ErrorClerkError>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(ErrorClerkError), new Error(ErrorType.ErrorClerkError), "ErrorClerkError"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Error res = (Error)value;
                if (ErrorType.FromString(res.Type).Equals(ErrorType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ErrorClerkError != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ErrorClerkError));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ErrorClerkError.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ErrorClerkError
    {

        [JsonProperty("message")]
        public string Message { get; set; } = default!;

        [JsonProperty("long_message")]
        public string LongMessage { get; set; } = default!;

        [JsonProperty("code")]
        public string Code { get; set; } = default!;

        [JsonProperty("meta")]
        public ErrorMeta? Meta { get; set; }

        [JsonProperty("clerk_trace_id")]
        public string? ClerkTraceId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ErrorMeta.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class ErrorMeta
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ExternalAccount.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class ExternalAccount
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ExternalAccounts.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class ExternalAccounts
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/FromOAuth.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class FromOAuth
    {

        [JsonProperty("status")]
        public FromOAuthVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public string Strategy { get; set; } = default!;

        [JsonProperty("error")]
        public Error? Error { get; set; } = null;

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/FromOAuthVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum FromOAuthVerificationStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
    }

    public static class FromOAuthVerificationStatusExtension
    {
        public static string Value(this FromOAuthVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static FromOAuthVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(FromOAuthVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is FromOAuthVerificationStatus)
                    {
                        return (FromOAuthVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum FromOAuthVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/HTTPMetadata.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Net.Http;
    
    public class HTTPMetadata
    {

        /// <summary>
        /// Raw HTTP response; suitable for custom response parsing
        /// </summary>
        [JsonProperty("-")]
        public HttpResponseMessage Response { get; set; } = default!;

        /// <summary>
        /// Raw HTTP request; suitable for debugging
        /// </summary>
        [JsonProperty("-")]
        public HttpRequestMessage Request { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/IdentificationLink.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class IdentificationLink
    {

        [JsonProperty("type")]
        public string Type { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/IdentifierType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum IdentifierType
    {
        [JsonProperty("email_address")]
        EmailAddress,
        [JsonProperty("phone_number")]
        PhoneNumber,
        [JsonProperty("web3_wallet")]
        Web3Wallet,
    }

    public static class IdentifierTypeExtension
    {
        public static string Value(this IdentifierType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static IdentifierType ToEnum(this string value)
        {
            foreach(var field in typeof(IdentifierType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is IdentifierType)
                    {
                        return (IdentifierType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum IdentifierType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Instance.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class Instance
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.
        /// </summary>
        [JsonProperty("object")]
        public InstanceObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("environment_type")]
        public string EnvironmentType { get; set; } = default!;

        [JsonProperty("allowed_origins", NullValueHandling = NullValueHandling.Include)]
        public List<string>? AllowedOrigins { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/InstanceObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.
    /// </summary>
    public enum InstanceObject
    {
        [JsonProperty("instance")]
        Instance,
    }

    public static class InstanceObjectExtension
    {
        public static string Value(this InstanceObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InstanceObject ToEnum(this string value)
        {
            foreach(var field in typeof(InstanceObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InstanceObject)
                    {
                        return (InstanceObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InstanceObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/InstanceRestrictions.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Success
    /// </summary>
    public class InstanceRestrictions
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.
        /// </summary>
        [JsonProperty("object")]
        public InstanceRestrictionsObject Object { get; set; } = default!;

        [JsonProperty("allowlist")]
        public bool Allowlist { get; set; } = default!;

        [JsonProperty("blocklist")]
        public bool Blocklist { get; set; } = default!;

        [JsonProperty("block_email_subaddresses")]
        public bool BlockEmailSubaddresses { get; set; } = default!;

        [JsonProperty("block_disposable_email_domains")]
        public bool BlockDisposableEmailDomains { get; set; } = default!;

        [JsonProperty("ignore_dots_for_gmail_addresses")]
        public bool IgnoreDotsForGmailAddresses { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/InstanceRestrictionsObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.
    /// </summary>
    public enum InstanceRestrictionsObject
    {
        [JsonProperty("instance_restrictions")]
        InstanceRestrictions,
    }

    public static class InstanceRestrictionsObjectExtension
    {
        public static string Value(this InstanceRestrictionsObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InstanceRestrictionsObject ToEnum(this string value)
        {
            foreach(var field in typeof(InstanceRestrictionsObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InstanceRestrictionsObject)
                    {
                        return (InstanceRestrictionsObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InstanceRestrictionsObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/InstanceSettings.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// InstanceSettings Server API
    /// </summary>
    public class InstanceSettings
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.
        /// </summary>
        [JsonProperty("object")]
        public InstanceSettingsObject? Object { get; set; }

        [JsonProperty("id")]
        public string? Id { get; set; }

        [JsonProperty("restricted_to_allowlist")]
        public bool? RestrictedToAllowlist { get; set; }

        [JsonProperty("from_email_address")]
        public string? FromEmailAddress { get; set; }

        [JsonProperty("progressive_sign_up")]
        public bool? ProgressiveSignUp { get; set; }

        [JsonProperty("enhanced_email_deliverability")]
        public bool? EnhancedEmailDeliverability { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/InstanceSettingsObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.
    /// </summary>
    public enum InstanceSettingsObject
    {
        [JsonProperty("instance_settings")]
        InstanceSettings,
    }

    public static class InstanceSettingsObjectExtension
    {
        public static string Value(this InstanceSettingsObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InstanceSettingsObject ToEnum(this string value)
        {
            foreach(var field in typeof(InstanceSettingsObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InstanceSettingsObject)
                    {
                        return (InstanceSettingsObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InstanceSettingsObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Invitation.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class Invitation
    {

        [JsonProperty("object")]
        public InvitationObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("revoked")]
        public bool? Revoked { get; set; }

        [JsonProperty("status")]
        public InvitationStatus Status { get; set; } = default!;

        [JsonProperty("url")]
        public string? Url { get; set; }

        /// <summary>
        /// Unix timestamp of expiration.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("expires_at")]
        public long? ExpiresAt { get; set; } = null;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/InvitationObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum InvitationObject
    {
        [JsonProperty("invitation")]
        Invitation,
    }

    public static class InvitationObjectExtension
    {
        public static string Value(this InvitationObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InvitationObject ToEnum(this string value)
        {
            foreach(var field in typeof(InvitationObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InvitationObject)
                    {
                        return (InvitationObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InvitationObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/InvitationRevoked.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class InvitationRevoked
    {

        [JsonProperty("object")]
        public InvitationRevokedObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("revoked")]
        public bool? Revoked { get; set; }

        [JsonProperty("status")]
        public InvitationRevokedStatus Status { get; set; } = default!;

        [JsonProperty("url")]
        public string? Url { get; set; }

        /// <summary>
        /// Unix timestamp of expiration.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("expires_at")]
        public long? ExpiresAt { get; set; } = null;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/InvitationRevokedObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum InvitationRevokedObject
    {
        [JsonProperty("invitation")]
        Invitation,
    }

    public static class InvitationRevokedObjectExtension
    {
        public static string Value(this InvitationRevokedObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InvitationRevokedObject ToEnum(this string value)
        {
            foreach(var field in typeof(InvitationRevokedObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InvitationRevokedObject)
                    {
                        return (InvitationRevokedObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InvitationRevokedObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/InvitationRevokedStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum InvitationRevokedStatus
    {
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class InvitationRevokedStatusExtension
    {
        public static string Value(this InvitationRevokedStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InvitationRevokedStatus ToEnum(this string value)
        {
            foreach(var field in typeof(InvitationRevokedStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InvitationRevokedStatus)
                    {
                        return (InvitationRevokedStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InvitationRevokedStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/InvitationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum InvitationStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
        [JsonProperty("expired")]
        Expired,
    }

    public static class InvitationStatusExtension
    {
        public static string Value(this InvitationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static InvitationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(InvitationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is InvitationStatus)
                    {
                        return (InvitationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum InvitationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Jwks.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Get the JSON Web Key Set
    /// </summary>
    public class Jwks
    {

        [JsonProperty("keys")]
        public List<Keys>? Keys { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/JWTTemplate.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// List of JWT templates
    /// </summary>
    public class JWTTemplate
    {

        [JsonProperty("object")]
        public JWTTemplateObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("claims")]
        public Models.Components.Claims Claims { get; set; } = default!;

        [JsonProperty("lifetime")]
        public long Lifetime { get; set; } = default!;

        [JsonProperty("allowed_clock_skew")]
        public long AllowedClockSkew { get; set; } = default!;

        [JsonProperty("custom_signing_key")]
        public bool CustomSigningKey { get; set; } = default!;

        [JsonProperty("signing_algorithm")]
        public string SigningAlgorithm { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/JWTTemplateObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum JWTTemplateObject
    {
        [JsonProperty("jwt_template")]
        JwtTemplate,
    }

    public static class JWTTemplateObjectExtension
    {
        public static string Value(this JWTTemplateObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static JWTTemplateObject ToEnum(this string value)
        {
            foreach(var field in typeof(JWTTemplateObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is JWTTemplateObject)
                    {
                        return (JWTTemplateObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum JWTTemplateObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Keys.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Keys
    {

        [JsonProperty("use")]
        public string? Use { get; set; }

        [JsonProperty("kty")]
        public string? Kty { get; set; }

        [JsonProperty("kid")]
        public string? Kid { get; set; }

        [JsonProperty("alg")]
        public string? Alg { get; set; }

        [JsonProperty("n")]
        public string? N { get; set; }

        [JsonProperty("e")]
        public string? E { get; set; }

        [JsonProperty("x")]
        public string? X { get; set; }

        [JsonProperty("crv")]
        public string? Crv { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Meta.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class Meta
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/NextAction.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum NextAction
    {
        [JsonProperty("needs_prepare")]
        NeedsPrepare,
        [JsonProperty("needs_attempt")]
        NeedsAttempt,
        [JsonProperty("")]
        Unknown,
    }

    public static class NextActionExtension
    {
        public static string Value(this NextAction value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static NextAction ToEnum(this string value)
        {
            foreach(var field in typeof(NextAction).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is NextAction)
                    {
                        return (NextAction)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum NextAction");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Nonce.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Nonce
    {
        [JsonProperty("nonce")]
        Nonce,
    }

    public static class NonceExtension
    {
        public static string Value(this Nonce value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Nonce ToEnum(this string value)
        {
            foreach(var field in typeof(Nonce).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Nonce)
                    {
                        return (Nonce)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Nonce");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OAuthApplication.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class OAuthApplication
    {

        [JsonProperty("object")]
        public OAuthApplicationObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("instance_id")]
        public string InstanceId { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("client_id")]
        public string ClientId { get; set; } = default!;

        [JsonProperty("public")]
        public bool Public { get; set; } = default!;

        [JsonProperty("scopes")]
        public string Scopes { get; set; } = default!;

        [JsonProperty("redirect_uris")]
        public List<string> RedirectUris { get; set; } = default!;

        /// <summary>
        /// Deprecated: Use redirect_uris instead.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("callback_url")]
        public string CallbackUrl { get; set; } = default!;

        [JsonProperty("authorize_url")]
        public string AuthorizeUrl { get; set; } = default!;

        [JsonProperty("token_fetch_url")]
        public string TokenFetchUrl { get; set; } = default!;

        [JsonProperty("user_info_url")]
        public string UserInfoUrl { get; set; } = default!;

        [JsonProperty("discovery_url")]
        public string DiscoveryUrl { get; set; } = default!;

        [JsonProperty("token_introspection_url")]
        public string TokenIntrospectionUrl { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OAuthApplicationObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OAuthApplicationObject
    {
        [JsonProperty("oauth_application")]
        OauthApplication,
    }

    public static class OAuthApplicationObjectExtension
    {
        public static string Value(this OAuthApplicationObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OAuthApplicationObject ToEnum(this string value)
        {
            foreach(var field in typeof(OAuthApplicationObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OAuthApplicationObject)
                    {
                        return (OAuthApplicationObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OAuthApplicationObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OAuthApplications.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of OAuth applications
    /// </summary>
    public class OAuthApplications
    {

        [JsonProperty("data")]
        public List<OAuthApplication> Data { get; set; } = default!;

        /// <summary>
        /// Total number of OAuth applications<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OAuthApplicationWithSecret.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class OAuthApplicationWithSecret
    {

        [JsonProperty("object")]
        public OAuthApplicationWithSecretObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("instance_id")]
        public string InstanceId { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("client_id")]
        public string ClientId { get; set; } = default!;

        [JsonProperty("public")]
        public bool Public { get; set; } = default!;

        [JsonProperty("scopes")]
        public string Scopes { get; set; } = default!;

        [JsonProperty("redirect_uris")]
        public List<string> RedirectUris { get; set; } = default!;

        /// <summary>
        /// Deprecated: Use redirect_uris instead.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("callback_url")]
        public string CallbackUrl { get; set; } = default!;

        [JsonProperty("authorize_url")]
        public string AuthorizeUrl { get; set; } = default!;

        [JsonProperty("token_fetch_url")]
        public string TokenFetchUrl { get; set; } = default!;

        [JsonProperty("user_info_url")]
        public string UserInfoUrl { get; set; } = default!;

        [JsonProperty("discovery_url")]
        public string DiscoveryUrl { get; set; } = default!;

        [JsonProperty("token_introspection_url")]
        public string TokenIntrospectionUrl { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Empty if public client.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("client_secret")]
        public string? ClientSecret { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OAuthApplicationWithSecretObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OAuthApplicationWithSecretObject
    {
        [JsonProperty("oauth_application")]
        OauthApplication,
    }

    public static class OAuthApplicationWithSecretObjectExtension
    {
        public static string Value(this OAuthApplicationWithSecretObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OAuthApplicationWithSecretObject ToEnum(this string value)
        {
            foreach(var field in typeof(OAuthApplicationWithSecretObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OAuthApplicationWithSecretObject)
                    {
                        return (OAuthApplicationWithSecretObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OAuthApplicationWithSecretObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Object.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum Object
    {
        [JsonProperty("client")]
        Client,
    }

    public static class ObjectExtension
    {
        public static string Value(this Object value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Object ToEnum(this string value)
        {
            foreach(var field in typeof(Object).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Object)
                    {
                        return (Object)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Object");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Organization.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class Organization
    {

        [JsonProperty("object")]
        public OrganizationObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("slug")]
        public string Slug { get; set; } = default!;

        [JsonProperty("members_count")]
        public long? MembersCount { get; set; }

        [JsonProperty("missing_member_with_elevated_permissions")]
        public bool? MissingMemberWithElevatedPermissions { get; set; }

        [JsonProperty("pending_invitations_count")]
        public long? PendingInvitationsCount { get; set; }

        [JsonProperty("max_allowed_memberships")]
        public long MaxAllowedMemberships { get; set; } = default!;

        [JsonProperty("admin_delete_enabled")]
        public bool AdminDeleteEnabled { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("private_metadata")]
        public Dictionary<string, object> PrivateMetadata { get; set; } = default!;

        [JsonProperty("created_by")]
        public string? CreatedBy { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationDomain.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// An organization domain
    /// </summary>
    public class OrganizationDomain
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value. Always `organization_domain`<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public OrganizationDomainObject Object { get; set; } = default!;

        /// <summary>
        /// Unique identifier for the organization domain
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Unique identifier for the organization
        /// </summary>
        [JsonProperty("organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// Name of the organization domain
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Mode of enrollment for the domain
        /// </summary>
        [JsonProperty("enrollment_mode")]
        public EnrollmentMode EnrollmentMode { get; set; } = default!;

        /// <summary>
        /// Affiliation email address for the domain, if available.
        /// </summary>
        [JsonProperty("affiliation_email_address", NullValueHandling = NullValueHandling.Include)]
        public string? AffiliationEmailAddress { get; set; }

        /// <summary>
        /// Verification details for the domain
        /// </summary>
        [JsonProperty("verification", NullValueHandling = NullValueHandling.Include)]
        public OrganizationDomainVerification? Verification { get; set; }

        /// <summary>
        /// Total number of pending invitations associated with this domain
        /// </summary>
        [JsonProperty("total_pending_invitations")]
        public int TotalPendingInvitations { get; set; } = default!;

        /// <summary>
        /// Total number of pending suggestions associated with this domain
        /// </summary>
        [JsonProperty("total_pending_suggestions")]
        public int TotalPendingSuggestions { get; set; } = default!;

        /// <summary>
        /// Unix timestamp when the domain was created
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of the last update to the domain
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationDomainObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value. Always `organization_domain`<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum OrganizationDomainObject
    {
        [JsonProperty("organization_domain")]
        OrganizationDomain,
    }

    public static class OrganizationDomainObjectExtension
    {
        public static string Value(this OrganizationDomainObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationDomainObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationDomainObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationDomainObject)
                    {
                        return (OrganizationDomainObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationDomainObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationDomains.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of organization domains
    /// </summary>
    public class OrganizationDomains
    {

        [JsonProperty("data")]
        public List<OrganizationDomain> Data { get; set; } = default!;

        /// <summary>
        /// Total number of organization domains<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationDomainStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Status of the verification. It can be `unverified` or `verified`
    /// </summary>
    public enum OrganizationDomainStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
    }

    public static class OrganizationDomainStatusExtension
    {
        public static string Value(this OrganizationDomainStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationDomainStatus ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationDomainStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationDomainStatus)
                    {
                        return (OrganizationDomainStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationDomainStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationDomainVerification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Verification details for the domain
    /// </summary>
    public class OrganizationDomainVerification
    {

        /// <summary>
        /// Status of the verification. It can be `unverified` or `verified`
        /// </summary>
        [JsonProperty("status")]
        public OrganizationDomainStatus Status { get; set; } = default!;

        /// <summary>
        /// Name of the strategy used to verify the domain
        /// </summary>
        [JsonProperty("strategy")]
        public string Strategy { get; set; } = default!;

        /// <summary>
        /// How many attempts have been made to verify the domain
        /// </summary>
        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        /// <summary>
        /// Unix timestamp of when the verification will expire
        /// </summary>
        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitation.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// An organization invitation
    /// </summary>
    public class OrganizationInvitation
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public OrganizationInvitationObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("role")]
        public string Role { get; set; } = default!;

        [JsonProperty("role_name")]
        public string RoleName { get; set; } = default!;

        [JsonProperty("organization_id")]
        public string? OrganizationId { get; set; }

        [JsonProperty("status")]
        public string? Status { get; set; }

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Include)]
        public string? Url { get; set; }

        /// <summary>
        /// Unix timestamp of expiration.
        /// </summary>
        [JsonProperty("expires_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpiresAt { get; set; }

        /// <summary>
        /// Unix timestamp of creation.
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitationObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum OrganizationInvitationObject
    {
        [JsonProperty("organization_invitation")]
        OrganizationInvitation,
    }

    public static class OrganizationInvitationObjectExtension
    {
        public static string Value(this OrganizationInvitationObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationInvitationObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationInvitationObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationInvitationObject)
                    {
                        return (OrganizationInvitationObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationInvitationObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitationPublicOrganizationData.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class OrganizationInvitationPublicOrganizationData
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("slug")]
        public string Slug { get; set; } = default!;

        [JsonProperty("image_url")]
        public string? ImageUrl { get; set; }

        [JsonProperty("has_image")]
        public bool HasImage { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitations.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of organization invitations
    /// </summary>
    public class OrganizationInvitations
    {

        [JsonProperty("data")]
        public List<OrganizationInvitation> Data { get; set; } = default!;

        /// <summary>
        /// Total number of organization invitations<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitationsWithPublicOrganizationData.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of organization invitations with public organization data
    /// </summary>
    public class OrganizationInvitationsWithPublicOrganizationData
    {

        [JsonProperty("data")]
        public List<OrganizationInvitationWithPublicOrganizationData> Data { get; set; } = default!;

        /// <summary>
        /// Total number of organization invitations<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitationWithPublicOrganizationData.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// An organization invitation with public organization data populated
    /// </summary>
    public class OrganizationInvitationWithPublicOrganizationData
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public OrganizationInvitationWithPublicOrganizationDataObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("role")]
        public string Role { get; set; } = default!;

        [JsonProperty("role_name")]
        public string RoleName { get; set; } = default!;

        [JsonProperty("organization_id")]
        public string? OrganizationId { get; set; }

        [JsonProperty("status")]
        public string? Status { get; set; }

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Include)]
        public string? Url { get; set; }

        /// <summary>
        /// Unix timestamp of expiration.
        /// </summary>
        [JsonProperty("expires_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpiresAt { get; set; }

        /// <summary>
        /// Unix timestamp of creation.
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        [JsonProperty("public_organization_data")]
        public OrganizationInvitationPublicOrganizationData? PublicOrganizationData { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationInvitationWithPublicOrganizationDataObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum OrganizationInvitationWithPublicOrganizationDataObject
    {
        [JsonProperty("organization_invitation")]
        OrganizationInvitation,
    }

    public static class OrganizationInvitationWithPublicOrganizationDataObjectExtension
    {
        public static string Value(this OrganizationInvitationWithPublicOrganizationDataObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationInvitationWithPublicOrganizationDataObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationInvitationWithPublicOrganizationDataObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationInvitationWithPublicOrganizationDataObject)
                    {
                        return (OrganizationInvitationWithPublicOrganizationDataObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationInvitationWithPublicOrganizationDataObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationMembership.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Hello world
    /// </summary>
    public class OrganizationMembership
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public OrganizationMembershipObject Object { get; set; } = default!;

        [JsonProperty("role")]
        public string Role { get; set; } = default!;

        [JsonProperty("role_name")]
        public string? RoleName { get; set; }

        [JsonProperty("permissions")]
        public List<string> Permissions { get; set; } = default!;

        /// <summary>
        /// Metadata saved on the organization membership, accessible from both Frontend and Backend APIs
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        /// <summary>
        /// Metadata saved on the organization membership, accessible only from the Backend API
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }

        [JsonProperty("organization")]
        public OrganizationMembershipOrganization Organization { get; set; } = default!;

        /// <summary>
        /// An organization membership with public user data populated
        /// </summary>
        [JsonProperty("public_user_data")]
        public OrganizationMembershipPublicUserData? PublicUserData { get; set; }

        /// <summary>
        /// Unix timestamp of creation.
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationMembershipObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum OrganizationMembershipObject
    {
        [JsonProperty("organization_membership")]
        OrganizationMembership,
    }

    public static class OrganizationMembershipObjectExtension
    {
        public static string Value(this OrganizationMembershipObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationMembershipObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationMembershipObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationMembershipObject)
                    {
                        return (OrganizationMembershipObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationMembershipObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationMembershipOrganization.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class OrganizationMembershipOrganization
    {

        [JsonProperty("object")]
        public OrganizationMembershipOrganizationObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("slug")]
        public string Slug { get; set; } = default!;

        [JsonProperty("members_count")]
        public long? MembersCount { get; set; }

        [JsonProperty("missing_member_with_elevated_permissions")]
        public bool? MissingMemberWithElevatedPermissions { get; set; }

        [JsonProperty("pending_invitations_count")]
        public long? PendingInvitationsCount { get; set; }

        [JsonProperty("max_allowed_memberships")]
        public long MaxAllowedMemberships { get; set; } = default!;

        [JsonProperty("admin_delete_enabled")]
        public bool AdminDeleteEnabled { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("private_metadata")]
        public Dictionary<string, object> PrivateMetadata { get; set; } = default!;

        [JsonProperty("created_by")]
        public string? CreatedBy { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationMembershipOrganizationObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OrganizationMembershipOrganizationObject
    {
        [JsonProperty("organization")]
        Organization,
    }

    public static class OrganizationMembershipOrganizationObjectExtension
    {
        public static string Value(this OrganizationMembershipOrganizationObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationMembershipOrganizationObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationMembershipOrganizationObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationMembershipOrganizationObject)
                    {
                        return (OrganizationMembershipOrganizationObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationMembershipOrganizationObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationMembershipPublicUserData.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// An organization membership with public user data populated
    /// </summary>
    public class OrganizationMembershipPublicUserData
    {

        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        [JsonProperty("first_name", NullValueHandling = NullValueHandling.Include)]
        public string? FirstName { get; set; }

        [JsonProperty("last_name", NullValueHandling = NullValueHandling.Include)]
        public string? LastName { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("profile_image_url", NullValueHandling = NullValueHandling.Include)]
        public string? ProfileImageUrl { get; set; }

        [JsonProperty("image_url")]
        public string ImageUrl { get; set; } = default!;

        [JsonProperty("has_image")]
        public bool HasImage { get; set; } = default!;

        [JsonProperty("identifier")]
        public string? Identifier { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationMemberships.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of organization memberships
    /// </summary>
    public class OrganizationMemberships
    {

        [JsonProperty("data")]
        public List<OrganizationMembership> Data { get; set; } = default!;

        /// <summary>
        /// Total number of organization memberships<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OrganizationObject
    {
        [JsonProperty("organization")]
        Organization,
    }

    public static class OrganizationObjectExtension
    {
        public static string Value(this OrganizationObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationObject)
                    {
                        return (OrganizationObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Organizations.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of organizations
    /// </summary>
    public class Organizations
    {

        [JsonProperty("data")]
        public List<Organization> Data { get; set; } = default!;

        /// <summary>
        /// Total number of organizations<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationSettings.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class OrganizationSettings
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.
        /// </summary>
        [JsonProperty("object")]
        public OrganizationSettingsObject Object { get; set; } = default!;

        [JsonProperty("enabled")]
        public bool Enabled { get; set; } = default!;

        [JsonProperty("max_allowed_memberships")]
        public long MaxAllowedMemberships { get; set; } = default!;

        [JsonProperty("max_allowed_roles")]
        public long MaxAllowedRoles { get; set; } = default!;

        [JsonProperty("max_allowed_permissions")]
        public long MaxAllowedPermissions { get; set; } = default!;

        /// <summary>
        /// The role key that a user will be assigned after creating an organization.
        /// </summary>
        [JsonProperty("creator_role")]
        public string CreatorRole { get; set; } = default!;

        /// <summary>
        /// The default for whether an admin can delete an organization with the Frontend API.
        /// </summary>
        [JsonProperty("admin_delete_enabled")]
        public bool AdminDeleteEnabled { get; set; } = default!;

        [JsonProperty("domains_enabled")]
        public bool DomainsEnabled { get; set; } = default!;

        [JsonProperty("domains_enrollment_modes")]
        public List<DomainsEnrollmentModes> DomainsEnrollmentModes { get; set; } = default!;

        /// <summary>
        /// The role key that it will be used in order to create an organization invitation or suggestion.
        /// </summary>
        [JsonProperty("domains_default_role")]
        public string DomainsDefaultRole { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationSettingsObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.
    /// </summary>
    public enum OrganizationSettingsObject
    {
        [JsonProperty("organization_settings")]
        OrganizationSettings,
    }

    public static class OrganizationSettingsObjectExtension
    {
        public static string Value(this OrganizationSettingsObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationSettingsObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationSettingsObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationSettingsObject)
                    {
                        return (OrganizationSettingsObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationSettingsObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationWithLogo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class OrganizationWithLogo
    {

        [JsonProperty("object")]
        public OrganizationWithLogoObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("slug")]
        public string Slug { get; set; } = default!;

        [JsonProperty("members_count")]
        public long? MembersCount { get; set; }

        [JsonProperty("missing_member_with_elevated_permissions")]
        public bool? MissingMemberWithElevatedPermissions { get; set; }

        [JsonProperty("pending_invitations_count")]
        public long? PendingInvitationsCount { get; set; }

        [JsonProperty("max_allowed_memberships")]
        public long MaxAllowedMemberships { get; set; } = default!;

        [JsonProperty("admin_delete_enabled")]
        public bool AdminDeleteEnabled { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("private_metadata")]
        public Dictionary<string, object> PrivateMetadata { get; set; } = default!;

        [JsonProperty("created_by")]
        public string? CreatedBy { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("logo_url")]
        public string? LogoUrl { get; set; }

        [JsonProperty("image_url")]
        public string ImageUrl { get; set; } = default!;

        [JsonProperty("has_image")]
        public bool HasImage { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OrganizationWithLogoObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OrganizationWithLogoObject
    {
        [JsonProperty("organization")]
        Organization,
    }

    public static class OrganizationWithLogoObjectExtension
    {
        public static string Value(this OrganizationWithLogoObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OrganizationWithLogoObject ToEnum(this string value)
        {
            foreach(var field in typeof(OrganizationWithLogoObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OrganizationWithLogoObject)
                    {
                        return (OrganizationWithLogoObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OrganizationWithLogoObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Otp.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Otp
    {

        [JsonProperty("status")]
        public VerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public Strategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/OTPVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OTPVerificationStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
        [JsonProperty("failed")]
        Failed,
        [JsonProperty("expired")]
        Expired,
    }

    public static class OTPVerificationStatusExtension
    {
        public static string Value(this OTPVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OTPVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(OTPVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OTPVerificationStatus)
                    {
                        return (OTPVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OTPVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/OTPVerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum OTPVerificationStrategy
    {
        [JsonProperty("phone_code")]
        PhoneCode,
        [JsonProperty("email_code")]
        EmailCode,
        [JsonProperty("reset_password_email_code")]
        ResetPasswordEmailCode,
    }

    public static class OTPVerificationStrategyExtension
    {
        public static string Value(this OTPVerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static OTPVerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(OTPVerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is OTPVerificationStrategy)
                    {
                        return (OTPVerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum OTPVerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Passkey.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Passkey
    {

        [JsonProperty("status")]
        public PasskeyVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public PasskeyVerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("nonce")]
        public Nonce? Nonce { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; } = null;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/PasskeyVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum PasskeyVerificationStatus
    {
        [JsonProperty("verified")]
        Verified,
    }

    public static class PasskeyVerificationStatusExtension
    {
        public static string Value(this PasskeyVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PasskeyVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(PasskeyVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PasskeyVerificationStatus)
                    {
                        return (PasskeyVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PasskeyVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/PasskeyVerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum PasskeyVerificationStrategy
    {
        [JsonProperty("passkey")]
        Passkey,
    }

    public static class PasskeyVerificationStrategyExtension
    {
        public static string Value(this PasskeyVerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PasskeyVerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(PasskeyVerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PasskeyVerificationStrategy)
                    {
                        return (PasskeyVerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PasskeyVerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/PhoneNumber.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class PhoneNumber
    {

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public PhoneNumberObject Object { get; set; } = default!;

        [JsonProperty("phone_number")]
        public string PhoneNumberValue { get; set; } = default!;

        [JsonProperty("reserved_for_second_factor")]
        public bool? ReservedForSecondFactor { get; set; }

        [JsonProperty("default_second_factor")]
        public bool? DefaultSecondFactor { get; set; }

        [JsonProperty("reserved")]
        public bool Reserved { get; set; } = default!;

        [JsonProperty("verification", NullValueHandling = NullValueHandling.Include)]
        public PhoneNumberVerification? Verification { get; set; }

        [JsonProperty("linked_to")]
        public List<IdentificationLink> LinkedTo { get; set; } = default!;

        [JsonProperty("backup_codes")]
        public List<string>? BackupCodes { get; set; } = null;

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/PhoneNumberObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum PhoneNumberObject
    {
        [JsonProperty("phone_number")]
        PhoneNumber,
    }

    public static class PhoneNumberObjectExtension
    {
        public static string Value(this PhoneNumberObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PhoneNumberObject ToEnum(this string value)
        {
            foreach(var field in typeof(PhoneNumberObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PhoneNumberObject)
                    {
                        return (PhoneNumberObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PhoneNumberObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/PhoneNumberVerification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class PhoneNumberVerificationType
    {
        private PhoneNumberVerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static PhoneNumberVerificationType VerificationOTP { get { return new PhoneNumberVerificationType("verification_OTP"); } }
        
        public static PhoneNumberVerificationType VerificationAdmin { get { return new PhoneNumberVerificationType("verification_Admin"); } }
        
        public static PhoneNumberVerificationType Null { get { return new PhoneNumberVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(PhoneNumberVerificationType v) { return v.Value; }
        public static PhoneNumberVerificationType FromString(string v) {
            switch(v) {
                case "verification_OTP": return VerificationOTP;
                case "verification_Admin": return VerificationAdmin;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PhoneNumberVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PhoneNumberVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(PhoneNumberVerification.PhoneNumberVerificationConverter))]
    public class PhoneNumberVerification {
        public PhoneNumberVerification(PhoneNumberVerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public VerificationOTP? VerificationOTP { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public VerificationAdmin? VerificationAdmin { get; set; }

        public PhoneNumberVerificationType Type { get; set; }


        public static PhoneNumberVerification CreateVerificationOTP(VerificationOTP verificationOTP) {
            PhoneNumberVerificationType typ = PhoneNumberVerificationType.VerificationOTP;

            PhoneNumberVerification res = new PhoneNumberVerification(typ);
            res.VerificationOTP = verificationOTP;
            return res;
        }

        public static PhoneNumberVerification CreateVerificationAdmin(VerificationAdmin verificationAdmin) {
            PhoneNumberVerificationType typ = PhoneNumberVerificationType.VerificationAdmin;

            PhoneNumberVerification res = new PhoneNumberVerification(typ);
            res.VerificationAdmin = verificationAdmin;
            return res;
        }

        public static PhoneNumberVerification CreateNull() {
            PhoneNumberVerificationType typ = PhoneNumberVerificationType.Null;
            return new PhoneNumberVerification(typ);
        }

        public class PhoneNumberVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(PhoneNumberVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new PhoneNumberVerification(PhoneNumberVerificationType.VerificationOTP)
                    {
                        VerificationOTP = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<VerificationOTP>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(VerificationOTP), new PhoneNumberVerification(PhoneNumberVerificationType.VerificationOTP), "VerificationOTP"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new PhoneNumberVerification(PhoneNumberVerificationType.VerificationAdmin)
                    {
                        VerificationAdmin = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<VerificationAdmin>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(VerificationAdmin), new PhoneNumberVerification(PhoneNumberVerificationType.VerificationAdmin), "VerificationAdmin"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                PhoneNumberVerification res = (PhoneNumberVerification)value;
                if (PhoneNumberVerificationType.FromString(res.Type).Equals(PhoneNumberVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.VerificationOTP != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VerificationOTP));
                    return;
                }
                if (res.VerificationAdmin != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VerificationAdmin));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ProxyCheck.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Health check information about a domain&apos;s proxy configuration validation attempt.
    /// </summary>
    public class ProxyCheck
    {

        [JsonProperty("object")]
        public ProxyCheckObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("domain_id")]
        public string DomainId { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last run.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_run_at", NullValueHandling = NullValueHandling.Include)]
        public long? LastRunAt { get; set; }

        [JsonProperty("proxy_url")]
        public string ProxyUrl { get; set; } = default!;

        [JsonProperty("successful")]
        public bool Successful { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/ProxyCheckObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum ProxyCheckObject
    {
        [JsonProperty("proxy_check")]
        ProxyCheck,
    }

    public static class ProxyCheckObjectExtension
    {
        public static string Value(this ProxyCheckObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ProxyCheckObject ToEnum(this string value)
        {
            foreach(var field in typeof(ProxyCheckObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ProxyCheckObject)
                    {
                        return (ProxyCheckObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ProxyCheckObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/RedirectURL.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// List of Redirect URLs
    /// </summary>
    public class RedirectURL
    {

        [JsonProperty("object")]
        public RedirectURLObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("url")]
        public string Url { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/RedirectURLObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum RedirectURLObject
    {
        [JsonProperty("redirect_url")]
        RedirectUrl,
    }

    public static class RedirectURLObjectExtension
    {
        public static string Value(this RedirectURLObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static RedirectURLObject ToEnum(this string value)
        {
            foreach(var field in typeof(RedirectURLObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is RedirectURLObject)
                    {
                        return (RedirectURLObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum RedirectURLObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Saml.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Saml
    {

        [JsonProperty("status")]
        public SAMLVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public SAMLVerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("external_verification_redirect_url", NullValueHandling = NullValueHandling.Include)]
        public string? ExternalVerificationRedirectUrl { get; set; }

        [JsonProperty("error")]
        public VerificationError? Error { get; set; } = null;

        [JsonProperty("expire_at")]
        public long ExpireAt { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLAccount.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class SAMLAccount
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public SAMLAccountObject Object { get; set; } = default!;

        [JsonProperty("provider")]
        public string Provider { get; set; } = default!;

        [JsonProperty("active")]
        public bool Active { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("first_name")]
        public string? FirstName { get; set; } = null;

        [JsonProperty("last_name")]
        public string? LastName { get; set; } = null;

        [JsonProperty("provider_user_id")]
        public string? ProviderUserId { get; set; } = null;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        [JsonProperty("verification", NullValueHandling = NullValueHandling.Include)]
        public SAMLAccountVerification? Verification { get; set; }

        [JsonProperty("saml_connection")]
        public SamlConnection? SamlConnection { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLAccountObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum SAMLAccountObject
    {
        [JsonProperty("saml_account")]
        SamlAccount,
    }

    public static class SAMLAccountObjectExtension
    {
        public static string Value(this SAMLAccountObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SAMLAccountObject ToEnum(this string value)
        {
            foreach(var field in typeof(SAMLAccountObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SAMLAccountObject)
                    {
                        return (SAMLAccountObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SAMLAccountObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLAccountVerification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class SAMLAccountVerificationType
    {
        private SAMLAccountVerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static SAMLAccountVerificationType Saml { get { return new SAMLAccountVerificationType("SAML"); } }
        
        public static SAMLAccountVerificationType VerificationTicket { get { return new SAMLAccountVerificationType("verification_Ticket"); } }
        
        public static SAMLAccountVerificationType Null { get { return new SAMLAccountVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(SAMLAccountVerificationType v) { return v.Value; }
        public static SAMLAccountVerificationType FromString(string v) {
            switch(v) {
                case "SAML": return Saml;
                case "verification_Ticket": return VerificationTicket;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for SAMLAccountVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((SAMLAccountVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(SAMLAccountVerification.SAMLAccountVerificationConverter))]
    public class SAMLAccountVerification {
        public SAMLAccountVerification(SAMLAccountVerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Saml? Saml { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public VerificationTicket? VerificationTicket { get; set; }

        public SAMLAccountVerificationType Type { get; set; }


        public static SAMLAccountVerification CreateSaml(Saml saml) {
            SAMLAccountVerificationType typ = SAMLAccountVerificationType.Saml;

            SAMLAccountVerification res = new SAMLAccountVerification(typ);
            res.Saml = saml;
            return res;
        }

        public static SAMLAccountVerification CreateVerificationTicket(VerificationTicket verificationTicket) {
            SAMLAccountVerificationType typ = SAMLAccountVerificationType.VerificationTicket;

            SAMLAccountVerification res = new SAMLAccountVerification(typ);
            res.VerificationTicket = verificationTicket;
            return res;
        }

        public static SAMLAccountVerification CreateNull() {
            SAMLAccountVerificationType typ = SAMLAccountVerificationType.Null;
            return new SAMLAccountVerification(typ);
        }

        public class SAMLAccountVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(SAMLAccountVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new SAMLAccountVerification(SAMLAccountVerificationType.VerificationTicket)
                    {
                        VerificationTicket = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<VerificationTicket>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(VerificationTicket), new SAMLAccountVerification(SAMLAccountVerificationType.VerificationTicket), "VerificationTicket"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new SAMLAccountVerification(SAMLAccountVerificationType.Saml)
                    {
                        Saml = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Saml>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Saml), new SAMLAccountVerification(SAMLAccountVerificationType.Saml), "Saml"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                SAMLAccountVerification res = (SAMLAccountVerification)value;
                if (SAMLAccountVerificationType.FromString(res.Type).Equals(SAMLAccountVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Saml != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Saml));
                    return;
                }
                if (res.VerificationTicket != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VerificationTicket));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SamlConnection.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class SamlConnectionType
    {
        private SamlConnectionType(string value) { Value = value; }

        public string Value { get; private set; }
        public static SamlConnectionType SAMLConnectionSAMLConnection { get { return new SamlConnectionType("saml_connection_SAMLConnection"); } }
        
        public static SamlConnectionType Null { get { return new SamlConnectionType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(SamlConnectionType v) { return v.Value; }
        public static SamlConnectionType FromString(string v) {
            switch(v) {
                case "saml_connection_SAMLConnection": return SAMLConnectionSAMLConnection;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for SamlConnectionType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((SamlConnectionType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(SamlConnection.SamlConnectionConverter))]
    public class SamlConnection {
        public SamlConnection(SamlConnectionType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public SAMLConnectionSAMLConnection? SAMLConnectionSAMLConnection { get; set; }

        public SamlConnectionType Type { get; set; }


        public static SamlConnection CreateSAMLConnectionSAMLConnection(SAMLConnectionSAMLConnection samlConnectionSAMLConnection) {
            SamlConnectionType typ = SamlConnectionType.SAMLConnectionSAMLConnection;

            SamlConnection res = new SamlConnection(typ);
            res.SAMLConnectionSAMLConnection = samlConnectionSAMLConnection;
            return res;
        }

        public static SamlConnection CreateNull() {
            SamlConnectionType typ = SamlConnectionType.Null;
            return new SamlConnection(typ);
        }

        public class SamlConnectionConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(SamlConnection);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new SamlConnection(SamlConnectionType.SAMLConnectionSAMLConnection)
                    {
                        SAMLConnectionSAMLConnection = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<SAMLConnectionSAMLConnection>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(SAMLConnectionSAMLConnection), new SamlConnection(SamlConnectionType.SAMLConnectionSAMLConnection), "SAMLConnectionSAMLConnection"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                SamlConnection res = (SamlConnection)value;
                if (SamlConnectionType.FromString(res.Type).Equals(SamlConnectionType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.SAMLConnectionSAMLConnection != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SAMLConnectionSAMLConnection));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLConnectionAttributeMapping.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SAMLConnectionAttributeMapping
    {

        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("first_name")]
        public string FirstName { get; set; } = default!;

        [JsonProperty("last_name")]
        public string LastName { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLConnections.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// A list of SAML Connections
    /// </summary>
    public class SAMLConnections
    {

        [JsonProperty("data")]
        public List<SchemasSAMLConnection> Data { get; set; } = default!;

        /// <summary>
        /// Total number of SAML Connections<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLConnectionSAMLConnection.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SAMLConnectionSAMLConnection
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("domain")]
        public string Domain { get; set; } = default!;

        [JsonProperty("active")]
        public bool Active { get; set; } = default!;

        [JsonProperty("provider")]
        public string Provider { get; set; } = default!;

        [JsonProperty("sync_user_attributes")]
        public bool SyncUserAttributes { get; set; } = default!;

        [JsonProperty("allow_subdomains")]
        public bool? AllowSubdomains { get; set; }

        [JsonProperty("allow_idp_initiated")]
        public bool? AllowIdpInitiated { get; set; }

        [JsonProperty("disable_additional_identifications")]
        public bool? DisableAdditionalIdentifications { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLErrorClerkError.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SAMLErrorClerkError
    {

        [JsonProperty("message")]
        public string Message { get; set; } = default!;

        [JsonProperty("long_message")]
        public string LongMessage { get; set; } = default!;

        [JsonProperty("code")]
        public string Code { get; set; } = default!;

        [JsonProperty("meta")]
        public ClerkErrorErrorMeta? Meta { get; set; }

        [JsonProperty("clerk_trace_id")]
        public string? ClerkTraceId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SAMLVerificationStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
        [JsonProperty("failed")]
        Failed,
        [JsonProperty("expired")]
        Expired,
        [JsonProperty("transferable")]
        Transferable,
    }

    public static class SAMLVerificationStatusExtension
    {
        public static string Value(this SAMLVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SAMLVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(SAMLVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SAMLVerificationStatus)
                    {
                        return (SAMLVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SAMLVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SAMLVerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SAMLVerificationStrategy
    {
        [JsonProperty("saml")]
        Saml,
    }

    public static class SAMLVerificationStrategyExtension
    {
        public static string Value(this SAMLVerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SAMLVerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(SAMLVerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SAMLVerificationStrategy)
                    {
                        return (SAMLVerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SAMLVerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SchemasPasskey.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SchemasPasskey
    {

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public SchemasPasskeyObject Object { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of when the passkey was last used.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_used_at")]
        public long LastUsedAt { get; set; } = default!;

        [JsonProperty("verification", NullValueHandling = NullValueHandling.Include)]
        public SchemasPasskeyVerification? Verification { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SchemasPasskeyObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum SchemasPasskeyObject
    {
        [JsonProperty("passkey")]
        Passkey,
    }

    public static class SchemasPasskeyObjectExtension
    {
        public static string Value(this SchemasPasskeyObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SchemasPasskeyObject ToEnum(this string value)
        {
            foreach(var field in typeof(SchemasPasskeyObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SchemasPasskeyObject)
                    {
                        return (SchemasPasskeyObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SchemasPasskeyObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SchemasPasskeyVerification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class SchemasPasskeyVerificationType
    {
        private SchemasPasskeyVerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static SchemasPasskeyVerificationType Passkey { get { return new SchemasPasskeyVerificationType("Passkey"); } }
        
        public static SchemasPasskeyVerificationType Null { get { return new SchemasPasskeyVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(SchemasPasskeyVerificationType v) { return v.Value; }
        public static SchemasPasskeyVerificationType FromString(string v) {
            switch(v) {
                case "Passkey": return Passkey;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for SchemasPasskeyVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((SchemasPasskeyVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(SchemasPasskeyVerification.SchemasPasskeyVerificationConverter))]
    public class SchemasPasskeyVerification {
        public SchemasPasskeyVerification(SchemasPasskeyVerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Passkey? Passkey { get; set; }

        public SchemasPasskeyVerificationType Type { get; set; }


        public static SchemasPasskeyVerification CreatePasskey(Passkey passkey) {
            SchemasPasskeyVerificationType typ = SchemasPasskeyVerificationType.Passkey;

            SchemasPasskeyVerification res = new SchemasPasskeyVerification(typ);
            res.Passkey = passkey;
            return res;
        }

        public static SchemasPasskeyVerification CreateNull() {
            SchemasPasskeyVerificationType typ = SchemasPasskeyVerificationType.Null;
            return new SchemasPasskeyVerification(typ);
        }

        public class SchemasPasskeyVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(SchemasPasskeyVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new SchemasPasskeyVerification(SchemasPasskeyVerificationType.Passkey)
                    {
                        Passkey = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Passkey>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Passkey), new SchemasPasskeyVerification(SchemasPasskeyVerificationType.Passkey), "Passkey"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                SchemasPasskeyVerification res = (SchemasPasskeyVerification)value;
                if (SchemasPasskeyVerificationType.FromString(res.Type).Equals(SchemasPasskeyVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Passkey != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Passkey));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SchemasSAMLConnection.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SchemasSAMLConnection
    {

        [JsonProperty("object")]
        public SchemasSAMLConnectionObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        [JsonProperty("domain")]
        public string Domain { get; set; } = default!;

        [JsonProperty("idp_entity_id", NullValueHandling = NullValueHandling.Include)]
        public string? IdpEntityId { get; set; }

        [JsonProperty("idp_sso_url", NullValueHandling = NullValueHandling.Include)]
        public string? IdpSsoUrl { get; set; }

        [JsonProperty("idp_certificate", NullValueHandling = NullValueHandling.Include)]
        public string? IdpCertificate { get; set; }

        [JsonProperty("idp_metadata_url")]
        public string? IdpMetadataUrl { get; set; } = null;

        [JsonProperty("idp_metadata")]
        public string? IdpMetadata { get; set; } = null;

        [JsonProperty("acs_url")]
        public string AcsUrl { get; set; } = default!;

        [JsonProperty("sp_entity_id")]
        public string SpEntityId { get; set; } = default!;

        [JsonProperty("sp_metadata_url")]
        public string SpMetadataUrl { get; set; } = default!;

        [JsonProperty("organization_id")]
        public string? OrganizationId { get; set; } = null;

        [JsonProperty("attribute_mapping")]
        public SAMLConnectionAttributeMapping? AttributeMapping { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; } = default!;

        [JsonProperty("provider")]
        public string Provider { get; set; } = default!;

        [JsonProperty("user_count")]
        public long UserCount { get; set; } = default!;

        [JsonProperty("sync_user_attributes")]
        public bool SyncUserAttributes { get; set; } = default!;

        [JsonProperty("allow_subdomains")]
        public bool? AllowSubdomains { get; set; }

        [JsonProperty("allow_idp_initiated")]
        public bool? AllowIdpInitiated { get; set; }

        [JsonProperty("disable_additional_identifications")]
        public bool? DisableAdditionalIdentifications { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SchemasSAMLConnectionObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SchemasSAMLConnectionObject
    {
        [JsonProperty("saml_connection")]
        SamlConnection,
    }

    public static class SchemasSAMLConnectionObjectExtension
    {
        public static string Value(this SchemasSAMLConnectionObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SchemasSAMLConnectionObject ToEnum(this string value)
        {
            foreach(var field in typeof(SchemasSAMLConnectionObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SchemasSAMLConnectionObject)
                    {
                        return (SchemasSAMLConnectionObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SchemasSAMLConnectionObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Security.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    
    public class Security
    {

        [SpeakeasyMetadata("security:scheme=true,type=http,subType=bearer,name=Authorization")]
        public string? BearerAuth { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Session.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Session
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public SessionObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        [JsonProperty("client_id")]
        public string ClientId { get; set; } = default!;

        [JsonProperty("actor")]
        public Models.Components.Actor? Actor { get; set; } = null;

        [JsonProperty("status")]
        public Models.Components.Status Status { get; set; } = default!;

        [JsonProperty("last_active_organization_id")]
        public string? LastActiveOrganizationId { get; set; } = null;

        [JsonProperty("last_active_at")]
        public long LastActiveAt { get; set; } = default!;

        [JsonProperty("latest_activity")]
        public SessionActivityResponse? LatestActivity { get; set; } = null;

        /// <summary>
        /// Unix timestamp of expiration.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("expire_at")]
        public long ExpireAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of abandonment.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("abandon_at")]
        public long AbandonAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SessionActivityResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SessionActivityResponse
    {

        [JsonProperty("object")]
        public string Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("device_type")]
        public string? DeviceType { get; set; }

        [JsonProperty("is_mobile")]
        public bool IsMobile { get; set; } = default!;

        [JsonProperty("browser_name")]
        public string? BrowserName { get; set; }

        [JsonProperty("browser_version")]
        public string? BrowserVersion { get; set; }

        [JsonProperty("ip_address")]
        public string? IpAddress { get; set; }

        [JsonProperty("city")]
        public string? City { get; set; }

        [JsonProperty("country")]
        public string? Country { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SessionObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum SessionObject
    {
        [JsonProperty("session")]
        Session,
    }

    public static class SessionObjectExtension
    {
        public static string Value(this SessionObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SessionObject ToEnum(this string value)
        {
            foreach(var field in typeof(SessionObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SessionObject)
                    {
                        return (SessionObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SessionObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SignInToken.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Success
    /// </summary>
    public class SignInToken
    {

        [JsonProperty("object")]
        public SignInTokenObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("status")]
        public SignInTokenStatus Status { get; set; } = default!;

        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        [JsonProperty("token")]
        public string? Token { get; set; }

        [JsonProperty("url")]
        public string? Url { get; set; } = null;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SignInTokenObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SignInTokenObject
    {
        [JsonProperty("sign_in_token")]
        SignInToken,
    }

    public static class SignInTokenObjectExtension
    {
        public static string Value(this SignInTokenObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SignInTokenObject ToEnum(this string value)
        {
            foreach(var field in typeof(SignInTokenObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SignInTokenObject)
                    {
                        return (SignInTokenObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SignInTokenObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SignInTokenStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SignInTokenStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class SignInTokenStatusExtension
    {
        public static string Value(this SignInTokenStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SignInTokenStatus ToEnum(this string value)
        {
            foreach(var field in typeof(SignInTokenStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SignInTokenStatus)
                    {
                        return (SignInTokenStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SignInTokenStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SignUp.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class SignUp
    {

        [JsonProperty("object")]
        public SignUpObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("status")]
        public SignUpStatus Status { get; set; } = default!;

        [JsonProperty("required_fields")]
        public List<string> RequiredFields { get; set; } = default!;

        [JsonProperty("optional_fields")]
        public List<string> OptionalFields { get; set; } = default!;

        [JsonProperty("missing_fields")]
        public List<string> MissingFields { get; set; } = default!;

        [JsonProperty("unverified_fields")]
        public List<string> UnverifiedFields { get; set; } = default!;

        [JsonProperty("verifications")]
        public SignUpVerifications Verifications { get; set; } = default!;

        [JsonProperty("username", NullValueHandling = NullValueHandling.Include)]
        public string? Username { get; set; }

        [JsonProperty("email_address", NullValueHandling = NullValueHandling.Include)]
        public string? EmailAddress { get; set; }

        [JsonProperty("phone_number", NullValueHandling = NullValueHandling.Include)]
        public string? PhoneNumber { get; set; }

        [JsonProperty("web3_wallet", NullValueHandling = NullValueHandling.Include)]
        public string? Web3Wallet { get; set; }

        [JsonProperty("password_enabled")]
        public bool PasswordEnabled { get; set; } = default!;

        [JsonProperty("first_name", NullValueHandling = NullValueHandling.Include)]
        public string? FirstName { get; set; }

        [JsonProperty("last_name", NullValueHandling = NullValueHandling.Include)]
        public string? LastName { get; set; }

        [JsonProperty("unsafe_metadata")]
        public Dictionary<string, object>? UnsafeMetadata { get; set; }

        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        [JsonProperty("custom_action")]
        public bool CustomAction { get; set; } = default!;

        [JsonProperty("external_id", NullValueHandling = NullValueHandling.Include)]
        public string? ExternalId { get; set; }

        [JsonProperty("created_session_id", NullValueHandling = NullValueHandling.Include)]
        public string? CreatedSessionId { get; set; }

        [JsonProperty("created_user_id", NullValueHandling = NullValueHandling.Include)]
        public string? CreatedUserId { get; set; }

        /// <summary>
        /// Unix timestamp at which the user abandoned the sign up attempt.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("abandon_at")]
        public long AbandonAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp at which the user accepted the legal requirements.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("legal_accepted_at", NullValueHandling = NullValueHandling.Include)]
        public long? LegalAcceptedAt { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("external_account")]
        public SignUpExternalAccount? ExternalAccount { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SignUpExternalAccount.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using System;
    [Obsolete("This will be removed in a future release, please migrate away from it as soon as possible.")]
    public class SignUpExternalAccount
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SignUpObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SignUpObject
    {
        [JsonProperty("sign_up_attempt")]
        SignUpAttempt,
    }

    public static class SignUpObjectExtension
    {
        public static string Value(this SignUpObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SignUpObject ToEnum(this string value)
        {
            foreach(var field in typeof(SignUpObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SignUpObject)
                    {
                        return (SignUpObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SignUpObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SignUpStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum SignUpStatus
    {
        [JsonProperty("missing_requirements")]
        MissingRequirements,
        [JsonProperty("complete")]
        Complete,
        [JsonProperty("abandoned")]
        Abandoned,
    }

    public static class SignUpStatusExtension
    {
        public static string Value(this SignUpStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static SignUpStatus ToEnum(this string value)
        {
            foreach(var field in typeof(SignUpStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is SignUpStatus)
                    {
                        return (SignUpStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum SignUpStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SignUpVerification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class SignUpVerification
    {

        [JsonProperty("next_action")]
        public NextAction? NextAction { get; set; }

        [JsonProperty("supported_strategies")]
        public List<string>? SupportedStrategies { get; set; }

        [JsonProperty("additionalProperties")]
        public Dictionary<string, object>? AdditionalProperties { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/SignUpVerifications.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SignUpVerifications
    {

        [JsonProperty("email_address", NullValueHandling = NullValueHandling.Include)]
        public SignUpVerification? EmailAddress { get; set; }

        [JsonProperty("phone_number", NullValueHandling = NullValueHandling.Include)]
        public SignUpVerification? PhoneNumber { get; set; }

        [JsonProperty("web3_wallet", NullValueHandling = NullValueHandling.Include)]
        public SignUpVerification? Web3Wallet { get; set; }

        [JsonProperty("external_account", NullValueHandling = NullValueHandling.Include)]
        public ExternalAccount? ExternalAccount { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Status.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Status
    {
        [JsonProperty("active")]
        Active,
        [JsonProperty("revoked")]
        Revoked,
        [JsonProperty("ended")]
        Ended,
        [JsonProperty("expired")]
        Expired,
        [JsonProperty("removed")]
        Removed,
        [JsonProperty("abandoned")]
        Abandoned,
        [JsonProperty("replaced")]
        Replaced,
    }

    public static class StatusExtension
    {
        public static string Value(this Status value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Status ToEnum(this string value)
        {
            foreach(var field in typeof(Status).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Status)
                    {
                        return (Status)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Status");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Strategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Strategy
    {
        [JsonProperty("phone_code")]
        PhoneCode,
        [JsonProperty("email_code")]
        EmailCode,
        [JsonProperty("reset_password_email_code")]
        ResetPasswordEmailCode,
    }

    public static class StrategyExtension
    {
        public static string Value(this Strategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Strategy ToEnum(this string value)
        {
            foreach(var field in typeof(Strategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Strategy)
                    {
                        return (Strategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Strategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/SvixURL.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Response that contains a temporary Svix URL to access management dashboard
    /// </summary>
    public class SvixURL
    {

        [JsonProperty("svix_url")]
        public string SvixUrl { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Template.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class Template
    {

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public TemplateObject? Object { get; set; }

        /// <summary>
        /// the id of the instance the template belongs to
        /// </summary>
        [JsonProperty("instance_id")]
        public string? InstanceId { get; set; } = null;

        /// <summary>
        /// whether this is a system (default) or user overridden) template
        /// </summary>
        [JsonProperty("resource_type")]
        public string? ResourceType { get; set; }

        /// <summary>
        /// whether this is an email or SMS template
        /// </summary>
        [JsonProperty("template_type")]
        public string? TemplateType { get; set; }

        /// <summary>
        /// user-friendly name of the template
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }

        /// <summary>
        /// machine-friendly name of the template
        /// </summary>
        [JsonProperty("slug")]
        public string? Slug { get; set; }

        /// <summary>
        /// position with the listing of templates
        /// </summary>
        [JsonProperty("position")]
        public long? Position { get; set; }

        /// <summary>
        /// whether this template can be reverted to the corresponding system default
        /// </summary>
        [JsonProperty("can_revert")]
        public bool? CanRevert { get; set; }

        /// <summary>
        /// whether this template can be deleted
        /// </summary>
        [JsonProperty("can_delete")]
        public bool? CanDelete { get; set; }

        /// <summary>
        /// whether this template can be enabled or disabled, true only for notification SMS templates
        /// </summary>
        [JsonProperty("can_toggle")]
        public bool? CanToggle { get; set; }

        /// <summary>
        /// email subject
        /// </summary>
        [JsonProperty("subject")]
        public string? Subject { get; set; } = null;

        /// <summary>
        /// the editor markup used to generate the body of the template
        /// </summary>
        [JsonProperty("markup")]
        public string? Markup { get; set; }

        /// <summary>
        /// the template body before variable interpolation
        /// </summary>
        [JsonProperty("body")]
        public string? Body { get; set; }

        /// <summary>
        /// list of variables that are available for use in the template body
        /// </summary>
        [JsonProperty("available_variables")]
        public List<string>? AvailableVariables { get; set; }

        /// <summary>
        /// list of variables that must be contained in the template body
        /// </summary>
        [JsonProperty("required_variables")]
        public List<string>? RequiredVariables { get; set; }

        [JsonProperty("from_email_name")]
        public string? FromEmailName { get; set; }

        [JsonProperty("reply_to_email_name")]
        public string? ReplyToEmailName { get; set; }

        [JsonProperty("delivered_by_clerk")]
        public bool? DeliveredByClerk { get; set; }

        [JsonProperty("enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long? UpdatedAt { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long? CreatedAt { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/TemplateObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum TemplateObject
    {
        [JsonProperty("template")]
        Template,
    }

    public static class TemplateObjectExtension
    {
        public static string Value(this TemplateObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TemplateObject ToEnum(this string value)
        {
            foreach(var field in typeof(TemplateObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TemplateObject)
                    {
                        return (TemplateObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TemplateObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/TestingToken.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// A Testing Token
    /// </summary>
    public class TestingToken
    {

        [JsonProperty("object")]
        public TestingTokenObject Object { get; set; } = default!;

        /// <summary>
        /// The actual token. This value is meant to be passed in the `__clerk_testing_token` query parameter with requests to the Frontend API.
        /// </summary>
        [JsonProperty("token")]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of the token&apos;s expiration time.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("expires_at")]
        public long ExpiresAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/TestingTokenObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum TestingTokenObject
    {
        [JsonProperty("testing_token")]
        TestingToken,
    }

    public static class TestingTokenObjectExtension
    {
        public static string Value(this TestingTokenObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TestingTokenObject ToEnum(this string value)
        {
            foreach(var field in typeof(TestingTokenObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TestingTokenObject)
                    {
                        return (TestingTokenObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TestingTokenObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Ticket.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Ticket
    {

        [JsonProperty("status")]
        public TicketVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public TicketVerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/TicketVerificationSAMLAccountStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum TicketVerificationSAMLAccountStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
        [JsonProperty("expired")]
        Expired,
    }

    public static class TicketVerificationSAMLAccountStatusExtension
    {
        public static string Value(this TicketVerificationSAMLAccountStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TicketVerificationSAMLAccountStatus ToEnum(this string value)
        {
            foreach(var field in typeof(TicketVerificationSAMLAccountStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TicketVerificationSAMLAccountStatus)
                    {
                        return (TicketVerificationSAMLAccountStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TicketVerificationSAMLAccountStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/TicketVerificationSAMLAccountStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum TicketVerificationSAMLAccountStrategy
    {
        [JsonProperty("ticket")]
        Ticket,
    }

    public static class TicketVerificationSAMLAccountStrategyExtension
    {
        public static string Value(this TicketVerificationSAMLAccountStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TicketVerificationSAMLAccountStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(TicketVerificationSAMLAccountStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TicketVerificationSAMLAccountStrategy)
                    {
                        return (TicketVerificationSAMLAccountStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TicketVerificationSAMLAccountStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/TicketVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum TicketVerificationStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
        [JsonProperty("expired")]
        Expired,
    }

    public static class TicketVerificationStatusExtension
    {
        public static string Value(this TicketVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TicketVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(TicketVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TicketVerificationStatus)
                    {
                        return (TicketVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TicketVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/TicketVerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum TicketVerificationStrategy
    {
        [JsonProperty("ticket")]
        Ticket,
    }

    public static class TicketVerificationStrategyExtension
    {
        public static string Value(this TicketVerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TicketVerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(TicketVerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TicketVerificationStrategy)
                    {
                        return (TicketVerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TicketVerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/TotalCount.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Success
    /// </summary>
    public class TotalCount
    {

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public TotalCountObject Object { get; set; } = default!;

        [JsonProperty("total_count")]
        public long TotalCountValue { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/TotalCountObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum TotalCountObject
    {
        [JsonProperty("total_count")]
        TotalCount,
    }

    public static class TotalCountObjectExtension
    {
        public static string Value(this TotalCountObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TotalCountObject ToEnum(this string value)
        {
            foreach(var field in typeof(TotalCountObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TotalCountObject)
                    {
                        return (TotalCountObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TotalCountObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/User.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class User
    {

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public UserObject? Object { get; set; }

        [JsonProperty("external_id")]
        public string? ExternalId { get; set; } = null;

        [JsonProperty("primary_email_address_id")]
        public string? PrimaryEmailAddressId { get; set; } = null;

        [JsonProperty("primary_phone_number_id")]
        public string? PrimaryPhoneNumberId { get; set; } = null;

        [JsonProperty("primary_web3_wallet_id")]
        public string? PrimaryWeb3WalletId { get; set; } = null;

        [JsonProperty("username")]
        public string? Username { get; set; } = null;

        [JsonProperty("first_name")]
        public string? FirstName { get; set; } = null;

        [JsonProperty("last_name")]
        public string? LastName { get; set; } = null;

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("profile_image_url")]
        public string? ProfileImageUrl { get; set; }

        [JsonProperty("image_url")]
        public string? ImageUrl { get; set; }

        [JsonProperty("has_image")]
        public bool? HasImage { get; set; }

        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        [JsonProperty("unsafe_metadata")]
        public Dictionary<string, object>? UnsafeMetadata { get; set; }

        [JsonProperty("email_addresses")]
        public List<EmailAddress>? EmailAddresses { get; set; }

        [JsonProperty("phone_numbers")]
        public List<PhoneNumber>? PhoneNumbers { get; set; }

        [JsonProperty("web3_wallets")]
        public List<Web3Wallet>? Web3Wallets { get; set; }

        [JsonProperty("passkeys")]
        public List<SchemasPasskey>? Passkeys { get; set; }

        [JsonProperty("password_enabled")]
        public bool? PasswordEnabled { get; set; }

        [JsonProperty("two_factor_enabled")]
        public bool? TwoFactorEnabled { get; set; }

        [JsonProperty("totp_enabled")]
        public bool? TotpEnabled { get; set; }

        [JsonProperty("backup_code_enabled")]
        public bool? BackupCodeEnabled { get; set; }

        /// <summary>
        /// Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("mfa_enabled_at")]
        public long? MfaEnabledAt { get; set; } = null;

        /// <summary>
        /// Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("mfa_disabled_at")]
        public long? MfaDisabledAt { get; set; } = null;

        [JsonProperty("external_accounts")]
        public List<ExternalAccounts>? ExternalAccounts { get; set; }

        [JsonProperty("saml_accounts")]
        public List<SAMLAccount>? SamlAccounts { get; set; }

        /// <summary>
        /// Unix timestamp of last sign-in.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_sign_in_at")]
        public long? LastSignInAt { get; set; } = null;

        /// <summary>
        /// Flag to denote whether user is banned or not.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("banned")]
        public bool? Banned { get; set; }

        /// <summary>
        /// Flag to denote whether user is currently locked, i.e. restricted from signing in or not.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("locked")]
        public bool? Locked { get; set; }

        /// <summary>
        /// The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("lockout_expires_in_seconds")]
        public long? LockoutExpiresInSeconds { get; set; } = null;

        /// <summary>
        /// The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("verification_attempts_remaining")]
        public long? VerificationAttemptsRemaining { get; set; } = null;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long? UpdatedAt { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// If enabled, user can delete themselves via FAPI.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("delete_self_enabled")]
        public bool? DeleteSelfEnabled { get; set; }

        /// <summary>
        /// If enabled, user can create organizations via FAPI.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("create_organization_enabled")]
        public bool? CreateOrganizationEnabled { get; set; }

        /// <summary>
        /// The maximum number of organizations the user can create. 0 means unlimited.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("create_organizations_limit")]
        public long? CreateOrganizationsLimit { get; set; } = null;

        /// <summary>
        /// Unix timestamp of the latest session activity, with day precision.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_active_at")]
        public long? LastActiveAt { get; set; } = null;

        /// <summary>
        /// Unix timestamp of when the user accepted the legal requirements.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("legal_accepted_at")]
        public long? LegalAcceptedAt { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/UserObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum UserObject
    {
        [JsonProperty("user")]
        User,
    }

    public static class UserObjectExtension
    {
        public static string Value(this UserObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static UserObject ToEnum(this string value)
        {
            foreach(var field in typeof(UserObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is UserObject)
                    {
                        return (UserObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum UserObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Verification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class VerificationType
    {
        private VerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static VerificationType Otp { get { return new VerificationType("OTP"); } }
        
        public static VerificationType Admin { get { return new VerificationType("Admin"); } }
        
        public static VerificationType FromOAuth { get { return new VerificationType("FromOAuth"); } }
        
        public static VerificationType Ticket { get { return new VerificationType("Ticket"); } }
        
        public static VerificationType Null { get { return new VerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(VerificationType v) { return v.Value; }
        public static VerificationType FromString(string v) {
            switch(v) {
                case "OTP": return Otp;
                case "Admin": return Admin;
                case "FromOAuth": return FromOAuth;
                case "Ticket": return Ticket;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for VerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((VerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Verification.VerificationConverter))]
    public class Verification {
        public Verification(VerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Otp? Otp { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Admin? Admin { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public FromOAuth? FromOAuth { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Ticket? Ticket { get; set; }

        public VerificationType Type { get; set; }


        public static Verification CreateOtp(Otp otp) {
            VerificationType typ = VerificationType.Otp;

            Verification res = new Verification(typ);
            res.Otp = otp;
            return res;
        }

        public static Verification CreateAdmin(Admin admin) {
            VerificationType typ = VerificationType.Admin;

            Verification res = new Verification(typ);
            res.Admin = admin;
            return res;
        }

        public static Verification CreateFromOAuth(FromOAuth fromOAuth) {
            VerificationType typ = VerificationType.FromOAuth;

            Verification res = new Verification(typ);
            res.FromOAuth = fromOAuth;
            return res;
        }

        public static Verification CreateTicket(Ticket ticket) {
            VerificationType typ = VerificationType.Ticket;

            Verification res = new Verification(typ);
            res.Ticket = ticket;
            return res;
        }

        public static Verification CreateNull() {
            VerificationType typ = VerificationType.Null;
            return new Verification(typ);
        }

        public class VerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Verification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Verification(VerificationType.Otp)
                    {
                        Otp = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Otp>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Otp), new Verification(VerificationType.Otp), "Otp"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Verification(VerificationType.Admin)
                    {
                        Admin = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Admin>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Admin), new Verification(VerificationType.Admin), "Admin"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Verification(VerificationType.Ticket)
                    {
                        Ticket = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Ticket>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Ticket), new Verification(VerificationType.Ticket), "Ticket"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Verification(VerificationType.FromOAuth)
                    {
                        FromOAuth = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<FromOAuth>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(FromOAuth), new Verification(VerificationType.FromOAuth), "FromOAuth"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Verification res = (Verification)value;
                if (VerificationType.FromString(res.Type).Equals(VerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Otp != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Otp));
                    return;
                }
                if (res.Admin != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Admin));
                    return;
                }
                if (res.FromOAuth != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.FromOAuth));
                    return;
                }
                if (res.Ticket != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Ticket));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/VerificationAdmin.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerificationAdmin
    {

        [JsonProperty("status")]
        public AdminVerificationPhoneNumberStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public AdminVerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/VerificationError.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class VerificationErrorType
    {
        private VerificationErrorType(string value) { Value = value; }

        public string Value { get; private set; }
        public static VerificationErrorType SAMLErrorClerkError { get { return new VerificationErrorType("SAML_error_ClerkError"); } }
        
        public static VerificationErrorType Null { get { return new VerificationErrorType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(VerificationErrorType v) { return v.Value; }
        public static VerificationErrorType FromString(string v) {
            switch(v) {
                case "SAML_error_ClerkError": return SAMLErrorClerkError;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for VerificationErrorType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((VerificationErrorType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(VerificationError.VerificationErrorConverter))]
    public class VerificationError {
        public VerificationError(VerificationErrorType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public SAMLErrorClerkError? SAMLErrorClerkError { get; set; }

        public VerificationErrorType Type { get; set; }


        public static VerificationError CreateSAMLErrorClerkError(SAMLErrorClerkError samlErrorClerkError) {
            VerificationErrorType typ = VerificationErrorType.SAMLErrorClerkError;

            VerificationError res = new VerificationError(typ);
            res.SAMLErrorClerkError = samlErrorClerkError;
            return res;
        }

        public static VerificationError CreateNull() {
            VerificationErrorType typ = VerificationErrorType.Null;
            return new VerificationError(typ);
        }

        public class VerificationErrorConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(VerificationError);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new VerificationError(VerificationErrorType.SAMLErrorClerkError)
                    {
                        SAMLErrorClerkError = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<SAMLErrorClerkError>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(SAMLErrorClerkError), new VerificationError(VerificationErrorType.SAMLErrorClerkError), "SAMLErrorClerkError"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                VerificationError res = (VerificationError)value;
                if (VerificationErrorType.FromString(res.Type).Equals(VerificationErrorType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.SAMLErrorClerkError != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SAMLErrorClerkError));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/VerificationOTP.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerificationOTP
    {

        [JsonProperty("status")]
        public OTPVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public OTPVerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/VerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum VerificationStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
        [JsonProperty("failed")]
        Failed,
        [JsonProperty("expired")]
        Expired,
    }

    public static class VerificationStatusExtension
    {
        public static string Value(this VerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static VerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(VerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is VerificationStatus)
                    {
                        return (VerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum VerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/VerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum VerificationStrategy
    {
        [JsonProperty("admin")]
        Admin,
    }

    public static class VerificationStrategyExtension
    {
        public static string Value(this VerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static VerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(VerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is VerificationStrategy)
                    {
                        return (VerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum VerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/VerificationTicket.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerificationTicket
    {

        [JsonProperty("status")]
        public TicketVerificationSAMLAccountStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public TicketVerificationSAMLAccountStrategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntries.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// List of waitlist entries
    /// </summary>
    public class WaitlistEntries
    {

        [JsonProperty("data")]
        public List<WaitlistEntry> Data { get; set; } = default!;

        /// <summary>
        /// Total number of waitlist entries
        /// </summary>
        [JsonProperty("total_count")]
        public long TotalCount { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntry.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class WaitlistEntry
    {

        [JsonProperty("object")]
        public WaitlistEntryObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("status")]
        public WaitlistEntryStatus Status { get; set; } = default!;

        /// <summary>
        /// Indicates if the waitlist entry is locked. Locked entries are being processed in a batch action and are unavailable for other actions.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("is_locked")]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        [JsonProperty("invitation")]
        public WaitlistEntryInvitation? Invitation { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitation.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class WaitlistEntryInvitation
    {

        [JsonProperty("object")]
        public WaitlistEntryInvitationObject Object { get; set; } = default!;

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("revoked")]
        public bool? Revoked { get; set; }

        [JsonProperty("status")]
        public WaitlistEntryInvitationStatus Status { get; set; } = default!;

        [JsonProperty("url")]
        public string? Url { get; set; }

        /// <summary>
        /// Unix timestamp of expiration.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("expires_at")]
        public long? ExpiresAt { get; set; } = null;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitationObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum WaitlistEntryInvitationObject
    {
        [JsonProperty("invitation")]
        Invitation,
    }

    public static class WaitlistEntryInvitationObjectExtension
    {
        public static string Value(this WaitlistEntryInvitationObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static WaitlistEntryInvitationObject ToEnum(this string value)
        {
            foreach(var field in typeof(WaitlistEntryInvitationObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is WaitlistEntryInvitationObject)
                    {
                        return (WaitlistEntryInvitationObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum WaitlistEntryInvitationObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntryInvitationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum WaitlistEntryInvitationStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
        [JsonProperty("expired")]
        Expired,
    }

    public static class WaitlistEntryInvitationStatusExtension
    {
        public static string Value(this WaitlistEntryInvitationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static WaitlistEntryInvitationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(WaitlistEntryInvitationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is WaitlistEntryInvitationStatus)
                    {
                        return (WaitlistEntryInvitationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum WaitlistEntryInvitationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntryObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum WaitlistEntryObject
    {
        [JsonProperty("waitlist_entry")]
        WaitlistEntry,
    }

    public static class WaitlistEntryObjectExtension
    {
        public static string Value(this WaitlistEntryObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static WaitlistEntryObject ToEnum(this string value)
        {
            foreach(var field in typeof(WaitlistEntryObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is WaitlistEntryObject)
                    {
                        return (WaitlistEntryObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum WaitlistEntryObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/WaitlistEntryStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum WaitlistEntryStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("invited")]
        Invited,
        [JsonProperty("rejected")]
        Rejected,
        [JsonProperty("completed")]
        Completed,
    }

    public static class WaitlistEntryStatusExtension
    {
        public static string Value(this WaitlistEntryStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static WaitlistEntryStatus ToEnum(this string value)
        {
            foreach(var field in typeof(WaitlistEntryStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is WaitlistEntryStatus)
                    {
                        return (WaitlistEntryStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum WaitlistEntryStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Web3Signature.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Web3Signature
    {

        [JsonProperty("status")]
        public Web3SignatureVerificationStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public Web3SignatureVerificationStrategy Strategy { get; set; } = default!;

        [JsonProperty("nonce")]
        public string? Nonce { get; set; } = null;

        [JsonProperty("message")]
        public string? Message { get; set; } = null;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Web3SignatureVerificationStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Web3SignatureVerificationStatus
    {
        [JsonProperty("unverified")]
        Unverified,
        [JsonProperty("verified")]
        Verified,
        [JsonProperty("failed")]
        Failed,
        [JsonProperty("expired")]
        Expired,
    }

    public static class Web3SignatureVerificationStatusExtension
    {
        public static string Value(this Web3SignatureVerificationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Web3SignatureVerificationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(Web3SignatureVerificationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Web3SignatureVerificationStatus)
                    {
                        return (Web3SignatureVerificationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Web3SignatureVerificationStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Web3SignatureVerificationStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Web3SignatureVerificationStrategy
    {
        [JsonProperty("web3_metamask_signature")]
        Web3MetamaskSignature,
        [JsonProperty("web3_coinbase_wallet_signature")]
        Web3CoinbaseWalletSignature,
        [JsonProperty("web3_okx_wallet_signature")]
        Web3OkxWalletSignature,
    }

    public static class Web3SignatureVerificationStrategyExtension
    {
        public static string Value(this Web3SignatureVerificationStrategy value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Web3SignatureVerificationStrategy ToEnum(this string value)
        {
            foreach(var field in typeof(Web3SignatureVerificationStrategy).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Web3SignatureVerificationStrategy)
                    {
                        return (Web3SignatureVerificationStrategy)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Web3SignatureVerificationStrategy");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Web3Wallet.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Web3Wallet
    {

        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public Web3WalletObject Object { get; set; } = default!;

        [JsonProperty("web3_wallet")]
        public string Web3WalletValue { get; set; } = default!;

        [JsonProperty("verification", NullValueHandling = NullValueHandling.Include)]
        public Web3WalletVerification? Verification { get; set; }

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Web3WalletObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    public enum Web3WalletObject
    {
        [JsonProperty("web3_wallet")]
        Web3Wallet,
    }

    public static class Web3WalletObjectExtension
    {
        public static string Value(this Web3WalletObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Web3WalletObject ToEnum(this string value)
        {
            foreach(var field in typeof(Web3WalletObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Web3WalletObject)
                    {
                        return (Web3WalletObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Web3WalletObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Components/Web3WalletVerification.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class Web3WalletVerificationType
    {
        private Web3WalletVerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static Web3WalletVerificationType Web3Signature { get { return new Web3WalletVerificationType("Web3Signature"); } }
        
        public static Web3WalletVerificationType Web3WalletVerificationAdmin { get { return new Web3WalletVerificationType("Web3Wallet_verification_Admin"); } }
        
        public static Web3WalletVerificationType Null { get { return new Web3WalletVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(Web3WalletVerificationType v) { return v.Value; }
        public static Web3WalletVerificationType FromString(string v) {
            switch(v) {
                case "Web3Signature": return Web3Signature;
                case "Web3Wallet_verification_Admin": return Web3WalletVerificationAdmin;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for Web3WalletVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((Web3WalletVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Web3WalletVerification.Web3WalletVerificationConverter))]
    public class Web3WalletVerification {
        public Web3WalletVerification(Web3WalletVerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Web3Signature? Web3Signature { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Web3WalletVerificationAdmin? Web3WalletVerificationAdmin { get; set; }

        public Web3WalletVerificationType Type { get; set; }


        public static Web3WalletVerification CreateWeb3Signature(Web3Signature web3Signature) {
            Web3WalletVerificationType typ = Web3WalletVerificationType.Web3Signature;

            Web3WalletVerification res = new Web3WalletVerification(typ);
            res.Web3Signature = web3Signature;
            return res;
        }

        public static Web3WalletVerification CreateWeb3WalletVerificationAdmin(Web3WalletVerificationAdmin web3WalletVerificationAdmin) {
            Web3WalletVerificationType typ = Web3WalletVerificationType.Web3WalletVerificationAdmin;

            Web3WalletVerification res = new Web3WalletVerification(typ);
            res.Web3WalletVerificationAdmin = web3WalletVerificationAdmin;
            return res;
        }

        public static Web3WalletVerification CreateNull() {
            Web3WalletVerificationType typ = Web3WalletVerificationType.Null;
            return new Web3WalletVerification(typ);
        }

        public class Web3WalletVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Web3WalletVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Web3WalletVerification(Web3WalletVerificationType.Web3WalletVerificationAdmin)
                    {
                        Web3WalletVerificationAdmin = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Web3WalletVerificationAdmin>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Web3WalletVerificationAdmin), new Web3WalletVerification(Web3WalletVerificationType.Web3WalletVerificationAdmin), "Web3WalletVerificationAdmin"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Web3WalletVerification(Web3WalletVerificationType.Web3Signature)
                    {
                        Web3Signature = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Web3Signature>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Web3Signature), new Web3WalletVerification(Web3WalletVerificationType.Web3Signature), "Web3Signature"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Web3WalletVerification res = (Web3WalletVerification)value;
                if (Web3WalletVerificationType.FromString(res.Type).Equals(Web3WalletVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Web3Signature != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Web3Signature));
                    return;
                }
                if (res.Web3WalletVerificationAdmin != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Web3WalletVerificationAdmin));
                    return;
                }

            }

        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Components/Web3WalletVerificationAdmin.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class Web3WalletVerificationAdmin
    {

        [JsonProperty("status")]
        public AdminVerificationWeb3WalletStatus Status { get; set; } = default!;

        [JsonProperty("strategy")]
        public AdminVerificationWeb3WalletStrategy Strategy { get; set; } = default!;

        [JsonProperty("attempts", NullValueHandling = NullValueHandling.Include)]
        public long? Attempts { get; set; }

        [JsonProperty("expire_at", NullValueHandling = NullValueHandling.Include)]
        public long? ExpireAt { get; set; }

        [JsonProperty("verified_at_client")]
        public string? VerifiedAtClient { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Errors/ClerkErrors.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Errors
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    /// <summary>
    /// Request was not successful
    /// </summary>
    public class ClerkErrors : Exception
    {

        [JsonProperty("errors")]
        public List<ClerkError> Errors { get; set; } = default!;

        [JsonProperty("meta")]
        public Models.Errors.Meta? Meta { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Errors/Meta.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Errors
{
    using Clerk.BackendAPI.Utils;
    
    public class Meta
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Errors/SDKError.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Errors
{
    using System;
    using System.Net.Http;

    public class SDKError : Exception
    {

        public override string Message { get; }
        public HttpRequestMessage Request { get; set; }
        public HttpResponseMessage Response { get; set; }
        public SDKError(string message, HttpRequestMessage request, HttpResponseMessage response)
        {
            Message = message;
            Request = request;
            Response = response;
        }

        public override string ToString(){
            return Message + ": Status " + Response.StatusCode;
        }

    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/Actor.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// The actor payload. It needs to include a sub property which should contain the ID of the actor.<br/>
    /// 
    /// <remarks>
    /// This whole payload will be also included in the JWT session token.
    /// </remarks>
    /// </summary>
    public class Actor
    {

        /// <summary>
        /// The ID of the actor.
        /// </summary>
        [JsonProperty("sub")]
        public string Sub { get; set; } = default!;

        [JsonProperty("additionalProperties")]
        public Dictionary<string, object>? AdditionalProperties { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/AddDomainRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class AddDomainRequestBody
    {

        /// <summary>
        /// The new domain name. Can contain the port for development instances.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Marks the new domain as satellite. Only `true` is accepted at the moment.
        /// </summary>
        [JsonProperty("is_satellite")]
        public bool IsSatellite { get; set; } = default!;

        /// <summary>
        /// The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
        /// </summary>
        [JsonProperty("proxy_url")]
        public string? ProxyUrl { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/AddDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class AddDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A domain
        /// </summary>
        public Domain? Domain { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/AttributeMapping.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Define the attribute name mapping between Identity Provider and Clerk&apos;s user properties
    /// </summary>
    public class AttributeMapping
    {

        [JsonProperty("user_id")]
        public string? UserId { get; set; }

        [JsonProperty("email_address")]
        public string? EmailAddress { get; set; }

        [JsonProperty("first_name")]
        public string? FirstName { get; set; }

        [JsonProperty("last_name")]
        public string? LastName { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/BanUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class BanUserRequest
    {

        /// <summary>
        /// The ID of the user to ban
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/BanUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class BanUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ChangeProductionInstanceDomainRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ChangeProductionInstanceDomainRequestBody
    {

        /// <summary>
        /// The new home URL of the production instance e.g. https://www.example.com
        /// </summary>
        [JsonProperty("home_url")]
        public string? HomeUrl { get; set; }

        /// <summary>
        /// Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and<br/>
        /// 
        /// <remarks>
        /// will be stored as part of the domain. This is useful for supporting multiple apps (one primary and<br/>
        /// multiple secondaries) on the same root domain (eTLD+1).
        /// </remarks>
        /// </summary>
        [JsonProperty("is_secondary")]
        public bool? IsSecondary { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ChangeProductionInstanceDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ChangeProductionInstanceDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/Claims.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    /// <summary>
    /// JWT template claims in JSON format
    /// </summary>
    public class Claims
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CodeType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum CodeType
    {
        [JsonProperty("totp")]
        Totp,
        [JsonProperty("backup_code")]
        BackupCode,
    }

    public static class CodeTypeExtension
    {
        public static string Value(this CodeType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static CodeType ToEnum(this string value)
        {
            foreach(var field in typeof(CodeType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is CodeType)
                    {
                        return (CodeType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum CodeType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateActorTokenRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateActorTokenRequestBody
    {

        /// <summary>
        /// The ID of the user being impersonated.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The actor payload. It needs to include a sub property which should contain the ID of the actor.<br/>
        /// 
        /// <remarks>
        /// This whole payload will be also included in the JWT session token.
        /// </remarks>
        /// </summary>
        [JsonProperty("actor")]
        public Models.Operations.Actor Actor { get; set; } = default!;

        /// <summary>
        /// Optional parameter to specify the life duration of the actor token in seconds.<br/>
        /// 
        /// <remarks>
        /// By default, the duration is 1 hour.
        /// </remarks>
        /// </summary>
        [JsonProperty("expires_in_seconds")]
        public long? ExpiresInSeconds { get; set; } = 3600;

        /// <summary>
        /// The maximum duration that the session which will be created by the generated actor token should last.<br/>
        /// 
        /// <remarks>
        /// By default, the duration of a session created via an actor token, lasts 30 minutes.
        /// </remarks>
        /// </summary>
        [JsonProperty("session_max_duration_in_seconds")]
        public long? SessionMaxDurationInSeconds { get; set; } = 1800;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateActorTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateActorTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public ActorToken? ActorToken { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateAllowlistIdentifierRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateAllowlistIdentifierRequestBody
    {

        /// <summary>
        /// The identifier to be added in the allow-list.<br/>
        /// 
        /// <remarks>
        /// This can be an email address, a phone number or a web3 wallet.
        /// </remarks>
        /// </summary>
        [JsonProperty("identifier")]
        public string Identifier { get; set; } = default!;

        /// <summary>
        /// This flag denotes whether the given identifier will receive an invitation to join the application.<br/>
        /// 
        /// <remarks>
        /// Note that this only works for email address and phone number identifiers.
        /// </remarks>
        /// </summary>
        [JsonProperty("notify")]
        public bool? Notify { get; set; } = false;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateAllowlistIdentifierResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateAllowlistIdentifierResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public AllowlistIdentifier? AllowlistIdentifier { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateBlocklistIdentifierRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateBlocklistIdentifierRequestBody
    {

        /// <summary>
        /// The identifier to be added in the block-list.<br/>
        /// 
        /// <remarks>
        /// This can be an email address, a phone number or a web3 wallet.
        /// </remarks>
        /// </summary>
        [JsonProperty("identifier")]
        public string Identifier { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateBlocklistIdentifierResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateBlocklistIdentifierResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public BlocklistIdentifier? BlocklistIdentifier { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateBulkInvitationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class CreateBulkInvitationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// List of invitations
        /// </summary>
        public List<Invitation>? InvitationList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateBulkInvitationsTemplateSlug.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The slug of the email template to use for the invitation email.
    /// </summary>
    public enum CreateBulkInvitationsTemplateSlug
    {
        [JsonProperty("invitation")]
        Invitation,
        [JsonProperty("waitlist_invitation")]
        WaitlistInvitation,
    }

    public static class CreateBulkInvitationsTemplateSlugExtension
    {
        public static string Value(this CreateBulkInvitationsTemplateSlug value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static CreateBulkInvitationsTemplateSlug ToEnum(this string value)
        {
            foreach(var field in typeof(CreateBulkInvitationsTemplateSlug).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is CreateBulkInvitationsTemplateSlug)
                    {
                        return (CreateBulkInvitationsTemplateSlug)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum CreateBulkInvitationsTemplateSlug");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateEmailAddressRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateEmailAddressRequestBody
    {

        /// <summary>
        /// The ID representing the user
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The new email address. Must adhere to the RFC 5322 specification for email address format.
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        /// <summary>
        /// When created, the email address will be marked as verified.
        /// </summary>
        [JsonProperty("verified")]
        public bool? Verified { get; set; } = null;

        /// <summary>
        /// Create this email address as the primary email address for the user.<br/>
        /// 
        /// <remarks>
        /// Default: false, unless it is the first email address.
        /// </remarks>
        /// </summary>
        [JsonProperty("primary")]
        public bool? Primary { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateEmailAddressResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateEmailAddressResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public EmailAddress? EmailAddress { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateInvitationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// Required parameters
    /// </summary>
    public class CreateInvitationRequestBody
    {

        /// <summary>
        /// The email address the invitation will be sent to
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        /// <summary>
        /// Metadata that will be attached to the newly created invitation.<br/>
        /// 
        /// <remarks>
        /// The value of this property should be a well-formed JSON object.<br/>
        /// Once the user accepts the invitation and signs up, these metadata will end up in the user&apos;s public metadata.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        /// <summary>
        /// Optional URL which specifies where to redirect the user once they click the invitation link.<br/>
        /// 
        /// <remarks>
        /// This is only required if you have implemented a <a href="https://clerk.com/docs/authentication/invitations#custom-flow">custom flow</a> and you&apos;re not using Clerk Hosted Pages or Clerk Components.
        /// </remarks>
        /// </summary>
        [JsonProperty("redirect_url")]
        public string? RedirectUrl { get; set; }

        /// <summary>
        /// Optional flag which denotes whether an email invitation should be sent to the given email address.<br/>
        /// 
        /// <remarks>
        /// Defaults to `true`.
        /// </remarks>
        /// </summary>
        [JsonProperty("notify")]
        public bool? Notify { get; set; } = true;

        /// <summary>
        /// Whether an invitation should be created if there is already an existing invitation for this email address, or it&apos;s claimed by another user.
        /// </summary>
        [JsonProperty("ignore_existing")]
        public bool? IgnoreExisting { get; set; } = false;

        /// <summary>
        /// The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
        /// </summary>
        [JsonProperty("expires_in_days")]
        public long? ExpiresInDays { get; set; } = null;

        /// <summary>
        /// The slug of the email template to use for the invitation email.
        /// </summary>
        [JsonProperty("template_slug")]
        public TemplateSlug? TemplateSlug { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateInvitationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateInvitationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Invitation? Invitation { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateJWTTemplateRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateJWTTemplateRequestBody
    {

        /// <summary>
        /// JWT template name
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// JWT template claims in JSON format
        /// </summary>
        [JsonProperty("claims")]
        public Models.Operations.Claims Claims { get; set; } = default!;

        /// <summary>
        /// JWT token lifetime
        /// </summary>
        [JsonProperty("lifetime")]
        public double? Lifetime { get; set; } = null;

        /// <summary>
        /// JWT token allowed clock skew
        /// </summary>
        [JsonProperty("allowed_clock_skew")]
        public double? AllowedClockSkew { get; set; } = null;

        /// <summary>
        /// Whether a custom signing key/algorithm is also provided for this template
        /// </summary>
        [JsonProperty("custom_signing_key")]
        public bool? CustomSigningKey { get; set; }

        /// <summary>
        /// The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
        /// </summary>
        [JsonProperty("signing_algorithm")]
        public string? SigningAlgorithm { get; set; } = null;

        /// <summary>
        /// The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
        /// </summary>
        [JsonProperty("signing_key")]
        public string? SigningKey { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateJWTTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateJWTTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public JWTTemplate? JWTTemplate { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOAuthApplicationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class CreateOAuthApplicationRequestBody
    {

        /// <summary>
        /// The name of the new OAuth application.<br/>
        /// 
        /// <remarks>
        /// Max length: 256
        /// </remarks>
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An array of redirect URIs of the new OAuth application
        /// </summary>
        [JsonProperty("redirect_uris")]
        public List<string>? RedirectUris { get; set; } = null;

        /// <summary>
        /// The callback URL of the new OAuth application
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("callback_url")]
        public string? CallbackUrl { get; set; } = null;

        /// <summary>
        /// Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
        /// </summary>
        [JsonProperty("scopes")]
        public string? Scopes { get; set; } = "profile email";

        /// <summary>
        /// If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
        /// </summary>
        [JsonProperty("public")]
        public bool? Public { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOAuthApplicationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOAuthApplicationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An OAuth application with client secret
        /// </summary>
        public OAuthApplicationWithSecret? OAuthApplicationWithSecret { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class CreateOrganizationDomainRequest
    {

        /// <summary>
        /// The ID of the organization where the new domain will be created.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public CreateOrganizationDomainRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationDomainRequestBody
    {

        /// <summary>
        /// The name of the new domain
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation`
        /// </summary>
        [JsonProperty("enrollment_mode")]
        public string? EnrollmentMode { get; set; }

        /// <summary>
        /// The status of domain&apos;s verification. Defaults to true
        /// </summary>
        [JsonProperty("verified")]
        public bool? Verified { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization domain
        /// </summary>
        public OrganizationDomain? OrganizationDomain { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using System.Collections.Generic;
    
    public class CreateOrganizationInvitationBulkRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public List<CreateOrganizationInvitationBulkRequestBody> RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class CreateOrganizationInvitationBulkRequestBody
    {

        /// <summary>
        /// The email address of the new member that is going to be invited to the organization
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        /// <summary>
        /// The ID of the user that invites the new member to the organization.<br/>
        /// 
        /// <remarks>
        /// Must be an administrator in the organization.
        /// </remarks>
        /// </summary>
        [JsonProperty("inviter_user_id")]
        public string? InviterUserId { get; set; } = null;

        /// <summary>
        /// The role of the new member in the organization
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; } = default!;

        /// <summary>
        /// Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.<br/>
        /// 
        /// <remarks>
        /// When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; } = null;

        /// <summary>
        /// Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.<br/>
        /// 
        /// <remarks>
        /// When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
        /// </remarks>
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        /// <summary>
        /// Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.
        /// </summary>
        [JsonProperty("redirect_url")]
        public string? RedirectUrl { get; set; } = null;

        /// <summary>
        /// The number of days the invitation will be valid for. By default, the invitation has a 30 days expire.
        /// </summary>
        [JsonProperty("expires_in_days")]
        public long? ExpiresInDays { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationBulkResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationInvitationBulkResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization invitations
        /// </summary>
        public Models.Components.OrganizationInvitations? OrganizationInvitations { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class CreateOrganizationInvitationRequest
    {

        /// <summary>
        /// The ID of the organization for which to send the invitation
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public CreateOrganizationInvitationRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class CreateOrganizationInvitationRequestBody
    {

        /// <summary>
        /// The email address of the new member that is going to be invited to the organization
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        /// <summary>
        /// The ID of the user that invites the new member to the organization.<br/>
        /// 
        /// <remarks>
        /// Must be an administrator in the organization.
        /// </remarks>
        /// </summary>
        [JsonProperty("inviter_user_id")]
        public string? InviterUserId { get; set; } = null;

        /// <summary>
        /// The role of the new member in the organization
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; } = default!;

        /// <summary>
        /// Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.<br/>
        /// 
        /// <remarks>
        /// When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; } = null;

        /// <summary>
        /// Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.<br/>
        /// 
        /// <remarks>
        /// When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
        /// </remarks>
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        /// <summary>
        /// Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.
        /// </summary>
        [JsonProperty("redirect_url")]
        public string? RedirectUrl { get; set; } = null;

        /// <summary>
        /// The number of days the invitation will be valid for. By default, the invitation has a 30 days expire.
        /// </summary>
        [JsonProperty("expires_in_days")]
        public long? ExpiresInDays { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationInvitationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationInvitationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization invitation
        /// </summary>
        public OrganizationInvitation? OrganizationInvitation { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class CreateOrganizationMembershipRequest
    {

        /// <summary>
        /// The ID of the organization where the new membership will be created
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public CreateOrganizationMembershipRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationMembershipRequestBody
    {

        /// <summary>
        /// The ID of the user that will be added as a member in the organization.
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The role that the new member will have in the organization.
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationMembershipResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationMembershipResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public OrganizationMembership? OrganizationMembership { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class CreateOrganizationRequestBody
    {

        /// <summary>
        /// The name of the new organization.<br/>
        /// 
        /// <remarks>
        /// May not contain URLs or HTML.<br/>
        /// Max length: 256
        /// </remarks>
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The ID of the User who will become the administrator for the new organization
        /// </summary>
        [JsonProperty("created_by")]
        public string? CreatedBy { get; set; } = null;

        /// <summary>
        /// Metadata saved on the organization, accessible only from the Backend API
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        /// <summary>
        /// Metadata saved on the organization, read-only from the Frontend API and fully accessible (read/write) from the Backend API
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; } = null;

        /// <summary>
        /// A slug for the new organization.<br/>
        /// 
        /// <remarks>
        /// Can contain only lowercase alphanumeric characters and the dash &quot;-&quot;.<br/>
        /// Must be unique for the instance.
        /// </remarks>
        /// </summary>
        [JsonProperty("slug")]
        public string? Slug { get; set; } = null;

        /// <summary>
        /// The maximum number of memberships allowed for this organization
        /// </summary>
        [JsonProperty("max_allowed_memberships")]
        public long? MaxAllowedMemberships { get; set; } = null;

        /// <summary>
        /// A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
        /// </summary>
        [JsonProperty("created_at")]
        public string? CreatedAt { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateOrganizationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateOrganizationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization
        /// </summary>
        public Organization? Organization { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreatePhoneNumberRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreatePhoneNumberRequestBody
    {

        /// <summary>
        /// The ID representing the user
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The new phone number. Must adhere to the E.164 standard for phone number format.
        /// </summary>
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; } = default!;

        /// <summary>
        /// When created, the phone number will be marked as verified.
        /// </summary>
        [JsonProperty("verified")]
        public bool? Verified { get; set; } = null;

        /// <summary>
        /// Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.
        /// </summary>
        [JsonProperty("primary")]
        public bool? Primary { get; set; } = null;

        /// <summary>
        /// Create this phone number as reserved for multi-factor authentication. The phone number must also be verified.<br/>
        /// 
        /// <remarks>
        /// If there are no other reserved second factors, the phone number will be set as the default second factor.
        /// </remarks>
        /// </summary>
        [JsonProperty("reserved_for_second_factor")]
        public bool? ReservedForSecondFactor { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreatePhoneNumberResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreatePhoneNumberResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public PhoneNumber? PhoneNumber { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateRedirectURLRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateRedirectURLRequestBody
    {

        /// <summary>
        /// The full url value prefixed with `https://` or a custom scheme e.g. `&quot;https://my-app.com/oauth-callback&quot;` or `&quot;my-app://oauth-callback&quot;`
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateRedirectURLResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateRedirectURLResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public RedirectURL? RedirectURL { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSAMLConnectionRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSAMLConnectionRequestBody
    {

        /// <summary>
        /// The name to use as a label for this SAML Connection
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; } = default!;

        /// <summary>
        /// The IdP provider of the connection.
        /// </summary>
        [JsonProperty("provider")]
        public Provider Provider { get; set; } = default!;

        /// <summary>
        /// The Entity ID as provided by the IdP
        /// </summary>
        [JsonProperty("idp_entity_id")]
        public string? IdpEntityId { get; set; } = null;

        /// <summary>
        /// The Single-Sign On URL as provided by the IdP
        /// </summary>
        [JsonProperty("idp_sso_url")]
        public string? IdpSsoUrl { get; set; } = null;

        /// <summary>
        /// The X.509 certificate as provided by the IdP
        /// </summary>
        [JsonProperty("idp_certificate")]
        public string? IdpCertificate { get; set; } = null;

        /// <summary>
        /// The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties
        /// </summary>
        [JsonProperty("idp_metadata_url")]
        public string? IdpMetadataUrl { get; set; } = null;

        /// <summary>
        /// The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
        /// </summary>
        [JsonProperty("idp_metadata")]
        public string? IdpMetadata { get; set; } = null;

        /// <summary>
        /// The ID of the organization to which users of this SAML Connection will be added
        /// </summary>
        [JsonProperty("organization_id")]
        public string? OrganizationId { get; set; } = null;

        /// <summary>
        /// Define the attribute name mapping between Identity Provider and Clerk&apos;s user properties
        /// </summary>
        [JsonProperty("attribute_mapping")]
        public AttributeMapping? AttributeMapping { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSAMLConnectionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSAMLConnectionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A SAML Connection
        /// </summary>
        public SchemasSAMLConnection? SchemasSAMLConnection { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSessionRequestBody
    {

        /// <summary>
        /// The ID representing the user
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSessionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Session? Session { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateObject.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum CreateSessionTokenFromTemplateObject
    {
        [JsonProperty("token")]
        Token,
    }

    public static class CreateSessionTokenFromTemplateObjectExtension
    {
        public static string Value(this CreateSessionTokenFromTemplateObject value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static CreateSessionTokenFromTemplateObject ToEnum(this string value)
        {
            foreach(var field in typeof(CreateSessionTokenFromTemplateObject).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is CreateSessionTokenFromTemplateObject)
                    {
                        return (CreateSessionTokenFromTemplateObject)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum CreateSessionTokenFromTemplateObject");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class CreateSessionTokenFromTemplateRequest
    {

        /// <summary>
        /// The ID of the session
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=session_id")]
        public string SessionId { get; set; } = default!;

        /// <summary>
        /// The name of the JWT Template defined in your instance (e.g. `custom_hasura`).
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_name")]
        public string TemplateName { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public CreateSessionTokenFromTemplateRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSessionTokenFromTemplateRequestBody
    {

        /// <summary>
        /// Use this parameter to override the JWT token lifetime.
        /// </summary>
        [JsonProperty("expires_in_seconds")]
        public double? ExpiresInSeconds { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSessionTokenFromTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// OK
        /// </summary>
        public CreateSessionTokenFromTemplateResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenFromTemplateResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// OK
    /// </summary>
    public class CreateSessionTokenFromTemplateResponseBody
    {

        [JsonProperty("object")]
        public CreateSessionTokenFromTemplateObject? Object { get; set; }

        [JsonProperty("jwt")]
        public string? Jwt { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class CreateSessionTokenRequest
    {

        /// <summary>
        /// The ID of the session
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=session_id")]
        public string SessionId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public CreateSessionTokenRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSessionTokenRequestBody
    {

        /// <summary>
        /// Use this parameter to override the default session token lifetime.
        /// </summary>
        [JsonProperty("expires_in_seconds")]
        public double? ExpiresInSeconds { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSessionTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// OK
        /// </summary>
        public CreateSessionTokenResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSessionTokenResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// OK
    /// </summary>
    public class CreateSessionTokenResponseBody
    {

        [JsonProperty("object")]
        public Models.Operations.Object? Object { get; set; }

        [JsonProperty("jwt")]
        public string? Jwt { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSignInTokenRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSignInTokenRequestBody
    {

        /// <summary>
        /// The ID of the user that can use the newly created sign in token
        /// </summary>
        [JsonProperty("user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// Optional parameter to specify the life duration of the sign in token in seconds.<br/>
        /// 
        /// <remarks>
        /// By default, the duration is 30 days.
        /// </remarks>
        /// </summary>
        [JsonProperty("expires_in_seconds")]
        public long? ExpiresInSeconds { get; set; } = 2592000;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSignInTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSignInTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public SignInToken? SignInToken { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateSvixAppResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateSvixAppResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Response that contains a temporary Svix URL to access management dashboard
        /// </summary>
        public SvixURL? SvixURL { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateTestingTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateTestingTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A Testing Token
        /// </summary>
        public TestingToken? TestingToken { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateUserRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class CreateUserRequestBody
    {

        /// <summary>
        /// The ID of the user as used in your external systems or your previous authentication solution.<br/>
        /// 
        /// <remarks>
        /// Must be unique across your instance.
        /// </remarks>
        /// </summary>
        [JsonProperty("external_id")]
        public string? ExternalId { get; set; } = null;

        /// <summary>
        /// The first name to assign to the user
        /// </summary>
        [JsonProperty("first_name")]
        public string? FirstName { get; set; } = null;

        /// <summary>
        /// The last name to assign to the user
        /// </summary>
        [JsonProperty("last_name")]
        public string? LastName { get; set; } = null;

        /// <summary>
        /// Email addresses to add to the user.<br/>
        /// 
        /// <remarks>
        /// Must be unique across your instance.<br/>
        /// The first email address will be set as the user&apos;s primary email address.
        /// </remarks>
        /// </summary>
        [JsonProperty("email_address")]
        public List<string>? EmailAddress { get; set; }

        /// <summary>
        /// Phone numbers to add to the user.<br/>
        /// 
        /// <remarks>
        /// Must be unique across your instance.<br/>
        /// The first phone number will be set as the user&apos;s primary phone number.
        /// </remarks>
        /// </summary>
        [JsonProperty("phone_number")]
        public List<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Web3 wallets to add to the user.<br/>
        /// 
        /// <remarks>
        /// Must be unique across your instance.<br/>
        /// The first wallet will be set as the user&apos;s primary wallet.
        /// </remarks>
        /// </summary>
        [JsonProperty("web3_wallet")]
        public List<string>? Web3Wallet { get; set; }

        /// <summary>
        /// The username to give to the user.<br/>
        /// 
        /// <remarks>
        /// It must be unique across your instance.
        /// </remarks>
        /// </summary>
        [JsonProperty("username")]
        public string? Username { get; set; } = null;

        /// <summary>
        /// The plaintext password to give the user.<br/>
        /// 
        /// <remarks>
        /// Must be at least 8 characters long, and can not be in any list of hacked passwords.
        /// </remarks>
        /// </summary>
        [JsonProperty("password")]
        public string? Password { get; set; } = null;

        /// <summary>
        /// In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.<br/>
        /// 
        /// <remarks>
        /// The digests should be generated with one of the supported algorithms.<br/>
        /// The hashing algorithm can be specified using the `password_hasher` property.
        /// </remarks>
        /// </summary>
        [JsonProperty("password_digest")]
        public string? PasswordDigest { get; set; } = null;

        /// <summary>
        /// The hashing algorithm that was used to generate the password digest.<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// The algorithms we support at the moment are <a href="https://en.wikipedia.org/wiki/Bcrypt">`bcrypt`</a>, <a href="https://docs.djangoproject.com/en/4.0/topics/auth/passwords/">`bcrypt_sha256_django`</a>, <a href="https://en.wikipedia.org/wiki/MD5">`md5`</a>, `pbkdf2_sha1`, `pbkdf2_sha256`, <a href="https://docs.djangoproject.com/en/4.0/topics/auth/passwords/">`pbkdf2_sha256_django`</a>,<br/>
        /// <a href="https://www.openwall.com/phpass/">`phpass`</a>, <a href="https://firebaseopensource.com/projects/firebase/scrypt/">`scrypt_firebase`</a>,<br/>
        /// <a href="https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash">`scrypt_werkzeug`</a>, <a href="https://en.wikipedia.org/wiki/SHA-2">`sha256`</a>,<br/>
        /// and the <a href="https://argon2.online/">`argon2`</a> variants: `argon2i` and `argon2id`.<br/>
        /// <br/>
        /// Each of the supported hashers expects the incoming digest to be in a particular format. See the <a href="https://clerk.com/docs/references/backend/user/create-user">Clerk docs</a> for more information.
        /// </remarks>
        /// </summary>
        [JsonProperty("password_hasher")]
        public string? PasswordHasher { get; set; }

        /// <summary>
        /// When set to `true` all password checks are skipped.<br/>
        /// 
        /// <remarks>
        /// It is recommended to use this method only when migrating plaintext passwords to Clerk.<br/>
        /// Upon migration the user base should be prompted to pick stronger password.
        /// </remarks>
        /// </summary>
        [JsonProperty("skip_password_checks")]
        public bool? SkipPasswordChecks { get; set; } = null;

        /// <summary>
        /// When set to `true`, `password` is not required anymore when creating the user and can be omitted.<br/>
        /// 
        /// <remarks>
        /// This is useful when you are trying to create a user that doesn&apos;t have a password, in an instance that is using passwords.<br/>
        /// Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
        /// </remarks>
        /// </summary>
        [JsonProperty("skip_password_requirement")]
        public bool? SkipPasswordRequirement { get; set; } = null;

        /// <summary>
        /// In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.<br/>
        /// 
        /// <remarks>
        /// Please note that currently the supported options are:<br/>
        /// * Period: 30 seconds<br/>
        /// * Code length: 6 digits<br/>
        /// * Algorithm: SHA1
        /// </remarks>
        /// </summary>
        [JsonProperty("totp_secret")]
        public string? TotpSecret { get; set; } = null;

        /// <summary>
        /// If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.<br/>
        /// 
        /// <remarks>
        /// You must provide the backup codes in plain format or the corresponding bcrypt digest.
        /// </remarks>
        /// </summary>
        [JsonProperty("backup_codes")]
        public List<string>? BackupCodes { get; set; }

        /// <summary>
        /// Metadata saved on the user, that is visible to both your Frontend and Backend APIs
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        /// <summary>
        /// Metadata saved on the user, that is only visible to your Backend API
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }

        /// <summary>
        /// Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.<br/>
        /// 
        /// <remarks>
        /// Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
        /// </remarks>
        /// </summary>
        [JsonProperty("unsafe_metadata")]
        public Dictionary<string, object>? UnsafeMetadata { get; set; }

        /// <summary>
        /// If enabled, user can delete themselves via FAPI.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("delete_self_enabled")]
        public bool? DeleteSelfEnabled { get; set; } = null;

        /// <summary>
        /// A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
        /// </summary>
        [JsonProperty("legal_accepted_at")]
        public string? LegalAcceptedAt { get; set; } = null;

        /// <summary>
        /// When set to `true` all legal checks are skipped.<br/>
        /// 
        /// <remarks>
        /// It is not recommended to skip legal checks unless you are migrating a user to Clerk.
        /// </remarks>
        /// </summary>
        [JsonProperty("skip_legal_checks")]
        public bool? SkipLegalChecks { get; set; } = null;

        /// <summary>
        /// If enabled, user can create organizations via FAPI.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("create_organization_enabled")]
        public bool? CreateOrganizationEnabled { get; set; } = null;

        /// <summary>
        /// The maximum number of organizations the user can create. 0 means unlimited.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("create_organizations_limit")]
        public long? CreateOrganizationsLimit { get; set; } = null;

        /// <summary>
        /// A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
        /// </summary>
        [JsonProperty("created_at")]
        public string? CreatedAt { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateWaitlistEntryRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateWaitlistEntryRequestBody
    {

        /// <summary>
        /// The email address to add to the waitlist
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        /// <summary>
        /// Optional flag which denotes whether a confirmation email should be sent to the given email address.<br/>
        /// 
        /// <remarks>
        /// Defaults to `true`.
        /// </remarks>
        /// </summary>
        [JsonProperty("notify")]
        public bool? Notify { get; set; } = true;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/CreateWaitlistEntryResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class CreateWaitlistEntryResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A Waitlist Entry
        /// </summary>
        public WaitlistEntry? WaitlistEntry { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteAllowlistIdentifierRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteAllowlistIdentifierRequest
    {

        /// <summary>
        /// The ID of the identifier to delete from the allow-list
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=identifier_id")]
        public string IdentifierId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteAllowlistIdentifierResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteAllowlistIdentifierResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteBackupCodeRequest
    {

        /// <summary>
        /// The ID of the user whose backup codes are to be deleted.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteBackupCodeResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Successful operation.
        /// </summary>
        public DeleteBackupCodeResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteBackupCodeResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Successful operation.
    /// </summary>
    public class DeleteBackupCodeResponseBody
    {

        [JsonProperty("user_id")]
        public string? UserId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteBlocklistIdentifierRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteBlocklistIdentifierRequest
    {

        /// <summary>
        /// The ID of the identifier to delete from the block-list
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=identifier_id")]
        public string IdentifierId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteBlocklistIdentifierResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteBlocklistIdentifierResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteDomainRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteDomainRequest
    {

        /// <summary>
        /// The ID of the domain that will be deleted. Must be a satellite domain.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=domain_id")]
        public string DomainId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteEmailAddressRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteEmailAddressRequest
    {

        /// <summary>
        /// The ID of the email address to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=email_address_id")]
        public string EmailAddressId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteEmailAddressResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteEmailAddressResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteExternalAccountRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteExternalAccountRequest
    {

        /// <summary>
        /// The ID of the user&apos;s external account
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The ID of the external account to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=external_account_id")]
        public string ExternalAccountId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteExternalAccountResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteExternalAccountResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteJWTTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteJWTTemplateRequest
    {

        /// <summary>
        /// JWT Template ID
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_id")]
        public string TemplateId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteJWTTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteJWTTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOAuthApplicationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteOAuthApplicationRequest
    {

        /// <summary>
        /// The ID of the OAuth application to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=oauth_application_id")]
        public string OauthApplicationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOAuthApplicationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteOAuthApplicationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationDomainRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteOrganizationDomainRequest
    {

        /// <summary>
        /// The ID of the organization the domain belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The ID of the domain
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=domain_id")]
        public string DomainId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteOrganizationDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationLogoRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteOrganizationLogoRequest
    {

        /// <summary>
        /// The ID of the organization for which the logo will be deleted.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationLogoResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteOrganizationLogoResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization
        /// </summary>
        public Organization? Organization { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationMembershipRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteOrganizationMembershipRequest
    {

        /// <summary>
        /// The ID of the organization the membership belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The ID of the user that this membership belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationMembershipResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteOrganizationMembershipResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public OrganizationMembership? OrganizationMembership { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteOrganizationRequest
    {

        /// <summary>
        /// The ID of the organization to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteOrganizationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteOrganizationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeletePhoneNumberRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeletePhoneNumberRequest
    {

        /// <summary>
        /// The ID of the phone number to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=phone_number_id")]
        public string PhoneNumberId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeletePhoneNumberResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeletePhoneNumberResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteRedirectURLRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteRedirectURLRequest
    {

        /// <summary>
        /// The ID of the redirect URL
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")]
        public string Id { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteRedirectURLResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteRedirectURLResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteSAMLConnectionRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteSAMLConnectionRequest
    {

        /// <summary>
        /// The ID of the SAML Connection to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=saml_connection_id")]
        public string SamlConnectionId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteSAMLConnectionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteSAMLConnectionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteSvixAppResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteSvixAppResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteTOTPRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteTOTPRequest
    {

        /// <summary>
        /// The ID of the user whose TOTPs are to be deleted
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteTOTPResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteTOTPResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Successful operation.
        /// </summary>
        public DeleteTOTPResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteTOTPResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Successful operation.
    /// </summary>
    public class DeleteTOTPResponseBody
    {

        [JsonProperty("user_id")]
        public string? UserId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteUserProfileImageRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteUserProfileImageRequest
    {

        /// <summary>
        /// The ID of the user to delete the profile image for
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteUserProfileImageResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteUserProfileImageResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DeleteUserRequest
    {

        /// <summary>
        /// The ID of the user to delete
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DeleteUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DeleteUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DisableMFARequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class DisableMFARequest
    {

        /// <summary>
        /// The ID of the user whose MFA methods are to be disabled
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DisableMFAResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class DisableMFAResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Successful operation.
        /// </summary>
        public DisableMFAResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/DisableMFAResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Successful operation.
    /// </summary>
    public class DisableMFAResponseBody
    {

        [JsonProperty("user_id")]
        public string? UserId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/File.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class File
    {

        [SpeakeasyMetadata("multipartForm:name=fileName")]
        public string FileName { get; set; } = default!;

        [SpeakeasyMetadata("multipartForm:content")]
        public byte[] Content { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GenerateSvixAuthURLResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GenerateSvixAuthURLResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Response that contains a temporary Svix URL to access management dashboard
        /// </summary>
        public SvixURL? SvixURL { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetClientListRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetClientListRequest
    {

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetClientListResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class GetClientListResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public List<Client>? ClientList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetClientRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetClientRequest
    {

        /// <summary>
        /// Client ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=client_id")]
        public string ClientId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetClientResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetClientResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Client? Client { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetEmailAddressRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetEmailAddressRequest
    {

        /// <summary>
        /// The ID of the email address to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=email_address_id")]
        public string EmailAddressId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetEmailAddressResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetEmailAddressResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public EmailAddress? EmailAddress { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetInstanceResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetInstanceResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Instance? Instance { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetJWKSResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetJWKSResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Get the JSON Web Key Set
        /// </summary>
        public Models.Components.Jwks? Jwks { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetJWTTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetJWTTemplateRequest
    {

        /// <summary>
        /// JWT Template ID
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_id")]
        public string TemplateId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetJWTTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetJWTTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public JWTTemplate? JWTTemplate { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOAuthAccessTokenRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetOAuthAccessTokenRequest
    {

        /// <summary>
        /// The ID of the user for which to retrieve the OAuth access token
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The ID of the OAuth provider (e.g. `oauth_google`)
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=provider")]
        public string Provider { get; set; } = default!;

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOAuthAccessTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class GetOAuthAccessTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// The OAuth access token of the user, if any.
        /// </summary>
        public List<ResponseBody>? ResponseBodies { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOAuthApplicationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetOAuthApplicationRequest
    {

        /// <summary>
        /// The ID of the OAuth application
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=oauth_application_id")]
        public string OauthApplicationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOAuthApplicationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetOAuthApplicationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An OAuth application
        /// </summary>
        public OAuthApplication? OAuthApplication { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOrganizationInvitationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetOrganizationInvitationRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The organization invitation ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=invitation_id")]
        public string InvitationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOrganizationInvitationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetOrganizationInvitationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization invitation
        /// </summary>
        public OrganizationInvitation? OrganizationInvitation { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOrganizationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetOrganizationRequest
    {

        /// <summary>
        /// The ID or slug of the organization
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// Flag to denote whether or not the organization&apos;s members count should be included in the response.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_members_count")]
        public bool? IncludeMembersCount { get; set; }

        /// <summary>
        /// Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_missing_member_with_elevated_permissions")]
        public bool? IncludeMissingMemberWithElevatedPermissions { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetOrganizationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetOrganizationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization
        /// </summary>
        public Organization? Organization { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetPhoneNumberRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetPhoneNumberRequest
    {

        /// <summary>
        /// The ID of the phone number to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=phone_number_id")]
        public string PhoneNumberId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetPhoneNumberResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetPhoneNumberResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public PhoneNumber? PhoneNumber { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetPublicInterstitialRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System;
    
    public class GetPublicInterstitialRequest
    {

        /// <summary>
        /// Please use `frontend_api` instead
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=frontendApi")]
        public string? FrontendApiQueryParameter { get; set; }

        /// <summary>
        /// The Frontend API key of your instance
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=frontend_api")]
        public string? FrontendApiQueryParameter1 { get; set; }

        /// <summary>
        /// The publishable key of your instance
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=publishable_key")]
        public string? PublishableKey { get; set; }

        /// <summary>
        /// The proxy URL of your instance
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=proxy_url")]
        public string? ProxyUrl { get; set; }

        /// <summary>
        /// The domain of your instance
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// The sign in URL of your instance
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=sign_in_url")]
        public string? SignInUrl { get; set; }

        /// <summary>
        /// Whether to use the domain for the script URL
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=use_domain_for_script")]
        public bool? UseDomainForScript { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetPublicInterstitialResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetPublicInterstitialResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetRedirectURLRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetRedirectURLRequest
    {

        /// <summary>
        /// The ID of the redirect URL
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")]
        public string Id { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetRedirectURLResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetRedirectURLResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public RedirectURL? RedirectURL { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSAMLConnectionRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetSAMLConnectionRequest
    {

        /// <summary>
        /// The ID of the SAML Connection
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=saml_connection_id")]
        public string SamlConnectionId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSAMLConnectionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetSAMLConnectionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A SAML Connection
        /// </summary>
        public SchemasSAMLConnection? SchemasSAMLConnection { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSessionListRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class GetSessionListRequest
    {

        /// <summary>
        /// List sessions for the given client
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=client_id")]
        public string? ClientId { get; set; }

        /// <summary>
        /// List sessions for the given user
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public string? UserId { get; set; }

        /// <summary>
        /// Filter sessions by the provided status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public Models.Operations.Status? Status { get; set; }

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSessionListResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class GetSessionListResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public List<Session>? SessionList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSessionRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetSessionRequest
    {

        /// <summary>
        /// The ID of the session
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=session_id")]
        public string SessionId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSessionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetSessionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Session? Session { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSignUpRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetSignUpRequest
    {

        /// <summary>
        /// The ID of the sign-up to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")]
        public string Id { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetSignUpResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetSignUpResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public SignUp? SignUp { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetTemplateListRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class GetTemplateListRequest
    {

        /// <summary>
        /// The type of templates to list (email or SMS)
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")]
        public TemplateType TemplateType { get; set; } = default!;

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetTemplateListResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class GetTemplateListResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public List<Template>? TemplateList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class GetTemplateRequest
    {

        /// <summary>
        /// The type of templates to retrieve (email or SMS)
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")]
        public PathParamTemplateType TemplateType { get; set; } = default!;

        /// <summary>
        /// The slug (i.e. machine-friendly name) of the template to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=slug")]
        public string Slug { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Template? Template { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetUserListRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System;
    using System.Collections.Generic;
    
    public class GetUserListRequest
    {

        /// <summary>
        /// Returns users with the specified email addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 email addresses.<br/>
        /// Any email addresses not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")]
        public List<string>? EmailAddress { get; set; }

        /// <summary>
        /// Returns users with the specified phone numbers.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 phone numbers.<br/>
        /// Any phone numbers not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")]
        public List<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Returns users with the specified external ids.<br/>
        /// 
        /// <remarks>
        /// For each external id, the `+` and `-` can be<br/>
        /// prepended to the id, which denote whether the<br/>
        /// respective external id should be included or<br/>
        /// excluded from the result set.<br/>
        /// Accepts up to 100 external ids.<br/>
        /// Any external ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_id")]
        public List<string>? ExternalId { get; set; }

        /// <summary>
        /// Returns users with the specified usernames.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 usernames.<br/>
        /// Any usernames not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")]
        public List<string>? Username { get; set; }

        /// <summary>
        /// Returns users with the specified web3 wallet addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 web3 wallet addresses.<br/>
        /// Any web3 wallet addressed not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")]
        public List<string>? Web3Wallet { get; set; }

        /// <summary>
        /// Returns users with the user ids specified.<br/>
        /// 
        /// <remarks>
        /// For each user id, the `+` and `-` can be<br/>
        /// prepended to the id, which denote whether the<br/>
        /// respective user id should be included or<br/>
        /// excluded from the result set.<br/>
        /// Accepts up to 100 user ids.<br/>
        /// Any user ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public List<string>? UserId { get; set; }

        /// <summary>
        /// Returns users that have memberships to the<br/>
        /// 
        /// <remarks>
        /// given organizations.<br/>
        /// For each organization id, the `+` and `-` can be<br/>
        /// prepended to the id, which denote whether the<br/>
        /// respective organization should be included or<br/>
        /// excluded from the result set.<br/>
        /// Accepts up to 100 organization ids.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")]
        public List<string>? OrganizationId { get; set; }

        /// <summary>
        /// Returns users that match the given query.<br/>
        /// 
        /// <remarks>
        /// For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>
        /// The query value doesn&apos;t need to match the exact value you are looking for, it is capable of partial matches as well.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Returns users with emails that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address_query")]
        public string? EmailAddressQuery { get; set; }

        /// <summary>
        /// Returns users with phone numbers that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number_query")]
        public string? PhoneNumberQuery { get; set; }

        /// <summary>
        /// Returns users with usernames that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username_query")]
        public string? UsernameQuery { get; set; }

        /// <summary>
        /// Returns users with names that match the given query, via case-insensitive partial match.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=name_query")]
        public string? NameQuery { get; set; }

        /// <summary>
        /// Returns users which are either banned (`banned=true`) or not banned (`banned=false`).
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=banned")]
        public bool? Banned { get; set; }

        /// <summary>
        /// Returns users whose last session activity was before the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_before")]
        public long? LastActiveAtBefore { get; set; }

        /// <summary>
        /// Returns users whose last session activity was after the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_after")]
        public long? LastActiveAtAfter { get; set; }

        /// <summary>
        /// Returns users that had session activity since the given date.<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.<br/>
        /// Deprecated in favor of `last_active_at_after`.
        /// </remarks>
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_since")]
        public long? LastActiveAtSince { get; set; }

        /// <summary>
        /// Returns users who have been created before the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_before")]
        public long? CreatedAtBefore { get; set; }

        /// <summary>
        /// Returns users who have been created after the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_after")]
        public long? CreatedAtAfter { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;

        /// <summary>
        /// Allows to return users in a particular order.<br/>
        /// 
        /// <remarks>
        /// At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.<br/>
        /// In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>
        /// For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>
        /// If you don&apos;t use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,<br/>
        /// if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; } = "-created_at";
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetUserListResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class GetUserListResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public List<User>? UserList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class GetUserRequest
    {

        /// <summary>
        /// The ID of the user to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetUsersCountRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System;
    using System.Collections.Generic;
    
    public class GetUsersCountRequest
    {

        /// <summary>
        /// Counts users with the specified email addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 email addresses.<br/>
        /// Any email addresses not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")]
        public List<string>? EmailAddress { get; set; }

        /// <summary>
        /// Counts users with the specified phone numbers.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 phone numbers.<br/>
        /// Any phone numbers not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")]
        public List<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Counts users with the specified external ids.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 external ids.<br/>
        /// Any external ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_id")]
        public List<string>? ExternalId { get; set; }

        /// <summary>
        /// Counts users with the specified usernames.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 usernames.<br/>
        /// Any usernames not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")]
        public List<string>? Username { get; set; }

        /// <summary>
        /// Counts users with the specified web3 wallet addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 web3 wallet addresses.<br/>
        /// Any web3 wallet addressed not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")]
        public List<string>? Web3Wallet { get; set; }

        /// <summary>
        /// Counts users with the user ids specified.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 user ids.<br/>
        /// Any user ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public List<string>? UserId { get; set; }

        /// <summary>
        /// Returns users that have memberships to the given organizations. For each organization id, the `+` and `-`<br/>
        /// 
        /// <remarks>
        /// can be prepended to the id, which denote whether the respective organization should be included or<br/>
        /// excluded from the result set. Accepts up to 100 organization ids.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")]
        public List<string>? OrganizationId { get; set; }

        /// <summary>
        /// Counts users that match the given query.<br/>
        /// 
        /// <remarks>
        /// For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>
        /// The query value doesn&apos;t need to match the exact value you are looking for, it is capable of partial matches as well.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Counts users with emails that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`,<br/>
        /// and will be included in the resulting count.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address_query")]
        public string? EmailAddressQuery { get; set; }

        /// <summary>
        /// Counts users with phone numbers that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`,<br/>
        /// and will be included in the resulting count.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number_query")]
        public string? PhoneNumberQuery { get; set; }

        /// <summary>
        /// Counts users with usernames that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`,<br/>
        /// and will be included in the resulting count.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username_query")]
        public string? UsernameQuery { get; set; }

        /// <summary>
        /// Returns users with names that match the given query, via case-insensitive partial match.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=name_query")]
        public string? NameQuery { get; set; }

        /// <summary>
        /// Counts users which are either banned (`banned=true`) or not banned (`banned=false`).
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=banned")]
        public bool? Banned { get; set; }

        /// <summary>
        /// Returns users whose last session activity was before the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_before")]
        public long? LastActiveAtBefore { get; set; }

        /// <summary>
        /// Returns users whose last session activity was after the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_after")]
        public long? LastActiveAtAfter { get; set; }

        /// <summary>
        /// Returns users that had session activity since the given date.<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.<br/>
        /// Deprecated in favor of `last_active_at_after`.
        /// </remarks>
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_since")]
        public long? LastActiveAtSince { get; set; }

        /// <summary>
        /// Returns users who have been created before the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_before")]
        public long? CreatedAtBefore { get; set; }

        /// <summary>
        /// Returns users who have been created after the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_after")]
        public long? CreatedAtAfter { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/GetUsersCountResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class GetUsersCountResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public TotalCount? TotalCount { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/InstanceGetOrganizationMembershipsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class InstanceGetOrganizationMembershipsRequest
    {

        /// <summary>
        /// Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>
        /// 
        /// <remarks>
        /// By prepending one of those values with + or -,<br/>
        /// we can choose to sort in ascending (ASC) or descending (DESC) order.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/InstanceGetOrganizationMembershipsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class InstanceGetOrganizationMembershipsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization memberships
        /// </summary>
        public Models.Components.OrganizationMemberships? OrganizationMemberships { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListAllowlistIdentifiersRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class ListAllowlistIdentifiersRequest
    {

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListAllowlistIdentifiersResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class ListAllowlistIdentifiersResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public List<AllowlistIdentifier>? AllowlistIdentifierList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListBlocklistIdentifiersResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListBlocklistIdentifiersResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Models.Components.BlocklistIdentifiers? BlocklistIdentifiers { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListDomainsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListDomainsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of domains
        /// </summary>
        public Models.Components.Domains? Domains { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsQueryParamStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Filter organization invitations based on their status
    /// </summary>
    public enum ListInstanceOrganizationInvitationsQueryParamStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class ListInstanceOrganizationInvitationsQueryParamStatusExtension
    {
        public static string Value(this ListInstanceOrganizationInvitationsQueryParamStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ListInstanceOrganizationInvitationsQueryParamStatus ToEnum(this string value)
        {
            foreach(var field in typeof(ListInstanceOrganizationInvitationsQueryParamStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ListInstanceOrganizationInvitationsQueryParamStatus)
                    {
                        return (ListInstanceOrganizationInvitationsQueryParamStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ListInstanceOrganizationInvitationsQueryParamStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class ListInstanceOrganizationInvitationsRequest
    {

        /// <summary>
        /// Allows to return organization invitations in a particular order.<br/>
        /// 
        /// <remarks>
        /// At the moment, you can order the returned organization invitations either by their `created_at` or `email_address`.<br/>
        /// In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>
        /// For example, if you want organization invitations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>
        /// If you don&apos;t use `+` or `-`, then `+` is implied.<br/>
        /// Defaults to `-created_at`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; } = "-created_at";

        /// <summary>
        /// Filter organization invitations based on their status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public ListInstanceOrganizationInvitationsQueryParamStatus? Status { get; set; }

        /// <summary>
        /// Filter organization invitations based on their `email_address`
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListInstanceOrganizationInvitationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListInstanceOrganizationInvitationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization invitations with public organization data
        /// </summary>
        public OrganizationInvitationsWithPublicOrganizationData? OrganizationInvitationsWithPublicOrganizationData { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListInvitationsQueryParamStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Filter invitations based on their status
    /// </summary>
    public enum ListInvitationsQueryParamStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
        [JsonProperty("expired")]
        Expired,
    }

    public static class ListInvitationsQueryParamStatusExtension
    {
        public static string Value(this ListInvitationsQueryParamStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ListInvitationsQueryParamStatus ToEnum(this string value)
        {
            foreach(var field in typeof(ListInvitationsQueryParamStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ListInvitationsQueryParamStatus)
                    {
                        return (ListInvitationsQueryParamStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ListInvitationsQueryParamStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/ListInvitationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class ListInvitationsRequest
    {

        /// <summary>
        /// Filter invitations based on their status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public ListInvitationsQueryParamStatus? Status { get; set; }

        /// <summary>
        /// Filter invitations based on their `email_address` or `id`
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Allows to return organizations in a particular order.<br/>
        /// 
        /// <remarks>
        /// At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`.<br/>
        /// In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>
        /// For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>
        /// If you don&apos;t use `+` or `-`, then `+` is implied.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListInvitationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class ListInvitationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// List of invitations
        /// </summary>
        public List<Invitation>? InvitationList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListJWTTemplatesRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class ListJWTTemplatesRequest
    {

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListJWTTemplatesResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class ListJWTTemplatesResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// List of JWT templates
        /// </summary>
        public List<JWTTemplate>? JWTTemplateList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOAuthApplicationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class ListOAuthApplicationsRequest
    {

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOAuthApplicationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListOAuthApplicationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of OAuth applications
        /// </summary>
        public OAuthApplications? OAuthApplications { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationDomainsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class ListOrganizationDomainsRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// Filter domains by their verification status. `true` or `false`
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=verified")]
        public string? Verified { get; set; }

        /// <summary>
        /// Filter domains by their enrollment mode
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=enrollment_mode")]
        public string? EnrollmentMode { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationDomainsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListOrganizationDomainsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization domains
        /// </summary>
        public Models.Components.OrganizationDomains? OrganizationDomains { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsQueryParamStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Filter organization invitations based on their status
    /// </summary>
    public enum ListOrganizationInvitationsQueryParamStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class ListOrganizationInvitationsQueryParamStatusExtension
    {
        public static string Value(this ListOrganizationInvitationsQueryParamStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ListOrganizationInvitationsQueryParamStatus ToEnum(this string value)
        {
            foreach(var field in typeof(ListOrganizationInvitationsQueryParamStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ListOrganizationInvitationsQueryParamStatus)
                    {
                        return (ListOrganizationInvitationsQueryParamStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ListOrganizationInvitationsQueryParamStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class ListOrganizationInvitationsRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// Filter organization invitations based on their status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public ListOrganizationInvitationsQueryParamStatus? Status { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationInvitationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListOrganizationInvitationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization invitations
        /// </summary>
        public Models.Components.OrganizationInvitations? OrganizationInvitations { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationMembershipsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System.Collections.Generic;
    
    public class ListOrganizationMembershipsRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>
        /// 
        /// <remarks>
        /// By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.&quot;
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Returns users with the user ids specified. For each user id, the `+` and `-` can be<br/>
        /// 
        /// <remarks>
        /// prepended to the id, which denote whether the respective user id should be included or<br/>
        /// excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public List<string>? UserId { get; set; }

        /// <summary>
        /// Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")]
        public List<string>? EmailAddress { get; set; }

        /// <summary>
        /// Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")]
        public List<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Returns users with the specified usernames.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 usernames.<br/>
        /// Any usernames not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")]
        public List<string>? Username { get; set; }

        /// <summary>
        /// Returns users with the specified web3 wallet addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 web3 wallet addresses.<br/>
        /// Any web3 wallet addressed not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")]
        public List<string>? Web3Wallet { get; set; }

        /// <summary>
        /// Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=role")]
        public List<string>? Role { get; set; }

        /// <summary>
        /// Returns users that match the given query.<br/>
        /// 
        /// <remarks>
        /// For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>
        /// The query value doesn&apos;t need to match the exact value you are looking for, it is capable of partial matches as well.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Returns users with emails that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `email_address_query=ello` will match a user with the email `HELLO@example.com`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address_query")]
        public string? EmailAddressQuery { get; set; }

        /// <summary>
        /// Returns users with phone numbers that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `phone_number_query=555` will match a user with the phone number `+1555xxxxxxx`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number_query")]
        public string? PhoneNumberQuery { get; set; }

        /// <summary>
        /// Returns users with usernames that match the given query, via case-insensitive partial match.<br/>
        /// 
        /// <remarks>
        /// For example, `username_query=CoolUser` will match a user with the username `SomeCoolUser`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username_query")]
        public string? UsernameQuery { get; set; }

        /// <summary>
        /// Returns users with names that match the given query, via case-insensitive partial match.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=name_query")]
        public string? NameQuery { get; set; }

        /// <summary>
        /// Returns users whose last session activity was before the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_before")]
        public long? LastActiveAtBefore { get; set; }

        /// <summary>
        /// Returns users whose last session activity was after the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_after")]
        public long? LastActiveAtAfter { get; set; }

        /// <summary>
        /// Returns users who have been created before the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_before")]
        public long? CreatedAtBefore { get; set; }

        /// <summary>
        /// Returns users who have been created after the given date (with millisecond precision).<br/>
        /// 
        /// <remarks>
        /// Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at_after")]
        public long? CreatedAtAfter { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationMembershipsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListOrganizationMembershipsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization memberships
        /// </summary>
        public Models.Components.OrganizationMemberships? OrganizationMemberships { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System.Collections.Generic;
    
    public class ListOrganizationsRequest
    {

        /// <summary>
        /// Flag to denote whether the member counts of each organization should be included in the response or not.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_members_count")]
        public bool? IncludeMembersCount { get; set; }

        /// <summary>
        /// Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_missing_member_with_elevated_permissions")]
        public bool? IncludeMissingMemberWithElevatedPermissions { get; set; }

        /// <summary>
        /// Returns organizations with ID, name, or slug that match the given query.<br/>
        /// 
        /// <remarks>
        /// Uses exact match for organization ID and partial match for name and slug.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Returns organizations with the user ids specified. Any user ids not found are ignored.<br/>
        /// 
        /// <remarks>
        /// For each user id, the `+` and `-` can be prepended to the id, which denote whether the<br/>
        /// respective organization should be included or excluded from the result set.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public List<string>? UserId { get; set; }

        /// <summary>
        /// Returns organizations with the organization ids specified. Any organization ids not found are ignored.<br/>
        /// 
        /// <remarks>
        /// For each organization id, the `+` and `-` can be prepended to the id, which denote whether the<br/>
        /// respective organization should be included or excluded from the result set. Accepts up to 100 organization ids.<br/>
        /// Example: ?organization_id=+org_1&amp;organization_id=-org_2
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")]
        public List<string>? OrganizationId { get; set; }

        /// <summary>
        /// Allows to return organizations in a particular order.<br/>
        /// 
        /// <remarks>
        /// At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`.<br/>
        /// In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>
        /// For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>
        /// If you don&apos;t use `+` or `-`, then `+` is implied.<br/>
        /// Defaults to `-created_at`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; } = "-created_at";

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListOrganizationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListOrganizationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organizations
        /// </summary>
        public Models.Components.Organizations? Organizations { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListPendingOrganizationInvitationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class ListPendingOrganizationInvitationsRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListPendingOrganizationInvitationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListPendingOrganizationInvitationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization invitations
        /// </summary>
        public Models.Components.OrganizationInvitations? OrganizationInvitations { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListRedirectURLsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class ListRedirectURLsRequest
    {

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListRedirectURLsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class ListRedirectURLsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// List of Redirect URLs
        /// </summary>
        public List<RedirectURL>? RedirectURLList { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListSAMLConnectionsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System.Collections.Generic;
    
    public class ListSAMLConnectionsRequest
    {

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;

        /// <summary>
        /// Returns SAML connections that have a name that matches the given query, via case-insensitive partial match.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>
        /// 
        /// <remarks>
        /// By prepending one of those values with + or -,<br/>
        /// we can choose to sort in ascending (ASC) or descending (DESC) order.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Returns SAML connections that have an associated organization ID to the<br/>
        /// 
        /// <remarks>
        /// given organizations.<br/>
        /// For each organization id, the `+` and `-` can be<br/>
        /// prepended to the id, which denote whether the<br/>
        /// respective organization should be included or<br/>
        /// excluded from the result set.<br/>
        /// Accepts up to 100 organization ids.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")]
        public List<string>? OrganizationId { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListSAMLConnectionsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListSAMLConnectionsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of SAML Connections
        /// </summary>
        public SAMLConnections? SAMLConnections { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesQueryParamStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Filter waitlist entries by their status
    /// </summary>
    public enum ListWaitlistEntriesQueryParamStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("invited")]
        Invited,
        [JsonProperty("completed")]
        Completed,
        [JsonProperty("rejected")]
        Rejected,
    }

    public static class ListWaitlistEntriesQueryParamStatusExtension
    {
        public static string Value(this ListWaitlistEntriesQueryParamStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ListWaitlistEntriesQueryParamStatus ToEnum(this string value)
        {
            foreach(var field in typeof(ListWaitlistEntriesQueryParamStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ListWaitlistEntriesQueryParamStatus)
                    {
                        return (ListWaitlistEntriesQueryParamStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ListWaitlistEntriesQueryParamStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class ListWaitlistEntriesRequest
    {

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;

        /// <summary>
        /// Filter waitlist entries by `email_address` or `id`
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Filter waitlist entries by their status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public ListWaitlistEntriesQueryParamStatus? Status { get; set; }

        /// <summary>
        /// Specify the order of results. Supported values are:<br/>
        /// 
        /// <remarks>
        /// - `created_at`<br/>
        /// - `email_address`<br/>
        /// - `invited_at`<br/>
        /// <br/>
        /// Use `+` for ascending or `-` for descending order. Defaults to `-created_at`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; } = "-created_at";
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ListWaitlistEntriesResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ListWaitlistEntriesResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// List of waitlist entries
        /// </summary>
        public Models.Components.WaitlistEntries? WaitlistEntries { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/LockUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class LockUserRequest
    {

        /// <summary>
        /// The ID of the user to lock
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/LockUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class LockUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class MergeOrganizationMetadataRequest
    {

        /// <summary>
        /// The ID of the organization for which metadata will be merged or updated
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public MergeOrganizationMetadataRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class MergeOrganizationMetadataRequestBody
    {

        /// <summary>
        /// Metadata saved on the organization, that is visible to both your frontend and backend.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        /// <summary>
        /// Metadata saved on the organization that is only visible to your backend.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.
        /// </remarks>
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/MergeOrganizationMetadataResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class MergeOrganizationMetadataResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization
        /// </summary>
        public Organization? Organization { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/Object.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Object
    {
        [JsonProperty("token")]
        Token,
    }

    public static class ObjectExtension
    {
        public static string Value(this Object value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Object ToEnum(this string value)
        {
            foreach(var field in typeof(Object).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Object)
                    {
                        return (Object)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Object");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/PathParamTemplateType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of templates to retrieve (email or SMS)
    /// </summary>
    public enum PathParamTemplateType
    {
        [JsonProperty("email")]
        Email,
        [JsonProperty("sms")]
        Sms,
    }

    public static class PathParamTemplateTypeExtension
    {
        public static string Value(this PathParamTemplateType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PathParamTemplateType ToEnum(this string value)
        {
            foreach(var field in typeof(PathParamTemplateType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PathParamTemplateType)
                    {
                        return (PathParamTemplateType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PathParamTemplateType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/PreviewTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class PreviewTemplateRequest
    {

        /// <summary>
        /// The type of template to preview
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")]
        public string TemplateType { get; set; } = default!;

        /// <summary>
        /// The slug of the template to preview
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=slug")]
        public string Slug { get; set; } = default!;

        /// <summary>
        /// Required parameters
        /// </summary>
        [SpeakeasyMetadata("request:mediaType=application/json")]
        public PreviewTemplateRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/PreviewTemplateRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Required parameters
    /// </summary>
    public class PreviewTemplateRequestBody
    {

        /// <summary>
        /// The email subject.<br/>
        /// 
        /// <remarks>
        /// Applicable only to email templates.
        /// </remarks>
        /// </summary>
        [JsonProperty("subject")]
        public string? Subject { get; set; } = null;

        /// <summary>
        /// The template body before variable interpolation
        /// </summary>
        [JsonProperty("body")]
        public string? Body { get; set; }

        /// <summary>
        /// The local part of the From email address that will be used for emails.<br/>
        /// 
        /// <remarks>
        /// For example, in the address &apos;hello@example.com&apos;, the local part is &apos;hello&apos;.<br/>
        /// Applicable only to email templates.
        /// </remarks>
        /// </summary>
        [JsonProperty("from_email_name")]
        public string? FromEmailName { get; set; }

        /// <summary>
        /// The local part of the Reply To email address that will be used for emails.<br/>
        /// 
        /// <remarks>
        /// For example, in the address &apos;hello@example.com&apos;, the local part is &apos;hello&apos;.<br/>
        /// Applicable only to email templates.
        /// </remarks>
        /// </summary>
        [JsonProperty("reply_to_email_name")]
        public string? ReplyToEmailName { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/PreviewTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class PreviewTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// OK
        /// </summary>
        public PreviewTemplateResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/PreviewTemplateResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    /// <summary>
    /// OK
    /// </summary>
    public class PreviewTemplateResponseBody
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/Provider.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The IdP provider of the connection.
    /// </summary>
    public enum Provider
    {
        [JsonProperty("saml_custom")]
        SamlCustom,
        [JsonProperty("saml_okta")]
        SamlOkta,
        [JsonProperty("saml_google")]
        SamlGoogle,
        [JsonProperty("saml_microsoft")]
        SamlMicrosoft,
    }

    public static class ProviderExtension
    {
        public static string Value(this Provider value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Provider ToEnum(this string value)
        {
            foreach(var field in typeof(Provider).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Provider)
                    {
                        return (Provider)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Provider");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/QueryParamStatus.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Filter organization invitations based on their status
    /// </summary>
    public enum QueryParamStatus
    {
        [JsonProperty("pending")]
        Pending,
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class QueryParamStatusExtension
    {
        public static string Value(this QueryParamStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static QueryParamStatus ToEnum(this string value)
        {
            foreach(var field in typeof(QueryParamStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is QueryParamStatus)
                    {
                        return (QueryParamStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum QueryParamStatus");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/RequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class RequestBody
    {

        /// <summary>
        /// The email address the invitation will be sent to
        /// </summary>
        [JsonProperty("email_address")]
        public string EmailAddress { get; set; } = default!;

        /// <summary>
        /// Metadata that will be attached to the newly created invitation.<br/>
        /// 
        /// <remarks>
        /// The value of this property should be a well-formed JSON object.<br/>
        /// Once the user accepts the invitation and signs up, these metadata will end up in the user&apos;s public metadata.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; } = null;

        /// <summary>
        /// The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a <a href="/docs/custom-flows/invitations">custom flow for handling application invitations</a>.
        /// </summary>
        [JsonProperty("redirect_url")]
        public string? RedirectUrl { get; set; } = null;

        /// <summary>
        /// Optional flag which denotes whether an email invitation should be sent to the given email address.<br/>
        /// 
        /// <remarks>
        /// Defaults to true.
        /// </remarks>
        /// </summary>
        [JsonProperty("notify")]
        public bool? Notify { get; set; } = true;

        /// <summary>
        /// Whether an invitation should be created if there is already an existing invitation for this email<br/>
        /// 
        /// <remarks>
        /// address, or it&apos;s claimed by another user.
        /// </remarks>
        /// </summary>
        [JsonProperty("ignore_existing")]
        public bool? IgnoreExisting { get; set; } = false;

        /// <summary>
        /// The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
        /// </summary>
        [JsonProperty("expires_in_days")]
        public long? ExpiresInDays { get; set; } = null;

        /// <summary>
        /// The slug of the email template to use for the invitation email.
        /// </summary>
        [JsonProperty("template_slug")]
        public CreateBulkInvitationsTemplateSlug? TemplateSlug { get; set; } = Clerk.BackendAPI.Models.Operations.CreateBulkInvitationsTemplateSlug.Invitation;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class ResponseBody
    {

        [JsonProperty("object")]
        public string? Object { get; set; }

        /// <summary>
        /// External account ID
        /// </summary>
        [JsonProperty("external_account_id")]
        public string? ExternalAccountId { get; set; }

        /// <summary>
        /// The unique ID of the user in the external provider&apos;s system
        /// </summary>
        [JsonProperty("provider_user_id")]
        public string? ProviderUserId { get; set; }

        /// <summary>
        /// The access token
        /// </summary>
        [JsonProperty("token")]
        public string? Token { get; set; }

        /// <summary>
        /// The ID of the provider
        /// </summary>
        [JsonProperty("provider")]
        public string? Provider { get; set; }

        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        [JsonProperty("label")]
        public string? Label { get; set; } = null;

        /// <summary>
        /// The list of scopes that the token is valid for.<br/>
        /// 
        /// <remarks>
        /// Only present for OAuth 2.0 tokens.
        /// </remarks>
        /// </summary>
        [JsonProperty("scopes")]
        public List<string>? Scopes { get; set; }

        /// <summary>
        /// The token secret. Only present for OAuth 1.0 tokens.
        /// </summary>
        [JsonProperty("token_secret")]
        public string? TokenSecret { get; set; }

        /// <summary>
        /// Unix timestamp of the access token expiration.
        /// </summary>
        [JsonProperty("expires_at")]
        public long? ExpiresAt { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevertTemplatePathParamTemplateType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of template to revert
    /// </summary>
    public enum RevertTemplatePathParamTemplateType
    {
        [JsonProperty("email")]
        Email,
        [JsonProperty("sms")]
        Sms,
    }

    public static class RevertTemplatePathParamTemplateTypeExtension
    {
        public static string Value(this RevertTemplatePathParamTemplateType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static RevertTemplatePathParamTemplateType ToEnum(this string value)
        {
            foreach(var field in typeof(RevertTemplatePathParamTemplateType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is RevertTemplatePathParamTemplateType)
                    {
                        return (RevertTemplatePathParamTemplateType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum RevertTemplatePathParamTemplateType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/RevertTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class RevertTemplateRequest
    {

        /// <summary>
        /// The type of template to revert
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")]
        public RevertTemplatePathParamTemplateType TemplateType { get; set; } = default!;

        /// <summary>
        /// The slug of the template to revert
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=slug")]
        public string Slug { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevertTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevertTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Template? Template { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeActorTokenRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class RevokeActorTokenRequest
    {

        /// <summary>
        /// The ID of the actor token to be revoked.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=actor_token_id")]
        public string ActorTokenId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeActorTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevokeActorTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public ActorToken? ActorToken { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeInvitationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class RevokeInvitationRequest
    {

        /// <summary>
        /// The ID of the invitation to be revoked
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=invitation_id")]
        public string InvitationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeInvitationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevokeInvitationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public InvitationRevoked? InvitationRevoked { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class RevokeOrganizationInvitationRequest
    {

        /// <summary>
        /// The organization ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The organization invitation ID.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=invitation_id")]
        public string InvitationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public RevokeOrganizationInvitationRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevokeOrganizationInvitationRequestBody
    {

        /// <summary>
        /// The ID of the user that revokes the invitation.<br/>
        /// 
        /// <remarks>
        /// Must be an administrator in the organization.
        /// </remarks>
        /// </summary>
        [JsonProperty("requesting_user_id")]
        public string? RequestingUserId { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeOrganizationInvitationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevokeOrganizationInvitationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization invitation
        /// </summary>
        public OrganizationInvitation? OrganizationInvitation { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeSessionRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class RevokeSessionRequest
    {

        /// <summary>
        /// The ID of the session
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=session_id")]
        public string SessionId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeSessionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevokeSessionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Session? Session { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeSignInTokenRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class RevokeSignInTokenRequest
    {

        /// <summary>
        /// The ID of the sign-in token to be revoked
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sign_in_token_id")]
        public string SignInTokenId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RevokeSignInTokenResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RevokeSignInTokenResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public SignInToken? SignInToken { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RotateOAuthApplicationSecretRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class RotateOAuthApplicationSecretRequest
    {

        /// <summary>
        /// The ID of the OAuth application for which to rotate the client secret
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=oauth_application_id")]
        public string OauthApplicationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/RotateOAuthApplicationSecretResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class RotateOAuthApplicationSecretResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An OAuth application with client secret
        /// </summary>
        public OAuthApplicationWithSecret? OAuthApplicationWithSecret { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class SetUserProfileImageRequest
    {

        /// <summary>
        /// The ID of the user to update the profile image for
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=multipart/form-data")]
        public SetUserProfileImageRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class SetUserProfileImageRequestBody
    {

        [SpeakeasyMetadata("multipartForm:file,name=file")]
        public File? File { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/SetUserProfileImageResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class SetUserProfileImageResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/Status.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Filter sessions by the provided status
    /// </summary>
    public enum Status
    {
        [JsonProperty("abandoned")]
        Abandoned,
        [JsonProperty("active")]
        Active,
        [JsonProperty("ended")]
        Ended,
        [JsonProperty("expired")]
        Expired,
        [JsonProperty("removed")]
        Removed,
        [JsonProperty("replaced")]
        Replaced,
        [JsonProperty("revoked")]
        Revoked,
    }

    public static class StatusExtension
    {
        public static string Value(this Status value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Status ToEnum(this string value)
        {
            foreach(var field in typeof(Status).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Status)
                    {
                        return (Status)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Status");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/TemplateSlug.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The slug of the email template to use for the invitation email.
    /// </summary>
    public enum TemplateSlug
    {
        [JsonProperty("invitation")]
        Invitation,
        [JsonProperty("waitlist_invitation")]
        WaitlistInvitation,
    }

    public static class TemplateSlugExtension
    {
        public static string Value(this TemplateSlug value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TemplateSlug ToEnum(this string value)
        {
            foreach(var field in typeof(TemplateSlug).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TemplateSlug)
                    {
                        return (TemplateSlug)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TemplateSlug");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/TemplateType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of templates to list (email or SMS)
    /// </summary>
    public enum TemplateType
    {
        [JsonProperty("email")]
        Email,
        [JsonProperty("sms")]
        Sms,
    }

    public static class TemplateTypeExtension
    {
        public static string Value(this TemplateType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TemplateType ToEnum(this string value)
        {
            foreach(var field in typeof(TemplateType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TemplateType)
                    {
                        return (TemplateType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TemplateType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryPathParamTemplateType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of template to toggle delivery for
    /// </summary>
    public enum ToggleTemplateDeliveryPathParamTemplateType
    {
        [JsonProperty("email")]
        Email,
        [JsonProperty("sms")]
        Sms,
    }

    public static class ToggleTemplateDeliveryPathParamTemplateTypeExtension
    {
        public static string Value(this ToggleTemplateDeliveryPathParamTemplateType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ToggleTemplateDeliveryPathParamTemplateType ToEnum(this string value)
        {
            foreach(var field in typeof(ToggleTemplateDeliveryPathParamTemplateType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ToggleTemplateDeliveryPathParamTemplateType)
                    {
                        return (ToggleTemplateDeliveryPathParamTemplateType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ToggleTemplateDeliveryPathParamTemplateType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class ToggleTemplateDeliveryRequest
    {

        /// <summary>
        /// The type of template to toggle delivery for
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")]
        public ToggleTemplateDeliveryPathParamTemplateType TemplateType { get; set; } = default!;

        /// <summary>
        /// The slug of the template for which to toggle delivery
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=slug")]
        public string Slug { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public ToggleTemplateDeliveryRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ToggleTemplateDeliveryRequestBody
    {

        /// <summary>
        /// Whether Clerk should deliver emails or SMS messages based on the current template
        /// </summary>
        [JsonProperty("delivered_by_clerk")]
        public bool? DeliveredByClerk { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/ToggleTemplateDeliveryResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class ToggleTemplateDeliveryResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Template? Template { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UnbanUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class UnbanUserRequest
    {

        /// <summary>
        /// The ID of the user to unban
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UnbanUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UnbanUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UnlockUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class UnlockUserRequest
    {

        /// <summary>
        /// The ID of the user to unlock
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UnlockUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UnlockUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateDomainRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateDomainRequest
    {

        /// <summary>
        /// The ID of the domain that will be updated.
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=domain_id")]
        public string DomainId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateDomainRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateDomainRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateDomainRequestBody
    {

        /// <summary>
        /// The new domain name. For development instances, can contain the port,<br/>
        /// 
        /// <remarks>
        /// i.e `myhostname:3000`. For production instances, must be a valid FQDN,<br/>
        /// i.e `mysite.com`. Cannot contain protocol scheme.
        /// </remarks>
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; } = null;

        /// <summary>
        /// The full URL of the proxy that will forward requests to Clerk&apos;s Frontend API.<br/>
        /// 
        /// <remarks>
        /// Can only be updated for production instances.
        /// </remarks>
        /// </summary>
        [JsonProperty("proxy_url")]
        public string? ProxyUrl { get; set; } = null;

        /// <summary>
        /// Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and<br/>
        /// 
        /// <remarks>
        /// will be stored as part of the domain. This is useful for supporting multiple apps (one primary and<br/>
        /// multiple secondaries) on the same root domain (eTLD+1).
        /// </remarks>
        /// </summary>
        [JsonProperty("is_secondary")]
        public bool? IsSecondary { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A domain
        /// </summary>
        public Domain? Domain { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateEmailAddressRequest
    {

        /// <summary>
        /// The ID of the email address to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=email_address_id")]
        public string EmailAddressId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateEmailAddressRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateEmailAddressRequestBody
    {

        /// <summary>
        /// The email address will be marked as verified.
        /// </summary>
        [JsonProperty("verified")]
        public bool? Verified { get; set; } = null;

        /// <summary>
        /// Set this email address as the primary email address for the user.
        /// </summary>
        [JsonProperty("primary")]
        public bool? Primary { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateEmailAddressResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateEmailAddressResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public EmailAddress? EmailAddress { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceAuthConfigRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateInstanceAuthConfigRequestBody
    {

        /// <summary>
        /// Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist.
        /// </summary>
        [JsonProperty("restricted_to_allowlist")]
        public bool? RestrictedToAllowlist { get; set; } = false;

        /// <summary>
        /// The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent.<br/>
        /// 
        /// <remarks>
        /// Only alphanumeric values are allowed.<br/>
        /// Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).
        /// </remarks>
        /// </summary>
        [JsonProperty("from_email_address")]
        public string? FromEmailAddress { get; set; } = null;

        /// <summary>
        /// Enable the Progressive Sign Up algorithm. Refer to the <a href="https://clerk.com/docs/upgrade-guides/progressive-sign-up">docs</a> for more info.
        /// </summary>
        [JsonProperty("progressive_sign_up")]
        public bool? ProgressiveSignUp { get; set; } = null;

        /// <summary>
        /// The &quot;enhanced_email_deliverability&quot; feature will send emails from &quot;verifications@clerk.dev&quot; instead of your domain.<br/>
        /// 
        /// <remarks>
        /// This can be helpful if you do not have a high domain reputation.
        /// </remarks>
        /// </summary>
        [JsonProperty("enhanced_email_deliverability")]
        public bool? EnhancedEmailDeliverability { get; set; } = null;

        /// <summary>
        /// Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.<br/>
        /// 
        /// <remarks>
        /// Defaults to true for development instances.
        /// </remarks>
        /// </summary>
        [JsonProperty("test_mode")]
        public bool? TestMode { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceAuthConfigResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateInstanceAuthConfigResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// InstanceSettings Server API
        /// </summary>
        public Models.Components.InstanceSettings? InstanceSettings { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceOrganizationSettingsRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class UpdateInstanceOrganizationSettingsRequestBody
    {

        [JsonProperty("enabled")]
        public bool? Enabled { get; set; } = null;

        [JsonProperty("max_allowed_memberships")]
        public long? MaxAllowedMemberships { get; set; } = null;

        [JsonProperty("admin_delete_enabled")]
        public bool? AdminDeleteEnabled { get; set; } = null;

        [JsonProperty("domains_enabled")]
        public bool? DomainsEnabled { get; set; } = null;

        /// <summary>
        /// Specify which enrollment modes to enable for your Organization Domains.<br/>
        /// 
        /// <remarks>
        /// Supported modes are &apos;automatic_invitation&apos; &amp; &apos;automatic_suggestion&apos;.
        /// </remarks>
        /// </summary>
        [JsonProperty("domains_enrollment_modes")]
        public List<string>? DomainsEnrollmentModes { get; set; }

        /// <summary>
        /// Specify what the default organization role is for an organization creator.
        /// </summary>
        [JsonProperty("creator_role_id")]
        public string? CreatorRoleId { get; set; } = null;

        /// <summary>
        /// Specify what the default organization role is for the organization domains.
        /// </summary>
        [JsonProperty("domains_default_role_id")]
        public string? DomainsDefaultRoleId { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceOrganizationSettingsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateInstanceOrganizationSettingsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public OrganizationSettings? OrganizationSettings { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class UpdateInstanceRequestBody
    {

        /// <summary>
        /// Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.<br/>
        /// 
        /// <remarks>
        /// Defaults to true for development instances.
        /// </remarks>
        /// </summary>
        [JsonProperty("test_mode")]
        public bool? TestMode { get; set; } = null;

        /// <summary>
        /// Whether the instance should be using the HIBP service to check passwords for breaches
        /// </summary>
        [JsonProperty("hibp")]
        public bool? Hibp { get; set; } = null;

        /// <summary>
        /// The &quot;enhanced_email_deliverability&quot; feature will send emails from &quot;verifications@clerk.dev&quot; instead of your domain.<br/>
        /// 
        /// <remarks>
        /// This can be helpful if you do not have a high domain reputation.
        /// </remarks>
        /// </summary>
        [JsonProperty("enhanced_email_deliverability")]
        public bool? EnhancedEmailDeliverability { get; set; } = null;

        [JsonProperty("support_email")]
        public string? SupportEmail { get; set; } = null;

        [JsonProperty("clerk_js_version")]
        public string? ClerkJsVersion { get; set; } = null;

        [JsonProperty("development_origin")]
        public string? DevelopmentOrigin { get; set; } = null;

        /// <summary>
        /// For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value.<br/>
        /// 
        /// <remarks>
        /// For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost.
        /// </remarks>
        /// </summary>
        [JsonProperty("allowed_origins")]
        public List<string>? AllowedOrigins { get; set; }

        /// <summary>
        /// Whether the instance should operate in cookieless development mode (i.e. without third-party cookies).<br/>
        /// 
        /// <remarks>
        /// Deprecated: Please use `url_based_session_syncing` instead.
        /// </remarks>
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("cookieless_dev")]
        public bool? CookielessDev { get; set; } = null;

        /// <summary>
        /// Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).
        /// </summary>
        [JsonProperty("url_based_session_syncing")]
        public bool? UrlBasedSessionSyncing { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateInstanceResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRestrictionsRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateInstanceRestrictionsRequestBody
    {

        [JsonProperty("allowlist")]
        public bool? Allowlist { get; set; } = null;

        [JsonProperty("blocklist")]
        public bool? Blocklist { get; set; } = null;

        [JsonProperty("block_email_subaddresses")]
        public bool? BlockEmailSubaddresses { get; set; } = null;

        [JsonProperty("block_disposable_email_domains")]
        public bool? BlockDisposableEmailDomains { get; set; } = null;

        [JsonProperty("ignore_dots_for_gmail_addresses")]
        public bool? IgnoreDotsForGmailAddresses { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateInstanceRestrictionsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateInstanceRestrictionsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public InstanceRestrictions? InstanceRestrictions { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateClaims.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    /// <summary>
    /// JWT template claims in JSON format
    /// </summary>
    public class UpdateJWTTemplateClaims
    {
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateJWTTemplateRequest
    {

        /// <summary>
        /// The ID of the JWT template to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_id")]
        public string TemplateId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateJWTTemplateRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateJWTTemplateRequestBody
    {

        /// <summary>
        /// JWT template name
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// JWT template claims in JSON format
        /// </summary>
        [JsonProperty("claims")]
        public UpdateJWTTemplateClaims Claims { get; set; } = default!;

        /// <summary>
        /// JWT token lifetime
        /// </summary>
        [JsonProperty("lifetime")]
        public double? Lifetime { get; set; } = null;

        /// <summary>
        /// JWT token allowed clock skew
        /// </summary>
        [JsonProperty("allowed_clock_skew")]
        public double? AllowedClockSkew { get; set; } = null;

        /// <summary>
        /// Whether a custom signing key/algorithm is also provided for this template
        /// </summary>
        [JsonProperty("custom_signing_key")]
        public bool? CustomSigningKey { get; set; }

        /// <summary>
        /// The custom signing algorithm to use when minting JWTs. Required if `custom_signing_key` is `true`.
        /// </summary>
        [JsonProperty("signing_algorithm")]
        public string? SigningAlgorithm { get; set; } = null;

        /// <summary>
        /// The custom signing private key to use when minting JWTs. Required if `custom_signing_key` is `true`.
        /// </summary>
        [JsonProperty("signing_key")]
        public string? SigningKey { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateJWTTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateJWTTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public JWTTemplate? JWTTemplate { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateOAuthApplicationRequest
    {

        /// <summary>
        /// The ID of the OAuth application to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=oauth_application_id")]
        public string OauthApplicationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateOAuthApplicationRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class UpdateOAuthApplicationRequestBody
    {

        /// <summary>
        /// The new name of the OAuth application.<br/>
        /// 
        /// <remarks>
        /// Max length: 256
        /// </remarks>
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; } = null;

        /// <summary>
        /// An array of redirect URIs of the new OAuth application
        /// </summary>
        [JsonProperty("redirect_uris")]
        public List<string>? RedirectUris { get; set; } = null;

        /// <summary>
        /// The new callback URL of the OAuth application
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("callback_url")]
        public string? CallbackUrl { get; set; } = null;

        /// <summary>
        /// Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
        /// </summary>
        [JsonProperty("scopes")]
        public string? Scopes { get; set; } = "profile email";

        /// <summary>
        /// If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
        /// </summary>
        [JsonProperty("public")]
        public bool? Public { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOAuthApplicationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOAuthApplicationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An OAuth application
        /// </summary>
        public OAuthApplication? OAuthApplication { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateOrganizationDomainRequest
    {

        /// <summary>
        /// The ID of the organization the domain belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The ID of the domain
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=domain_id")]
        public string DomainId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateOrganizationDomainRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOrganizationDomainRequestBody
    {

        /// <summary>
        /// The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation`
        /// </summary>
        [JsonProperty("enrollment_mode")]
        public string? EnrollmentMode { get; set; } = null;

        /// <summary>
        /// The status of the domain&apos;s verification
        /// </summary>
        [JsonProperty("verified")]
        public bool? Verified { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOrganizationDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization domain
        /// </summary>
        public OrganizationDomain? OrganizationDomain { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateOrganizationMembershipMetadataRequest
    {

        /// <summary>
        /// The ID of the organization the membership belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The ID of the user that this membership belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateOrganizationMembershipMetadataRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class UpdateOrganizationMembershipMetadataRequestBody
    {

        /// <summary>
        /// Metadata saved on the organization membership, that is visible to both your frontend and backend.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        /// <summary>
        /// Metadata saved on the organization membership that is only visible to your backend.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.
        /// </remarks>
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipMetadataResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOrganizationMembershipMetadataResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public OrganizationMembership? OrganizationMembership { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateOrganizationMembershipRequest
    {

        /// <summary>
        /// The ID of the organization the membership belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        /// <summary>
        /// The ID of the user that this membership belongs to
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateOrganizationMembershipRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOrganizationMembershipRequestBody
    {

        /// <summary>
        /// The new role of the given membership.
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationMembershipResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOrganizationMembershipResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public OrganizationMembership? OrganizationMembership { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateOrganizationRequest
    {

        /// <summary>
        /// The ID of the organization to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateOrganizationRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class UpdateOrganizationRequestBody
    {

        /// <summary>
        /// Metadata saved on the organization, that is visible to both your frontend and backend.
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; } = null;

        /// <summary>
        /// Metadata saved on the organization that is only visible to your backend.
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        /// <summary>
        /// The new name of the organization.<br/>
        /// 
        /// <remarks>
        /// May not contain URLs or HTML.<br/>
        /// Max length: 256
        /// </remarks>
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; } = null;

        /// <summary>
        /// The new slug of the organization, which needs to be unique in the instance
        /// </summary>
        [JsonProperty("slug")]
        public string? Slug { get; set; } = null;

        /// <summary>
        /// The maximum number of memberships allowed for this organization
        /// </summary>
        [JsonProperty("max_allowed_memberships")]
        public long? MaxAllowedMemberships { get; set; } = null;

        /// <summary>
        /// If true, an admin can delete this organization with the Frontend API.
        /// </summary>
        [JsonProperty("admin_delete_enabled")]
        public bool? AdminDeleteEnabled { get; set; } = null;

        /// <summary>
        /// A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
        /// </summary>
        [JsonProperty("created_at")]
        public string? CreatedAt { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateOrganizationResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateOrganizationResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization
        /// </summary>
        public Organization? Organization { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdatePhoneNumberRequest
    {

        /// <summary>
        /// The ID of the phone number to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=phone_number_id")]
        public string PhoneNumberId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdatePhoneNumberRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdatePhoneNumberRequestBody
    {

        /// <summary>
        /// The phone number will be marked as verified.
        /// </summary>
        [JsonProperty("verified")]
        public bool? Verified { get; set; } = null;

        /// <summary>
        /// Set this phone number as the primary phone number for the user.
        /// </summary>
        [JsonProperty("primary")]
        public bool? Primary { get; set; } = null;

        /// <summary>
        /// Set this phone number as reserved for multi-factor authentication.<br/>
        /// 
        /// <remarks>
        /// The phone number must also be verified.<br/>
        /// If there are no other reserved second factors, the phone number will be set as the default second factor.
        /// </remarks>
        /// </summary>
        [JsonProperty("reserved_for_second_factor")]
        public bool? ReservedForSecondFactor { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdatePhoneNumberResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdatePhoneNumberResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public PhoneNumber? PhoneNumber { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateProductionInstanceDomainRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateProductionInstanceDomainRequestBody
    {

        /// <summary>
        /// The new home URL of the production instance e.g. https://www.example.com
        /// </summary>
        [JsonProperty("home_url")]
        public string? HomeUrl { get; set; }

        /// <summary>
        /// Whether the domain is a secondary app.
        /// </summary>
        [JsonProperty("is_secondary")]
        public bool? IsSecondary { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateProductionInstanceDomainResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateProductionInstanceDomainResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionAttributeMapping.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Define the atrtibute name mapping between Identity Provider and Clerk&apos;s user properties
    /// </summary>
    public class UpdateSAMLConnectionAttributeMapping
    {

        [JsonProperty("user_id")]
        public string? UserId { get; set; }

        [JsonProperty("email_address")]
        public string? EmailAddress { get; set; }

        [JsonProperty("first_name")]
        public string? FirstName { get; set; }

        [JsonProperty("last_name")]
        public string? LastName { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateSAMLConnectionRequest
    {

        /// <summary>
        /// The ID of the SAML Connection to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=saml_connection_id")]
        public string SamlConnectionId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateSAMLConnectionRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateSAMLConnectionRequestBody
    {

        /// <summary>
        /// The name of the new SAML Connection
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; } = null;

        /// <summary>
        /// The domain to use for the new SAML Connection
        /// </summary>
        [JsonProperty("domain")]
        public string? Domain { get; set; } = null;

        /// <summary>
        /// The entity id as provided by the IdP
        /// </summary>
        [JsonProperty("idp_entity_id")]
        public string? IdpEntityId { get; set; } = null;

        /// <summary>
        /// The SSO url as provided by the IdP
        /// </summary>
        [JsonProperty("idp_sso_url")]
        public string? IdpSsoUrl { get; set; } = null;

        /// <summary>
        /// The x509 certificated as provided by the IdP
        /// </summary>
        [JsonProperty("idp_certificate")]
        public string? IdpCertificate { get; set; } = null;

        /// <summary>
        /// The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
        /// </summary>
        [JsonProperty("idp_metadata_url")]
        public string? IdpMetadataUrl { get; set; } = null;

        /// <summary>
        /// The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
        /// </summary>
        [JsonProperty("idp_metadata")]
        public string? IdpMetadata { get; set; } = null;

        /// <summary>
        /// The ID of the organization to which users of this SAML Connection will be added
        /// </summary>
        [JsonProperty("organization_id")]
        public string? OrganizationId { get; set; } = null;

        /// <summary>
        /// Define the atrtibute name mapping between Identity Provider and Clerk&apos;s user properties
        /// </summary>
        [JsonProperty("attribute_mapping")]
        public UpdateSAMLConnectionAttributeMapping? AttributeMapping { get; set; } = null;

        /// <summary>
        /// Activate or de-activate the SAML Connection
        /// </summary>
        [JsonProperty("active")]
        public bool? Active { get; set; } = null;

        /// <summary>
        /// Controls whether to update the user&apos;s attributes in each sign-in
        /// </summary>
        [JsonProperty("sync_user_attributes")]
        public bool? SyncUserAttributes { get; set; } = null;

        /// <summary>
        /// Allow users with an email address subdomain to use this connection in order to authenticate
        /// </summary>
        [JsonProperty("allow_subdomains")]
        public bool? AllowSubdomains { get; set; } = null;

        /// <summary>
        /// Enable or deactivate IdP-initiated flows
        /// </summary>
        [JsonProperty("allow_idp_initiated")]
        public bool? AllowIdpInitiated { get; set; } = null;

        /// <summary>
        /// Enable or deactivate additional identifications
        /// </summary>
        [JsonProperty("disable_additional_identifications")]
        public bool? DisableAdditionalIdentifications { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSAMLConnectionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateSAMLConnectionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A SAML Connection
        /// </summary>
        public SchemasSAMLConnection? SchemasSAMLConnection { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSignUpRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateSignUpRequest
    {

        /// <summary>
        /// The ID of the sign-up to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")]
        public string Id { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateSignUpRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSignUpRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateSignUpRequestBody
    {

        /// <summary>
        /// The ID of the guest attempting to sign up as used in your external systems or your previous authentication solution.<br/>
        /// 
        /// <remarks>
        /// This will be copied to the resulting user when the sign-up is completed.
        /// </remarks>
        /// </summary>
        [JsonProperty("external_id")]
        public string? ExternalId { get; set; } = null;

        /// <summary>
        /// If true, the sign-up will be marked as a custom action.
        /// </summary>
        [JsonProperty("custom_action")]
        public bool? CustomAction { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateSignUpResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateSignUpResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public SignUp? SignUp { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateUserMetadataRequest
    {

        /// <summary>
        /// The ID of the user whose metadata will be updated and merged
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateUserMetadataRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class UpdateUserMetadataRequestBody
    {

        /// <summary>
        /// Metadata saved on the user, that is visible to both your frontend and backend.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.
        /// </remarks>
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; }

        /// <summary>
        /// Metadata saved on the user that is only visible to your backend.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.
        /// </remarks>
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; }

        /// <summary>
        /// Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.<br/>
        /// 
        /// <remarks>
        /// The new object will be merged with the existing value.<br/>
        /// <br/>
        /// Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
        /// </remarks>
        /// </summary>
        [JsonProperty("unsafe_metadata")]
        public Dictionary<string, object>? UnsafeMetadata { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateUserMetadataResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateUserMetadataResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateUserRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpdateUserRequest
    {

        /// <summary>
        /// The ID of the user to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpdateUserRequestBody RequestBody { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateUserRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class UpdateUserRequestBody
    {

        /// <summary>
        /// The ID of the user as used in your external systems or your previous authentication solution.<br/>
        /// 
        /// <remarks>
        /// Must be unique across your instance.
        /// </remarks>
        /// </summary>
        [JsonProperty("external_id")]
        public string? ExternalId { get; set; } = null;

        /// <summary>
        /// The first name to assign to the user
        /// </summary>
        [JsonProperty("first_name")]
        public string? FirstName { get; set; } = null;

        /// <summary>
        /// The last name to assign to the user
        /// </summary>
        [JsonProperty("last_name")]
        public string? LastName { get; set; } = null;

        /// <summary>
        /// The ID of the email address to set as primary.<br/>
        /// 
        /// <remarks>
        /// It must be verified, and present on the current user.
        /// </remarks>
        /// </summary>
        [JsonProperty("primary_email_address_id")]
        public string? PrimaryEmailAddressId { get; set; } = null;

        /// <summary>
        /// If set to `true`, the user will be notified that their primary email address has changed.<br/>
        /// 
        /// <remarks>
        /// By default, no notification is sent.
        /// </remarks>
        /// </summary>
        [JsonProperty("notify_primary_email_address_changed")]
        public bool? NotifyPrimaryEmailAddressChanged { get; set; } = false;

        /// <summary>
        /// The ID of the phone number to set as primary.<br/>
        /// 
        /// <remarks>
        /// It must be verified, and present on the current user.
        /// </remarks>
        /// </summary>
        [JsonProperty("primary_phone_number_id")]
        public string? PrimaryPhoneNumberId { get; set; } = null;

        /// <summary>
        /// The ID of the web3 wallets to set as primary.<br/>
        /// 
        /// <remarks>
        /// It must be verified, and present on the current user.
        /// </remarks>
        /// </summary>
        [JsonProperty("primary_web3_wallet_id")]
        public string? PrimaryWeb3WalletId { get; set; } = null;

        /// <summary>
        /// The username to give to the user.<br/>
        /// 
        /// <remarks>
        /// It must be unique across your instance.
        /// </remarks>
        /// </summary>
        [JsonProperty("username")]
        public string? Username { get; set; } = null;

        /// <summary>
        /// The ID of the image to set as the user&apos;s profile image
        /// </summary>
        [JsonProperty("profile_image_id")]
        public string? ProfileImageId { get; set; } = null;

        /// <summary>
        /// The plaintext password to give the user.<br/>
        /// 
        /// <remarks>
        /// Must be at least 8 characters long, and can not be in any list of hacked passwords.
        /// </remarks>
        /// </summary>
        [JsonProperty("password")]
        public string? Password { get; set; } = null;

        /// <summary>
        /// In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.<br/>
        /// 
        /// <remarks>
        /// The digests should be generated with one of the supported algorithms.<br/>
        /// The hashing algorithm can be specified using the `password_hasher` property.
        /// </remarks>
        /// </summary>
        [JsonProperty("password_digest")]
        public string? PasswordDigest { get; set; }

        /// <summary>
        /// The hashing algorithm that was used to generate the password digest.<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// The algorithms we support at the moment are <a href="https://en.wikipedia.org/wiki/Bcrypt">`bcrypt`</a>, <a href="https://docs.djangoproject.com/en/4.0/topics/auth/passwords/">`bcrypt_sha256_django`</a>, <a href="https://en.wikipedia.org/wiki/MD5">`md5`</a>, `pbkdf2_sha1`, `pbkdf2_sha256`, <a href="https://docs.djangoproject.com/en/4.0/topics/auth/passwords/">`pbkdf2_sha256_django`</a>,<br/>
        /// <a href="https://www.openwall.com/phpass/">`phpass`</a>, <a href="https://firebaseopensource.com/projects/firebase/scrypt/">`scrypt_firebase`</a>,<br/>
        /// <a href="https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash">`scrypt_werkzeug`</a>, <a href="https://en.wikipedia.org/wiki/SHA-2">`sha256`</a>,<br/>
        /// and the <a href="https://argon2.online/">`argon2`</a> variants: `argon2i` and `argon2id`.<br/>
        /// <br/>
        /// Each of the supported hashers expects the incoming digest to be in a particular format. See the <a href="https://clerk.com/docs/references/backend/user/create-user">Clerk docs</a> for more information.
        /// </remarks>
        /// </summary>
        [JsonProperty("password_hasher")]
        public string? PasswordHasher { get; set; }

        /// <summary>
        /// Set it to `true` if you&apos;re updating the user&apos;s password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
        /// </summary>
        [JsonProperty("skip_password_checks")]
        public bool? SkipPasswordChecks { get; set; } = null;

        /// <summary>
        /// Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
        /// </summary>
        [JsonProperty("sign_out_of_other_sessions")]
        public bool? SignOutOfOtherSessions { get; set; } = null;

        /// <summary>
        /// In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.<br/>
        /// 
        /// <remarks>
        /// Please note that currently the supported options are:<br/>
        /// * Period: 30 seconds<br/>
        /// * Code length: 6 digits<br/>
        /// * Algorithm: SHA1
        /// </remarks>
        /// </summary>
        [JsonProperty("totp_secret")]
        public string? TotpSecret { get; set; } = null;

        /// <summary>
        /// If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.<br/>
        /// 
        /// <remarks>
        /// You must provide the backup codes in plain format or the corresponding bcrypt digest.
        /// </remarks>
        /// </summary>
        [JsonProperty("backup_codes")]
        public List<string>? BackupCodes { get; set; }

        /// <summary>
        /// Metadata saved on the user, that is visible to both your Frontend and Backend APIs
        /// </summary>
        [JsonProperty("public_metadata")]
        public Dictionary<string, object>? PublicMetadata { get; set; } = null;

        /// <summary>
        /// Metadata saved on the user, that is only visible to your Backend API
        /// </summary>
        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        /// <summary>
        /// Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.<br/>
        /// 
        /// <remarks>
        /// Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
        /// </remarks>
        /// </summary>
        [JsonProperty("unsafe_metadata")]
        public Dictionary<string, object>? UnsafeMetadata { get; set; } = null;

        /// <summary>
        /// If true, the user can delete themselves with the Frontend API.
        /// </summary>
        [JsonProperty("delete_self_enabled")]
        public bool? DeleteSelfEnabled { get; set; } = null;

        /// <summary>
        /// If true, the user can create organizations with the Frontend API.
        /// </summary>
        [JsonProperty("create_organization_enabled")]
        public bool? CreateOrganizationEnabled { get; set; } = null;

        /// <summary>
        /// A custom timestamps denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
        /// </summary>
        [JsonProperty("legal_accepted_at")]
        public string? LegalAcceptedAt { get; set; } = null;

        /// <summary>
        /// When set to `true` all legal checks are skipped.<br/>
        /// 
        /// <remarks>
        /// It is not recommended to skip legal checks unless you are migrating a user to Clerk.
        /// </remarks>
        /// </summary>
        [JsonProperty("skip_legal_checks")]
        public bool? SkipLegalChecks { get; set; } = null;

        /// <summary>
        /// The maximum number of organizations the user can create. 0 means unlimited.
        /// </summary>
        [JsonProperty("create_organizations_limit")]
        public long? CreateOrganizationsLimit { get; set; } = null;

        /// <summary>
        /// A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
        /// </summary>
        [JsonProperty("created_at")]
        public string? CreatedAt { get; set; } = null;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpdateUserResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpdateUserResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public User? User { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoFile.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class UploadOrganizationLogoFile
    {

        [SpeakeasyMetadata("multipartForm:name=fileName")]
        public string FileName { get; set; } = default!;

        [SpeakeasyMetadata("multipartForm:content")]
        public byte[] Content { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UploadOrganizationLogoRequest
    {

        /// <summary>
        /// The ID of the organization for which to upload a logo
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organization_id")]
        public string OrganizationId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=multipart/form-data")]
        public UploadOrganizationLogoRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UploadOrganizationLogoRequestBody
    {

        /// <summary>
        /// The ID of the user that will be credited with the image upload.
        /// </summary>
        [SpeakeasyMetadata("multipartForm:name=uploader_user_id")]
        public string? UploaderUserId { get; set; }

        [SpeakeasyMetadata("multipartForm:file,name=file")]
        public UploadOrganizationLogoFile File { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UploadOrganizationLogoResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UploadOrganizationLogoResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// An organization with a logo URL.
        /// </summary>
        public OrganizationWithLogo? OrganizationWithLogo { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpsertTemplatePathParamTemplateType.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of template to update
    /// </summary>
    public enum UpsertTemplatePathParamTemplateType
    {
        [JsonProperty("email")]
        Email,
        [JsonProperty("sms")]
        Sms,
    }

    public static class UpsertTemplatePathParamTemplateTypeExtension
    {
        public static string Value(this UpsertTemplatePathParamTemplateType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static UpsertTemplatePathParamTemplateType ToEnum(this string value)
        {
            foreach(var field in typeof(UpsertTemplatePathParamTemplateType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is UpsertTemplatePathParamTemplateType)
                    {
                        return (UpsertTemplatePathParamTemplateType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum UpsertTemplatePathParamTemplateType");
        }
    }

}

================
File: src/Clerk/BackendAPI/Models/Operations/UpsertTemplateRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UpsertTemplateRequest
    {

        /// <summary>
        /// The type of template to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=template_type")]
        public UpsertTemplatePathParamTemplateType TemplateType { get; set; } = default!;

        /// <summary>
        /// The slug of the template to update
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=slug")]
        public string Slug { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public UpsertTemplateRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpsertTemplateRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpsertTemplateRequestBody
    {

        /// <summary>
        /// The user-friendly name of the template
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The email subject.<br/>
        /// 
        /// <remarks>
        /// Applicable only to email templates.
        /// </remarks>
        /// </summary>
        [JsonProperty("subject")]
        public string? Subject { get; set; } = null;

        /// <summary>
        /// The editor markup used to generate the body of the template
        /// </summary>
        [JsonProperty("markup")]
        public string? Markup { get; set; } = null;

        /// <summary>
        /// The template body before variable interpolation
        /// </summary>
        [JsonProperty("body")]
        public string? Body { get; set; }

        /// <summary>
        /// Whether Clerk should deliver emails or SMS messages based on the current template
        /// </summary>
        [JsonProperty("delivered_by_clerk")]
        public bool? DeliveredByClerk { get; set; } = null;

        /// <summary>
        /// The local part of the From email address that will be used for emails.<br/>
        /// 
        /// <remarks>
        /// For example, in the address &apos;hello@example.com&apos;, the local part is &apos;hello&apos;.<br/>
        /// Applicable only to email templates.
        /// </remarks>
        /// </summary>
        [JsonProperty("from_email_name")]
        public string? FromEmailName { get; set; }

        /// <summary>
        /// The local part of the Reply To email address that will be used for emails.<br/>
        /// 
        /// <remarks>
        /// For example, in the address &apos;hello@example.com&apos;, the local part is &apos;hello&apos;.<br/>
        /// Applicable only to email templates.
        /// </remarks>
        /// </summary>
        [JsonProperty("reply_to_email_name")]
        public string? ReplyToEmailName { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UpsertTemplateResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UpsertTemplateResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Template? Template { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UserPasskeyDeleteRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class UserPasskeyDeleteRequest
    {

        /// <summary>
        /// The ID of the user that owns the passkey identity
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The ID of the passkey identity to be deleted
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=passkey_identification_id")]
        public string PasskeyIdentificationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UserPasskeyDeleteResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UserPasskeyDeleteResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationInvitationsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class UsersGetOrganizationInvitationsRequest
    {

        /// <summary>
        /// The ID of the user whose organization invitations we want to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;

        /// <summary>
        /// Filter organization invitations based on their status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public QueryParamStatus? Status { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationInvitationsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UsersGetOrganizationInvitationsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization invitations with public organization data
        /// </summary>
        public OrganizationInvitationsWithPublicOrganizationData? OrganizationInvitationsWithPublicOrganizationData { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationMembershipsRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class UsersGetOrganizationMembershipsRequest
    {

        /// <summary>
        /// The ID of the user whose organization memberships we want to retrieve
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UsersGetOrganizationMembershipsResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UsersGetOrganizationMembershipsResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// A list of organization memberships
        /// </summary>
        public Models.Components.OrganizationMemberships? OrganizationMemberships { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UserWeb3WalletDeleteRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    
    public class UserWeb3WalletDeleteRequest
    {

        /// <summary>
        /// The ID of the user that owns the web3 wallet
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// The ID of the web3 wallet identity to be deleted
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=web3_wallet_identification_id")]
        public string Web3WalletIdentificationId { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/UserWeb3WalletDeleteResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class UserWeb3WalletDeleteResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Deleted Object
        /// </summary>
        public DeletedObject? DeletedObject { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyClientRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Parameters.
    /// </summary>
    public class VerifyClientRequestBody
    {

        /// <summary>
        /// A JWT that represents the active client.
        /// </summary>
        [JsonProperty("token")]
        public string Token { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyClientResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyClientResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Client? Client { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyDomainProxyRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyDomainProxyRequestBody
    {

        /// <summary>
        /// The ID of the domain that will be updated.
        /// </summary>
        [JsonProperty("domain_id")]
        public string? DomainId { get; set; }

        /// <summary>
        /// The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
        /// </summary>
        [JsonProperty("proxy_url")]
        public string? ProxyUrl { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyDomainProxyResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyDomainProxyResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Health check information about a domain&apos;s proxy configuration validation attempt.
        /// </summary>
        public ProxyCheck? ProxyCheck { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyPasswordRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class VerifyPasswordRequest
    {

        /// <summary>
        /// The ID of the user for whom to verify the password
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public VerifyPasswordRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyPasswordRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyPasswordRequestBody
    {

        /// <summary>
        /// The user password to verify
        /// </summary>
        [JsonProperty("password")]
        public string Password { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyPasswordResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyPasswordResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// The provided password was correct.
        /// </summary>
        public VerifyPasswordResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyPasswordResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// The provided password was correct.
    /// </summary>
    public class VerifyPasswordResponseBody
    {

        [JsonProperty("verified")]
        public bool? Verified { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifySessionRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class VerifySessionRequest
    {

        /// <summary>
        /// The ID of the session
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=session_id")]
        public string SessionId { get; set; } = default!;

        /// <summary>
        /// Parameters.
        /// </summary>
        [SpeakeasyMetadata("request:mediaType=application/json")]
        public VerifySessionRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifySessionRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// Parameters.
    /// </summary>
    public class VerifySessionRequestBody
    {

        /// <summary>
        /// The JWT that is sent via the `__session` cookie from your frontend.<br/>
        /// 
        /// <remarks>
        /// Note: this JWT must be associated with the supplied session ID.
        /// </remarks>
        /// </summary>
        [JsonProperty("token")]
        public string? Token { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifySessionResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifySessionResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// Success
        /// </summary>
        public Session? Session { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyTOTPRequest.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class VerifyTOTPRequest
    {

        /// <summary>
        /// The ID of the user for whom to verify the TOTP
        /// </summary>
        [SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")]
        public string UserId { get; set; } = default!;

        [SpeakeasyMetadata("request:mediaType=application/json")]
        public VerifyTOTPRequestBody? RequestBody { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyTOTPRequestBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyTOTPRequestBody
    {

        /// <summary>
        /// The TOTP or backup code to verify
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; } = default!;
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyTOTPResponse.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    public class VerifyTOTPResponse
    {

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        /// <summary>
        /// The provided TOTP or backup code was correct.
        /// </summary>
        public VerifyTOTPResponseBody? Object { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/Models/Operations/VerifyTOTPResponseBody.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    
    /// <summary>
    /// The provided TOTP or backup code was correct.
    /// </summary>
    public class VerifyTOTPResponseBody
    {

        [JsonProperty("verified")]
        public bool? Verified { get; set; }

        [JsonProperty("code_type")]
        public CodeType? CodeType { get; set; }
    }
}

================
File: src/Clerk/BackendAPI/OauthApplications.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IOauthApplications
    {

        /// <summary>
        /// Get a list of OAuth applications for an instance
        /// 
        /// <remarks>
        /// This request returns the list of OAuth applications for an instance.<br/>
        /// Results can be paginated using the optional `limit` and `offset` query parameters.<br/>
        /// The OAuth applications are ordered by descending creation date.<br/>
        /// Most recent OAuth applications will be returned first.
        /// </remarks>
        /// </summary>
        Task<ListOAuthApplicationsResponse> ListAsync(long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create an OAuth application
        /// 
        /// <remarks>
        /// Creates a new OAuth application with the given name and callback URL for an instance.<br/>
        /// The callback URL must be a valid url.<br/>
        /// All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
        /// </remarks>
        /// </summary>
        Task<CreateOAuthApplicationResponse> CreateAsync(CreateOAuthApplicationRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve an OAuth application by ID
        /// 
        /// <remarks>
        /// Fetches the OAuth application whose ID matches the provided `id` in the path.
        /// </remarks>
        /// </summary>
        Task<GetOAuthApplicationResponse> GetAsync(string oauthApplicationId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update an OAuth application
        /// 
        /// <remarks>
        /// Updates an existing OAuth application
        /// </remarks>
        /// </summary>
        Task<UpdateOAuthApplicationResponse> UpdateAsync(string oauthApplicationId, UpdateOAuthApplicationRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete an OAuth application
        /// 
        /// <remarks>
        /// Deletes the given OAuth application.<br/>
        /// This is not reversible.
        /// </remarks>
        /// </summary>
        Task<DeleteOAuthApplicationResponse> DeleteAsync(string oauthApplicationId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Rotate the client secret of the given OAuth application
        /// 
        /// <remarks>
        /// Rotates the OAuth application&apos;s client secret.<br/>
        /// When the client secret is rotated, make sure to update it in authorized OAuth clients.
        /// </remarks>
        /// </summary>
        Task<RotateOAuthApplicationSecretResponse> RotateSecretAsync(string oauthApplicationId, RetryConfig? retryConfig = null);
    }

    public class OauthApplications: IOauthApplications
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public OauthApplications(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListOAuthApplicationsResponse> ListAsync(long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new ListOAuthApplicationsRequest()
            {
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/oauth_applications", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListOAuthApplications", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OAuthApplications>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListOAuthApplicationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OAuthApplications = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateOAuthApplicationResponse> CreateAsync(CreateOAuthApplicationRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/oauth_applications";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateOAuthApplication", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OAuthApplicationWithSecret>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateOAuthApplicationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OAuthApplicationWithSecret = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetOAuthApplicationResponse> GetAsync(string oauthApplicationId, RetryConfig? retryConfig = null)
        {
            var request = new GetOAuthApplicationRequest()
            {
                OauthApplicationId = oauthApplicationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/oauth_applications/{oauth_application_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetOAuthApplication", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OAuthApplication>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetOAuthApplicationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OAuthApplication = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateOAuthApplicationResponse> UpdateAsync(string oauthApplicationId, UpdateOAuthApplicationRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateOAuthApplicationRequest()
            {
                OauthApplicationId = oauthApplicationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/oauth_applications/{oauth_application_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateOAuthApplication", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OAuthApplication>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateOAuthApplicationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OAuthApplication = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteOAuthApplicationResponse> DeleteAsync(string oauthApplicationId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteOAuthApplicationRequest()
            {
                OauthApplicationId = oauthApplicationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/oauth_applications/{oauth_application_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteOAuthApplication", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteOAuthApplicationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<RotateOAuthApplicationSecretResponse> RotateSecretAsync(string oauthApplicationId, RetryConfig? retryConfig = null)
        {
            var request = new RotateOAuthApplicationSecretRequest()
            {
                OauthApplicationId = oauthApplicationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/oauth_applications/{oauth_application_id}/rotate_secret", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RotateOAuthApplicationSecret", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OAuthApplicationWithSecret>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RotateOAuthApplicationSecretResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OAuthApplicationWithSecret = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/OrganizationDomains.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IOrganizationDomains
    {

        /// <summary>
        /// Create a new organization domain.
        /// 
        /// <remarks>
        /// Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
        /// </remarks>
        /// </summary>
        Task<CreateOrganizationDomainResponse> CreateAsync(string organizationId, CreateOrganizationDomainRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Get a list of all domains of an organization.
        /// 
        /// <remarks>
        /// Get a list of all domains of an organization.
        /// </remarks>
        /// </summary>
        Task<ListOrganizationDomainsResponse> ListAsync(ListOrganizationDomainsRequest request, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update an organization domain.
        /// 
        /// <remarks>
        /// Updates the properties of an existing organization domain.
        /// </remarks>
        /// </summary>
        Task<UpdateOrganizationDomainResponse> UpdateAsync(string organizationId, string domainId, UpdateOrganizationDomainRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Remove a domain from an organization.
        /// 
        /// <remarks>
        /// Removes the given domain from the organization.
        /// </remarks>
        /// </summary>
        Task<DeleteOrganizationDomainResponse> DeleteAsync(string organizationId, string domainId, RetryConfig? retryConfig = null);
    }

    public class OrganizationDomains: IOrganizationDomains
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public OrganizationDomains(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateOrganizationDomainResponse> CreateAsync(string organizationId, CreateOrganizationDomainRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new CreateOrganizationDomainRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/domains", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateOrganizationDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationDomain>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateOrganizationDomainResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationDomain = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<ListOrganizationDomainsResponse> ListAsync(ListOrganizationDomainsRequest request, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/domains", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListOrganizationDomains", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationDomains>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ListOrganizationDomainsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationDomains = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateOrganizationDomainResponse> UpdateAsync(string organizationId, string domainId, UpdateOrganizationDomainRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateOrganizationDomainRequest()
            {
                OrganizationId = organizationId,
                DomainId = domainId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/domains/{domain_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateOrganizationDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationDomain>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateOrganizationDomainResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationDomain = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteOrganizationDomainResponse> DeleteAsync(string organizationId, string domainId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteOrganizationDomainRequest()
            {
                OrganizationId = organizationId,
                DomainId = domainId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/domains/{domain_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteOrganizationDomain", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteOrganizationDomainResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/OrganizationInvitations.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IOrganizationInvitations
    {

        /// <summary>
        /// Get a list of organization invitations for the current instance
        /// 
        /// <remarks>
        /// This request returns the list of organization invitations for the instance.<br/>
        /// Results can be paginated using the optional `limit` and `offset` query parameters.<br/>
        /// You can filter them by providing the &apos;status&apos; query parameter, that accepts multiple values.<br/>
        /// You can change the order by providing the &apos;order&apos; query parameter, that accepts multiple values.<br/>
        /// You can filter by the invited user email address providing the `query` query parameter.<br/>
        /// The organization invitations are ordered by descending creation date by default.
        /// </remarks>
        /// </summary>
        Task<ListInstanceOrganizationInvitationsResponse> GetAllAsync(ListInstanceOrganizationInvitationsRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create and send an organization invitation
        /// 
        /// <remarks>
        /// Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.<br/>
        /// You can specify the `role` for the invited organization member.<br/>
        /// <br/>
        /// New organization invitations get a &quot;pending&quot; status until they are revoked by an organization administrator or accepted by the invitee.<br/>
        /// <br/>
        /// The request body supports passing an optional `redirect_url` parameter.<br/>
        /// When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.<br/>
        /// Use this parameter to implement a custom invitation acceptance flow.<br/>
        /// <br/>
        /// You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.<br/>
        /// That user must be a member with administrator privileges in the organization.<br/>
        /// Only &quot;admin&quot; members can create organization invitations.<br/>
        /// <br/>
        /// You can optionally provide public and private metadata for the organization invitation.<br/>
        /// The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.<br/>
        /// When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
        /// </remarks>
        /// </summary>
        Task<CreateOrganizationInvitationResponse> CreateAsync(string organizationId, CreateOrganizationInvitationRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Get a list of organization invitations
        /// 
        /// <remarks>
        /// This request returns the list of organization invitations.<br/>
        /// Results can be paginated using the optional `limit` and `offset` query parameters.<br/>
        /// You can filter them by providing the &apos;status&apos; query parameter, that accepts multiple values.<br/>
        /// The organization invitations are ordered by descending creation date.<br/>
        /// Most recent invitations will be returned first.<br/>
        /// Any invitations created as a result of an Organization Domain are not included in the results.
        /// </remarks>
        /// </summary>
        Task<ListOrganizationInvitationsResponse> ListAsync(string organizationId, ListOrganizationInvitationsQueryParamStatus? status = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Bulk create and send organization invitations
        /// 
        /// <remarks>
        /// Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.<br/>
        /// You can specify a different `role` for each invited organization member.<br/>
        /// New organization invitations get a &quot;pending&quot; status until they are revoked by an organization administrator or accepted by the invitee.<br/>
        /// The request body supports passing an optional `redirect_url` parameter for each invitation.<br/>
        /// When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.<br/>
        /// Use this parameter to implement a custom invitation acceptance flow.<br/>
        /// You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation<br/>
        /// can have a different inviter user.<br/>
        /// Inviter users must be members with administrator privileges in the organization.<br/>
        /// Only &quot;admin&quot; members can create organization invitations.<br/>
        /// You can optionally provide public and private metadata for each organization invitation. The public metadata are visible<br/>
        /// by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.<br/>
        /// When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
        /// </remarks>
        /// </summary>
        Task<CreateOrganizationInvitationBulkResponse> BulkCreateAsync(string organizationId, List<CreateOrganizationInvitationBulkRequestBody> requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Get a list of pending organization invitations
        /// 
        /// <remarks>
        /// This request returns the list of organization invitations with &quot;pending&quot; status.<br/>
        /// These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.<br/>
        /// Results can be paginated using the optional `limit` and `offset` query parameters.<br/>
        /// The organization invitations are ordered by descending creation date.<br/>
        /// Most recent invitations will be returned first.<br/>
        /// Any invitations created as a result of an Organization Domain are not included in the results.
        /// </remarks>
        /// </summary>
        Task<ListPendingOrganizationInvitationsResponse> ListPendingAsync(string organizationId, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve an organization invitation by ID
        /// 
        /// <remarks>
        /// Use this request to get an existing organization invitation by ID.
        /// </remarks>
        /// </summary>
        Task<GetOrganizationInvitationResponse> GetAsync(string organizationId, string invitationId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Revoke a pending organization invitation
        /// 
        /// <remarks>
        /// Use this request to revoke a previously issued organization invitation.<br/>
        /// Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.<br/>
        /// Only organization invitations with &quot;pending&quot; status can be revoked.<br/>
        /// The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.<br/>
        /// Only users with &quot;admin&quot; role can revoke invitations.
        /// </remarks>
        /// </summary>
        Task<RevokeOrganizationInvitationResponse> RevokeAsync(string organizationId, string invitationId, RevokeOrganizationInvitationRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class OrganizationInvitations: IOrganizationInvitations
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public OrganizationInvitations(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListInstanceOrganizationInvitationsResponse> GetAllAsync(ListInstanceOrganizationInvitationsRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organization_invitations", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListInstanceOrganizationInvitations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationInvitationsWithPublicOrganizationData>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListInstanceOrganizationInvitationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitationsWithPublicOrganizationData = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateOrganizationInvitationResponse> CreateAsync(string organizationId, CreateOrganizationInvitationRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new CreateOrganizationInvitationRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/invitations", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateOrganizationInvitation", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationInvitation>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateOrganizationInvitationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitation = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<ListOrganizationInvitationsResponse> ListAsync(string organizationId, ListOrganizationInvitationsQueryParamStatus? status = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new ListOrganizationInvitationsRequest()
            {
                OrganizationId = organizationId,
                Status = status,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/invitations", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListOrganizationInvitations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationInvitations>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ListOrganizationInvitationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitations = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateOrganizationInvitationBulkResponse> BulkCreateAsync(string organizationId, List<CreateOrganizationInvitationBulkRequestBody> requestBody, RetryConfig? retryConfig = null)
        {
            var request = new CreateOrganizationInvitationBulkRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/invitations/bulk", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateOrganizationInvitationBulk", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationInvitations>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateOrganizationInvitationBulkResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitations = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<ListPendingOrganizationInvitationsResponse> ListPendingAsync(string organizationId, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new ListPendingOrganizationInvitationsRequest()
            {
                OrganizationId = organizationId,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/invitations/pending", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListPendingOrganizationInvitations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationInvitations>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ListPendingOrganizationInvitationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitations = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetOrganizationInvitationResponse> GetAsync(string organizationId, string invitationId, RetryConfig? retryConfig = null)
        {
            var request = new GetOrganizationInvitationRequest()
            {
                OrganizationId = organizationId,
                InvitationId = invitationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/invitations/{invitation_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetOrganizationInvitation", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationInvitation>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetOrganizationInvitationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitation = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<RevokeOrganizationInvitationResponse> RevokeAsync(string organizationId, string invitationId, RevokeOrganizationInvitationRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new RevokeOrganizationInvitationRequest()
            {
                OrganizationId = organizationId,
                InvitationId = invitationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/invitations/{invitation_id}/revoke", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RevokeOrganizationInvitation", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationInvitation>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RevokeOrganizationInvitationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitation = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/OrganizationMemberships.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IOrganizationMemberships
    {

        /// <summary>
        /// Create a new organization membership
        /// 
        /// <remarks>
        /// Adds a user as a member to the given organization.
        /// </remarks>
        /// </summary>
        Task<CreateOrganizationMembershipResponse> CreateAsync(string organizationId, CreateOrganizationMembershipRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Get a list of all members of an organization
        /// 
        /// <remarks>
        /// Retrieves all user memberships for the given organization
        /// </remarks>
        /// </summary>
        Task<ListOrganizationMembershipsResponse> ListAsync(ListOrganizationMembershipsRequest request, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update an organization membership
        /// 
        /// <remarks>
        /// Updates the properties of an existing organization membership
        /// </remarks>
        /// </summary>
        Task<UpdateOrganizationMembershipResponse> UpdateAsync(string organizationId, string userId, UpdateOrganizationMembershipRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Remove a member from an organization
        /// 
        /// <remarks>
        /// Removes the given membership from the organization
        /// </remarks>
        /// </summary>
        Task<DeleteOrganizationMembershipResponse> DeleteAsync(string organizationId, string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Merge and update organization membership metadata
        /// 
        /// <remarks>
        /// Update an organization membership&apos;s metadata attributes by merging existing values with the provided parameters.<br/>
        /// Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well.<br/>
        /// You can remove metadata keys at any level by setting their value to `null`.
        /// </remarks>
        /// </summary>
        Task<UpdateOrganizationMembershipMetadataResponse> UpdateMetadataAsync(string organizationId, string userId, UpdateOrganizationMembershipMetadataRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class OrganizationMemberships: IOrganizationMemberships
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public OrganizationMemberships(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateOrganizationMembershipResponse> CreateAsync(string organizationId, CreateOrganizationMembershipRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new CreateOrganizationMembershipRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/memberships", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateOrganizationMembership", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationMembership>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateOrganizationMembershipResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMembership = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<ListOrganizationMembershipsResponse> ListAsync(ListOrganizationMembershipsRequest request, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/memberships", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListOrganizationMemberships", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationMemberships>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ListOrganizationMembershipsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMemberships = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateOrganizationMembershipResponse> UpdateAsync(string organizationId, string userId, UpdateOrganizationMembershipRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateOrganizationMembershipRequest()
            {
                OrganizationId = organizationId,
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/memberships/{user_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateOrganizationMembership", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationMembership>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateOrganizationMembershipResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMembership = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteOrganizationMembershipResponse> DeleteAsync(string organizationId, string userId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteOrganizationMembershipRequest()
            {
                OrganizationId = organizationId,
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/memberships/{user_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteOrganizationMembership", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationMembership>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteOrganizationMembershipResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMembership = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateOrganizationMembershipMetadataResponse> UpdateMetadataAsync(string organizationId, string userId, UpdateOrganizationMembershipMetadataRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpdateOrganizationMembershipMetadataRequest()
            {
                OrganizationId = organizationId,
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/memberships/{user_id}/metadata", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateOrganizationMembershipMetadata", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationMembership>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateOrganizationMembershipMetadataResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMembership = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Organizations.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IOrganizations
    {

        /// <summary>
        /// Get a list of organizations for an instance
        /// 
        /// <remarks>
        /// This request returns the list of organizations for an instance.<br/>
        /// Results can be paginated using the optional `limit` and `offset` query parameters.<br/>
        /// The organizations are ordered by descending creation date.<br/>
        /// Most recent organizations will be returned first.
        /// </remarks>
        /// </summary>
        Task<ListOrganizationsResponse> ListAsync(ListOrganizationsRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create an organization
        /// 
        /// <remarks>
        /// Creates a new organization with the given name for an instance.<br/>
        /// You can specify an optional slug for the new organization.<br/>
        /// If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash &quot;-&quot;.<br/>
        /// Organization slugs must be unique for the instance.<br/>
        /// You can provide additional metadata for the organization and set any custom attribute you want.<br/>
        /// Organizations support private and public metadata.<br/>
        /// Private metadata can only be accessed from the Backend API.<br/>
        /// Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.<br/>
        /// The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization)<br/>
        /// the next time they create a session, presuming they don&apos;t explicitly set a different organization as active before then.
        /// </remarks>
        /// </summary>
        Task<CreateOrganizationResponse> CreateAsync(CreateOrganizationRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve an organization by ID or slug
        /// 
        /// <remarks>
        /// Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
        /// </remarks>
        /// </summary>
        Task<GetOrganizationResponse> GetAsync(string organizationId, bool? includeMembersCount = null, bool? includeMissingMemberWithElevatedPermissions = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update an organization
        /// 
        /// <remarks>
        /// Updates an existing organization
        /// </remarks>
        /// </summary>
        Task<UpdateOrganizationResponse> UpdateAsync(string organizationId, UpdateOrganizationRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete an organization
        /// 
        /// <remarks>
        /// Deletes the given organization.<br/>
        /// Please note that deleting an organization will also delete all memberships and invitations.<br/>
        /// This is not reversible.
        /// </remarks>
        /// </summary>
        Task<DeleteOrganizationResponse> DeleteAsync(string organizationId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Merge and update metadata for an organization
        /// 
        /// <remarks>
        /// Update organization metadata attributes by merging existing values with the provided parameters.<br/>
        /// Metadata values will be updated via a deep merge.<br/>
        /// Deep meaning that any nested JSON objects will be merged as well.<br/>
        /// You can remove metadata keys at any level by setting their value to `null`.
        /// </remarks>
        /// </summary>
        Task<MergeOrganizationMetadataResponse> MergeMetadataAsync(string organizationId, MergeOrganizationMetadataRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Upload a logo for the organization
        /// 
        /// <remarks>
        /// Set or replace an organization&apos;s logo, by uploading an image file.<br/>
        /// This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.<br/>
        /// The file size cannot exceed 10MB.<br/>
        /// Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
        /// </remarks>
        /// </summary>
        Task<UploadOrganizationLogoResponse> UploadLogoAsync(string organizationId, UploadOrganizationLogoRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete the organization&apos;s logo.
        /// 
        /// <remarks>
        /// Delete the organization&apos;s logo.
        /// </remarks>
        /// </summary>
        Task<DeleteOrganizationLogoResponse> DeleteLogoAsync(string organizationId, RetryConfig? retryConfig = null);
    }

    public class Organizations: IOrganizations
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Organizations(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListOrganizationsResponse> ListAsync(ListOrganizationsRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListOrganizations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.Organizations>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListOrganizationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Organizations = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateOrganizationResponse> CreateAsync(CreateOrganizationRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/organizations";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateOrganization", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Organization>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateOrganizationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Organization = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetOrganizationResponse> GetAsync(string organizationId, bool? includeMembersCount = null, bool? includeMissingMemberWithElevatedPermissions = null, RetryConfig? retryConfig = null)
        {
            var request = new GetOrganizationRequest()
            {
                OrganizationId = organizationId,
                IncludeMembersCount = includeMembersCount,
                IncludeMissingMemberWithElevatedPermissions = includeMissingMemberWithElevatedPermissions,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetOrganization", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Organization>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetOrganizationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Organization = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateOrganizationResponse> UpdateAsync(string organizationId, UpdateOrganizationRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateOrganizationRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateOrganization", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Organization>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateOrganizationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Organization = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteOrganizationResponse> DeleteAsync(string organizationId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteOrganizationRequest()
            {
                OrganizationId = organizationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteOrganization", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteOrganizationResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<MergeOrganizationMetadataResponse> MergeMetadataAsync(string organizationId, MergeOrganizationMetadataRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new MergeOrganizationMetadataRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/metadata", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("MergeOrganizationMetadata", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Organization>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new MergeOrganizationMetadataResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Organization = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UploadOrganizationLogoResponse> UploadLogoAsync(string organizationId, UploadOrganizationLogoRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UploadOrganizationLogoRequest()
            {
                OrganizationId = organizationId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/logo", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "multipart", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UploadOrganizationLogo", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode == 413 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationWithLogo>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UploadOrganizationLogoResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationWithLogo = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404, 413}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteOrganizationLogoResponse> DeleteLogoAsync(string organizationId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteOrganizationLogoRequest()
            {
                OrganizationId = organizationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organizations/{organization_id}/logo", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteOrganizationLogo", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Organization>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteOrganizationLogoResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Organization = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/PhoneNumbers.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IPhoneNumbers
    {

        /// <summary>
        /// Create a phone number
        /// 
        /// <remarks>
        /// Create a new phone number
        /// </remarks>
        /// </summary>
        Task<CreatePhoneNumberResponse> CreateAsync(CreatePhoneNumberRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a phone number
        /// 
        /// <remarks>
        /// Returns the details of a phone number
        /// </remarks>
        /// </summary>
        Task<GetPhoneNumberResponse> GetAsync(string phoneNumberId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a phone number
        /// 
        /// <remarks>
        /// Delete the phone number with the given ID
        /// </remarks>
        /// </summary>
        Task<DeletePhoneNumberResponse> DeleteAsync(string phoneNumberId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update a phone number
        /// 
        /// <remarks>
        /// Updates a phone number
        /// </remarks>
        /// </summary>
        Task<UpdatePhoneNumberResponse> UpdateAsync(string phoneNumberId, UpdatePhoneNumberRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class PhoneNumbers: IPhoneNumbers
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public PhoneNumbers(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreatePhoneNumberResponse> CreateAsync(CreatePhoneNumberRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/phone_numbers";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreatePhoneNumber", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<PhoneNumber>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreatePhoneNumberResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.PhoneNumber = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetPhoneNumberResponse> GetAsync(string phoneNumberId, RetryConfig? retryConfig = null)
        {
            var request = new GetPhoneNumberRequest()
            {
                PhoneNumberId = phoneNumberId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/phone_numbers/{phone_number_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetPhoneNumber", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<PhoneNumber>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetPhoneNumberResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.PhoneNumber = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeletePhoneNumberResponse> DeleteAsync(string phoneNumberId, RetryConfig? retryConfig = null)
        {
            var request = new DeletePhoneNumberRequest()
            {
                PhoneNumberId = phoneNumberId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/phone_numbers/{phone_number_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeletePhoneNumber", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeletePhoneNumberResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdatePhoneNumberResponse> UpdateAsync(string phoneNumberId, UpdatePhoneNumberRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpdatePhoneNumberRequest()
            {
                PhoneNumberId = phoneNumberId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/phone_numbers/{phone_number_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdatePhoneNumber", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<PhoneNumber>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdatePhoneNumberResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.PhoneNumber = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/ProxyChecks.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IProxyChecks
    {

        /// <summary>
        /// Verify the proxy configuration for your domain
        /// 
        /// <remarks>
        /// This endpoint can be used to validate that a proxy-enabled domain is operational.<br/>
        /// It tries to verify that the proxy URL provided in the parameters maps to a functional proxy that can reach the Clerk Frontend API.<br/>
        /// <br/>
        /// You can use this endpoint before you set a proxy URL for a domain. This way you can ensure that switching to proxy-based<br/>
        /// configuration will not lead to downtime for your instance.<br/>
        /// <br/>
        /// The `proxy_url` parameter allows for testing proxy configurations for domains that don&apos;t have a proxy URL yet, or operate on<br/>
        /// a different proxy URL than the one provided. It can also be used to re-validate a domain that is already configured to work with a proxy.
        /// </remarks>
        /// </summary>
        Task<VerifyDomainProxyResponse> VerifyAsync(VerifyDomainProxyRequestBody? request = null, RetryConfig? retryConfig = null);
    }

    public class ProxyChecks: IProxyChecks
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public ProxyChecks(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<VerifyDomainProxyResponse> VerifyAsync(VerifyDomainProxyRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/proxy_checks";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("VerifyDomainProxy", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ProxyCheck>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new VerifyDomainProxyResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.ProxyCheck = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/RedirectUrls.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IRedirectUrls
    {

        /// <summary>
        /// List all redirect URLs
        /// 
        /// <remarks>
        /// Lists all whitelisted redirect_urls for the instance
        /// </remarks>
        /// </summary>
        Task<ListRedirectURLsResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a redirect URL
        /// 
        /// <remarks>
        /// Create a redirect URL
        /// </remarks>
        /// </summary>
        Task<CreateRedirectURLResponse> CreateAsync(CreateRedirectURLRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a redirect URL
        /// 
        /// <remarks>
        /// Retrieve the details of the redirect URL with the given ID
        /// </remarks>
        /// </summary>
        Task<GetRedirectURLResponse> GetAsync(string id, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a redirect URL
        /// 
        /// <remarks>
        /// Remove the selected redirect URL from the whitelist of the instance
        /// </remarks>
        /// </summary>
        Task<DeleteRedirectURLResponse> DeleteAsync(string id, RetryConfig? retryConfig = null);
    }

    public class RedirectUrls: IRedirectUrls
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public RedirectUrls(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListRedirectURLsResponse> ListAsync(bool? paginated = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new ListRedirectURLsRequest()
            {
                Paginated = paginated,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/redirect_urls", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListRedirectURLs", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<RedirectURL>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListRedirectURLsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.RedirectURLList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateRedirectURLResponse> CreateAsync(CreateRedirectURLRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/redirect_urls";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateRedirectURL", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<RedirectURL>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateRedirectURLResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.RedirectURL = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetRedirectURLResponse> GetAsync(string id, RetryConfig? retryConfig = null)
        {
            var request = new GetRedirectURLRequest()
            {
                Id = id,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/redirect_urls/{id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetRedirectURL", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<RedirectURL>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetRedirectURLResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.RedirectURL = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteRedirectURLResponse> DeleteAsync(string id, RetryConfig? retryConfig = null)
        {
            var request = new DeleteRedirectURLRequest()
            {
                Id = id,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/redirect_urls/{id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteRedirectURL", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteRedirectURLResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/SamlConnections.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface ISamlConnections
    {

        /// <summary>
        /// Get a list of SAML Connections for an instance
        /// 
        /// <remarks>
        /// Returns the list of SAML Connections for an instance.<br/>
        /// Results can be paginated using the optional `limit` and `offset` query parameters.<br/>
        /// The SAML Connections are ordered by descending creation date and the most recent will be returned first.
        /// </remarks>
        /// </summary>
        Task<ListSAMLConnectionsResponse> ListAsync(ListSAMLConnectionsRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a SAML Connection
        /// 
        /// <remarks>
        /// Create a new SAML Connection.
        /// </remarks>
        /// </summary>
        Task<CreateSAMLConnectionResponse> CreateAsync(CreateSAMLConnectionRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a SAML Connection by ID
        /// 
        /// <remarks>
        /// Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
        /// </remarks>
        /// </summary>
        Task<GetSAMLConnectionResponse> GetAsync(string samlConnectionId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update a SAML Connection
        /// 
        /// <remarks>
        /// Updates the SAML Connection whose ID matches the provided `id` in the path.
        /// </remarks>
        /// </summary>
        Task<UpdateSAMLConnectionResponse> UpdateAsync(string samlConnectionId, UpdateSAMLConnectionRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a SAML Connection
        /// 
        /// <remarks>
        /// Deletes the SAML Connection whose ID matches the provided `id` in the path.
        /// </remarks>
        /// </summary>
        Task<DeleteSAMLConnectionResponse> DeleteAsync(string samlConnectionId, RetryConfig? retryConfig = null);
    }

    public class SamlConnections: ISamlConnections
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public SamlConnections(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListSAMLConnectionsResponse> ListAsync(ListSAMLConnectionsRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/saml_connections", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListSAMLConnections", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 403 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SAMLConnections>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListSAMLConnectionsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SAMLConnections = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 403, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateSAMLConnectionResponse> CreateAsync(CreateSAMLConnectionRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/saml_connections";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateSAMLConnection", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SchemasSAMLConnection>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateSAMLConnectionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SchemasSAMLConnection = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetSAMLConnectionResponse> GetAsync(string samlConnectionId, RetryConfig? retryConfig = null)
        {
            var request = new GetSAMLConnectionRequest()
            {
                SamlConnectionId = samlConnectionId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/saml_connections/{saml_connection_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetSAMLConnection", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SchemasSAMLConnection>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetSAMLConnectionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SchemasSAMLConnection = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateSAMLConnectionResponse> UpdateAsync(string samlConnectionId, UpdateSAMLConnectionRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateSAMLConnectionRequest()
            {
                SamlConnectionId = samlConnectionId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/saml_connections/{saml_connection_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateSAMLConnection", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 403 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SchemasSAMLConnection>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateSAMLConnectionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SchemasSAMLConnection = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 403, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteSAMLConnectionResponse> DeleteAsync(string samlConnectionId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteSAMLConnectionRequest()
            {
                SamlConnectionId = samlConnectionId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/saml_connections/{saml_connection_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteSAMLConnection", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteSAMLConnectionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{402, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Sessions.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface ISessions
    {

        /// <summary>
        /// List all sessions
        /// 
        /// <remarks>
        /// Returns a list of all sessions.<br/>
        /// The sessions are returned sorted by creation date, with the newest sessions appearing first.<br/>
        /// **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however<br/>
        /// moving forward at least one of `client_id` or `user_id` parameters should be provided.
        /// </remarks>
        /// </summary>
        Task<GetSessionListResponse> ListAsync(GetSessionListRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a new active session
        /// 
        /// <remarks>
        /// Create a new active session for the provided user ID.<br/>
        /// <br/>
        /// **This operation is intended only for use in testing, and is not available for production instances.** If you are looking to generate a user session from the backend,<br/>
        /// we recommend using the <a href="https://clerk.com/docs/reference/backend-api/tag/Sign-in-Tokens#operation/CreateSignInToken">Sign-in Tokens</a> resource instead.
        /// </remarks>
        /// </summary>
        Task<CreateSessionResponse> CreateAsync(CreateSessionRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a session
        /// 
        /// <remarks>
        /// Retrieve the details of a session
        /// </remarks>
        /// </summary>
        Task<GetSessionResponse> GetAsync(string sessionId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Revoke a session
        /// 
        /// <remarks>
        /// Sets the status of a session as &quot;revoked&quot;, which is an unauthenticated state.<br/>
        /// In multi-session mode, a revoked session will still be returned along with its client object, however the user will need to sign in again.
        /// </remarks>
        /// </summary>
        Task<RevokeSessionResponse> RevokeAsync(string sessionId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Verify a session
        /// 
        /// <remarks>
        /// Returns the session if it is authenticated, otherwise returns an error.<br/>
        /// WARNING: This endpoint is deprecated and will be removed in future versions. We strongly recommend switching to networkless verification using short-lived session tokens,<br/>
        ///          which is implemented transparently in all recent SDK versions (e.g. <a href="https://clerk.com/docs/backend-requests/handling/nodejs#clerk-express-require-auth">NodeJS SDK</a>).<br/>
        ///          For more details on how networkless verification works, refer to our <a href="https://clerk.com/docs/backend-requests/resources/session-tokens">Session Tokens documentation</a>.
        /// </remarks>
        /// </summary>
        Task<VerifySessionResponse> VerifyAsync(string sessionId, VerifySessionRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a session token
        /// 
        /// <remarks>
        /// Creates a session JSON Web Token (JWT) based on a session.
        /// </remarks>
        /// </summary>
        Task<CreateSessionTokenResponse> CreateTokenAsync(string sessionId, CreateSessionTokenRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a session token from a jwt template
        /// 
        /// <remarks>
        /// Creates a JSON Web Token(JWT) based on a session and a JWT Template name defined for your instance
        /// </remarks>
        /// </summary>
        Task<CreateSessionTokenFromTemplateResponse> CreateTokenFromTemplateAsync(string sessionId, string templateName, CreateSessionTokenFromTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class Sessions: ISessions
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Sessions(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<GetSessionListResponse> ListAsync(GetSessionListRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sessions", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetSessionList", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<Session>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new GetSessionListResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SessionList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateSessionResponse> CreateAsync(CreateSessionRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/sessions";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("createSession", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Session>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateSessionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Session = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetSessionResponse> GetAsync(string sessionId, RetryConfig? retryConfig = null)
        {
            var request = new GetSessionRequest()
            {
                SessionId = sessionId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sessions/{session_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetSession", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Session>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetSessionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Session = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<RevokeSessionResponse> RevokeAsync(string sessionId, RetryConfig? retryConfig = null)
        {
            var request = new RevokeSessionRequest()
            {
                SessionId = sessionId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sessions/{session_id}/revoke", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RevokeSession", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Session>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RevokeSessionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Session = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<VerifySessionResponse> VerifyAsync(string sessionId, VerifySessionRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new VerifySessionRequest()
            {
                SessionId = sessionId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sessions/{session_id}/verify", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("VerifySession", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode == 410 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Session>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new VerifySessionResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Session = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404, 410}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateSessionTokenResponse> CreateTokenAsync(string sessionId, CreateSessionTokenRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new CreateSessionTokenRequest()
            {
                SessionId = sessionId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sessions/{session_id}/tokens", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateSessionToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<CreateSessionTokenResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateSessionTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateSessionTokenFromTemplateResponse> CreateTokenFromTemplateAsync(string sessionId, string templateName, CreateSessionTokenFromTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new CreateSessionTokenFromTemplateRequest()
            {
                SessionId = sessionId,
                TemplateName = templateName,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sessions/{session_id}/tokens/{template_name}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateSessionTokenFromTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<CreateSessionTokenFromTemplateResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateSessionTokenFromTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/SignInTokens.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface ISignInTokens
    {

        /// <summary>
        /// Create sign-in token
        /// 
        /// <remarks>
        /// Creates a new sign-in token and associates it with the given user.<br/>
        /// By default, sign-in tokens expire in 30 days.<br/>
        /// You can optionally supply a different duration in seconds using the `expires_in_seconds` property.
        /// </remarks>
        /// </summary>
        Task<CreateSignInTokenResponse> CreateAsync(CreateSignInTokenRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Revoke the given sign-in token
        /// 
        /// <remarks>
        /// Revokes a pending sign-in token
        /// </remarks>
        /// </summary>
        Task<RevokeSignInTokenResponse> RevokeAsync(string signInTokenId, RetryConfig? retryConfig = null);
    }

    public class SignInTokens: ISignInTokens
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public SignInTokens(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateSignInTokenResponse> CreateAsync(CreateSignInTokenRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/sign_in_tokens";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateSignInToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SignInToken>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateSignInTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SignInToken = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<RevokeSignInTokenResponse> RevokeAsync(string signInTokenId, RetryConfig? retryConfig = null)
        {
            var request = new RevokeSignInTokenRequest()
            {
                SignInTokenId = signInTokenId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sign_in_tokens/{sign_in_token_id}/revoke", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("RevokeSignInToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SignInToken>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new RevokeSignInTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SignInToken = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/SignUps.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface ISignUps
    {

        /// <summary>
        /// Retrieve a sign-up by ID
        /// 
        /// <remarks>
        /// Retrieve the details of the sign-up with the given ID
        /// </remarks>
        /// </summary>
        Task<GetSignUpResponse> GetAsync(string id, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update a sign-up
        /// 
        /// <remarks>
        /// Update the sign-up with the given ID
        /// </remarks>
        /// </summary>
        Task<UpdateSignUpResponse> UpdateAsync(string id, UpdateSignUpRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class SignUps: ISignUps
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public SignUps(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<GetSignUpResponse> GetAsync(string id, RetryConfig? retryConfig = null)
        {
            var request = new GetSignUpRequest()
            {
                Id = id,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sign_ups/{id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetSignUp", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SignUp>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetSignUpResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SignUp = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 403)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateSignUpResponse> UpdateAsync(string id, UpdateSignUpRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpdateSignUpRequest()
            {
                Id = id,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/sign_ups/{id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateSignUp", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SignUp>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateSignUpResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SignUp = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 403)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Templates.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface ITemplates
    {

        /// <summary>
        /// Preview changes to a template
        /// 
        /// <remarks>
        /// Returns a preview of a template for a given template_type, slug and body
        /// </remarks>
        /// </summary>
        Task<PreviewTemplateResponse> PreviewAsync(string templateType, string slug, PreviewTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null);
    }

    public class Templates: ITemplates
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Templates(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
        public async Task<PreviewTemplateResponse> PreviewAsync(string templateType, string slug, PreviewTemplateRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new PreviewTemplateRequest()
            {
                TemplateType = templateType,
                Slug = slug,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/templates/{template_type}/{slug}/preview", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("PreviewTemplate", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<PreviewTemplateResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new PreviewTemplateResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/TestingTokens.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    public interface ITestingTokens
    {

        /// <summary>
        /// Retrieve a new testing token
        /// 
        /// <remarks>
        /// Retrieve a new testing token.
        /// </remarks>
        /// </summary>
        Task<CreateTestingTokenResponse> CreateAsync(RetryConfig? retryConfig = null);
    }

    public class TestingTokens: ITestingTokens
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public TestingTokens(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateTestingTokenResponse> CreateAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/testing_tokens";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateTestingToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<TestingToken>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateTestingTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.TestingToken = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Users.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IUsers
    {

        /// <summary>
        /// List all users
        /// 
        /// <remarks>
        /// Returns a list of all users.<br/>
        /// The users are returned sorted by creation date, with the newest users appearing first.
        /// </remarks>
        /// </summary>
        Task<GetUserListResponse> ListAsync(GetUserListRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a new user
        /// 
        /// <remarks>
        /// Creates a new user. Your user management settings determine how you should setup your user model.<br/>
        /// <br/>
        /// Any email address and phone number created using this method will be marked as verified.<br/>
        /// <br/>
        /// Note: If you are performing a migration, check out our guide on <a href="https://clerk.com/docs/deployments/migrate-overview">zero downtime migrations</a>.<br/>
        /// <br/>
        /// A rate limit rule of 20 requests per 10 seconds is applied to this endpoint.
        /// </remarks>
        /// </summary>
        Task<CreateUserResponse> CreateAsync(CreateUserRequestBody? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Count users
        /// 
        /// <remarks>
        /// Returns a total count of all users that match the given filtering criteria.
        /// </remarks>
        /// </summary>
        Task<GetUsersCountResponse> CountAsync(GetUsersCountRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve a user
        /// 
        /// <remarks>
        /// Retrieve the details of a user
        /// </remarks>
        /// </summary>
        Task<GetUserResponse> GetAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Update a user
        /// 
        /// <remarks>
        /// Update a user&apos;s attributes.<br/>
        /// <br/>
        /// You can set the user&apos;s primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.<br/>
        /// Both IDs should correspond to verified identifications that belong to the user.<br/>
        /// <br/>
        /// You can remove a user&apos;s username by setting the username attribute to null or the blank string &quot;&quot;.<br/>
        /// This is a destructive action; the identification will be deleted forever.<br/>
        /// Usernames can be removed only if they are optional in your instance settings and there&apos;s at least one other identifier which can be used for authentication.<br/>
        /// <br/>
        /// This endpoint allows changing a user&apos;s password. When passing the `password` parameter directly you have two further options.<br/>
        /// You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.<br/>
        /// You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
        /// </remarks>
        /// </summary>
        Task<UpdateUserResponse> UpdateAsync(string userId, UpdateUserRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a user
        /// 
        /// <remarks>
        /// Delete the specified user
        /// </remarks>
        /// </summary>
        Task<DeleteUserResponse> DeleteAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Ban a user
        /// 
        /// <remarks>
        /// Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
        /// </remarks>
        /// </summary>
        Task<BanUserResponse> BanAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Unban a user
        /// 
        /// <remarks>
        /// Removes the ban mark from the given user.
        /// </remarks>
        /// </summary>
        Task<UnbanUserResponse> UnbanAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Lock a user
        /// 
        /// <remarks>
        /// Marks the given user as locked, which means they are not allowed to sign in again until the lock expires.<br/>
        /// Lock duration can be configured in the instance&apos;s restrictions settings.
        /// </remarks>
        /// </summary>
        Task<LockUserResponse> LockAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Unlock a user
        /// 
        /// <remarks>
        /// Removes the lock from the given user.
        /// </remarks>
        /// </summary>
        Task<UnlockUserResponse> UnlockAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Set user profile image
        /// 
        /// <remarks>
        /// Update a user&apos;s profile image
        /// </remarks>
        /// </summary>
        Task<SetUserProfileImageResponse> SetProfileImageAsync(string userId, SetUserProfileImageRequestBody requestBody, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete user profile image
        /// 
        /// <remarks>
        /// Delete a user&apos;s profile image
        /// </remarks>
        /// </summary>
        Task<DeleteUserProfileImageResponse> DeleteProfileImageAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Merge and update a user&apos;s metadata
        /// 
        /// <remarks>
        /// Update a user&apos;s metadata attributes by merging existing values with the provided parameters.<br/>
        /// <br/>
        /// This endpoint behaves differently than the *Update a user* endpoint.<br/>
        /// Metadata values will not be replaced entirely.<br/>
        /// Instead, a deep merge will be performed.<br/>
        /// Deep means that any nested JSON objects will be merged as well.<br/>
        /// <br/>
        /// You can remove metadata keys at any level by setting their value to `null`.
        /// </remarks>
        /// </summary>
        Task<UpdateUserMetadataResponse> UpdateMetadataAsync(string userId, UpdateUserMetadataRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve the OAuth access token of a user
        /// 
        /// <remarks>
        /// Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.<br/>
        /// For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
        /// </remarks>
        /// </summary>
        Task<GetOAuthAccessTokenResponse> GetOAuthAccessTokenAsync(GetOAuthAccessTokenRequest request, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve all memberships for a user
        /// 
        /// <remarks>
        /// Retrieve a paginated list of the user&apos;s organization memberships
        /// </remarks>
        /// </summary>
        Task<UsersGetOrganizationMembershipsResponse> GetOrganizationMembershipsAsync(string userId, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);

        /// <summary>
        /// Retrieve all invitations for a user
        /// 
        /// <remarks>
        /// Retrieve a paginated list of the user&apos;s organization invitations
        /// </remarks>
        /// </summary>
        Task<UsersGetOrganizationInvitationsResponse> GetOrganizationInvitationsAsync(string userId, long? limit = 10, long? offset = 0, QueryParamStatus? status = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Verify the password of a user
        /// 
        /// <remarks>
        /// Check that the user&apos;s password matches the supplied input.<br/>
        /// Useful for custom auth flows and re-verification.
        /// </remarks>
        /// </summary>
        Task<VerifyPasswordResponse> VerifyPasswordAsync(string userId, VerifyPasswordRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Verify a TOTP or backup code for a user
        /// 
        /// <remarks>
        /// Verify that the provided TOTP or backup code is valid for the user.<br/>
        /// Verifying a backup code will result it in being consumed (i.e. it will<br/>
        /// become invalid).<br/>
        /// Useful for custom auth flows and re-verification.
        /// </remarks>
        /// </summary>
        Task<VerifyTOTPResponse> VerifyTotpAsync(string userId, VerifyTOTPRequestBody? requestBody = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Disable a user&apos;s MFA methods
        /// 
        /// <remarks>
        /// Disable all of a user&apos;s MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
        /// </remarks>
        /// </summary>
        Task<DisableMFAResponse> DisableMfaAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Disable all user&apos;s Backup codes
        /// 
        /// <remarks>
        /// Disable all of a user&apos;s backup codes.
        /// </remarks>
        /// </summary>
        Task<DeleteBackupCodeResponse> DeleteBackupCodesAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a user passkey
        /// 
        /// <remarks>
        /// Delete the passkey identification for a given user and notify them through email.
        /// </remarks>
        /// </summary>
        Task<UserPasskeyDeleteResponse> DeletePasskeyAsync(string userId, string passkeyIdentificationId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a user web3 wallet
        /// 
        /// <remarks>
        /// Delete the web3 wallet identification for a given user.
        /// </remarks>
        /// </summary>
        Task<UserWeb3WalletDeleteResponse> DeleteWeb3WalletAsync(string userId, string web3WalletIdentificationId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete all the user&apos;s TOTPs
        /// 
        /// <remarks>
        /// Deletes all of the user&apos;s TOTPs.
        /// </remarks>
        /// </summary>
        Task<DeleteTOTPResponse> DeleteTOTPAsync(string userId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete External Account
        /// 
        /// <remarks>
        /// Delete an external account by ID.
        /// </remarks>
        /// </summary>
        Task<DeleteExternalAccountResponse> DeleteExternalAccountAsync(string userId, string externalAccountId, RetryConfig? retryConfig = null);

        /// <summary>
        /// Get a list of all organization memberships within an instance.
        /// 
        /// <remarks>
        /// Retrieves all organization user memberships for the given instance.
        /// </remarks>
        /// </summary>
        Task<InstanceGetOrganizationMembershipsResponse> GetInstanceOrganizationMembershipsAsync(string? orderBy = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null);
    }

    public class Users: IUsers
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Users(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<GetUserListResponse> ListAsync(GetUserListRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetUserList", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<User>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new GetUserListResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.UserList = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateUserResponse> CreateAsync(CreateUserRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/users";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 403 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 403, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetUsersCountResponse> CountAsync(GetUsersCountRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/count", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetUsersCount", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<TotalCount>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new GetUsersCountResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.TotalCount = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 422)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetUserResponse> GetAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new GetUserRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateUserResponse> UpdateAsync(string userId, UpdateUserRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new UpdateUserRequest()
            {
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteUserResponse> DeleteAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteUserRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<BanUserResponse> BanAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new BanUserRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/ban", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("BanUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new BanUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 402)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UnbanUserResponse> UnbanAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new UnbanUserRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/unban", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UnbanUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 402 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UnbanUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 402)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<LockUserResponse> LockAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new LockUserRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/lock", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("LockUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new LockUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 403)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UnlockUserResponse> UnlockAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new UnlockUserRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/unlock", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UnlockUser", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UnlockUserResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 403)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<SetUserProfileImageResponse> SetProfileImageAsync(string userId, SetUserProfileImageRequestBody requestBody, RetryConfig? retryConfig = null)
        {
            var request = new SetUserProfileImageRequest()
            {
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/profile_image", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "multipart", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("SetUserProfileImage", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new SetUserProfileImageResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteUserProfileImageResponse> DeleteProfileImageAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteUserProfileImageRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/profile_image", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteUserProfileImage", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteUserProfileImageResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UpdateUserMetadataResponse> UpdateMetadataAsync(string userId, UpdateUserMetadataRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new UpdateUserMetadataRequest()
            {
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/metadata", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Patch, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UpdateUserMetadata", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<User>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UpdateUserMetadataResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.User = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GetOAuthAccessTokenResponse> GetOAuthAccessTokenAsync(GetOAuthAccessTokenRequest request, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/oauth_access_tokens/{provider}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GetOAuthAccessToken", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<List<ResponseBody>>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GetOAuthAccessTokenResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.ResponseBodies = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 404, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UsersGetOrganizationMembershipsResponse> GetOrganizationMembershipsAsync(string userId, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new UsersGetOrganizationMembershipsRequest()
            {
                UserId = userId,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/organization_memberships", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UsersGetOrganizationMemberships", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationMemberships>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UsersGetOrganizationMembershipsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMemberships = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 403)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UsersGetOrganizationInvitationsResponse> GetOrganizationInvitationsAsync(string userId, long? limit = 10, long? offset = 0, QueryParamStatus? status = null, RetryConfig? retryConfig = null)
        {
            var request = new UsersGetOrganizationInvitationsRequest()
            {
                UserId = userId,
                Limit = limit,
                Offset = offset,
                Status = status,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/organization_invitations", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UsersGetOrganizationInvitations", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<OrganizationInvitationsWithPublicOrganizationData>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UsersGetOrganizationInvitationsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationInvitationsWithPublicOrganizationData = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<VerifyPasswordResponse> VerifyPasswordAsync(string userId, VerifyPasswordRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new VerifyPasswordRequest()
            {
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/verify_password", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("VerifyPassword", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<VerifyPasswordResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new VerifyPasswordResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 400 || responseStatusCode == 404 || responseStatusCode == 422 || responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<VerifyTOTPResponse> VerifyTotpAsync(string userId, VerifyTOTPRequestBody? requestBody = null, RetryConfig? retryConfig = null)
        {
            var request = new VerifyTOTPRequest()
            {
                UserId = userId,
                RequestBody = requestBody,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/verify_totp", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("VerifyTOTP", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 404 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<VerifyTOTPResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new VerifyTOTPResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 400 || responseStatusCode == 404 || responseStatusCode == 422 || responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DisableMFAResponse> DisableMfaAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new DisableMFARequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/mfa", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DisableMFA", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DisableMFAResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DisableMFAResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteBackupCodeResponse> DeleteBackupCodesAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteBackupCodeRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/backup_code", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteBackupCode", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeleteBackupCodeResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteBackupCodeResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UserPasskeyDeleteResponse> DeletePasskeyAsync(string userId, string passkeyIdentificationId, RetryConfig? retryConfig = null)
        {
            var request = new UserPasskeyDeleteRequest()
            {
                UserId = userId,
                PasskeyIdentificationId = passkeyIdentificationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/passkeys/{passkey_identification_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UserPasskeyDelete", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UserPasskeyDeleteResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<UserWeb3WalletDeleteResponse> DeleteWeb3WalletAsync(string userId, string web3WalletIdentificationId, RetryConfig? retryConfig = null)
        {
            var request = new UserWeb3WalletDeleteRequest()
            {
                UserId = userId,
                Web3WalletIdentificationId = web3WalletIdentificationId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/web3_wallets/{web3_wallet_identification_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("UserWeb3WalletDelete", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new UserWeb3WalletDeleteResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteTOTPResponse> DeleteTOTPAsync(string userId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteTOTPRequest()
            {
                UserId = userId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/totp", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteTOTP", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeleteTOTPResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteTOTPResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 404)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteExternalAccountResponse> DeleteExternalAccountAsync(string userId, string externalAccountId, RetryConfig? retryConfig = null)
        {
            var request = new DeleteExternalAccountRequest()
            {
                UserId = userId,
                ExternalAccountId = externalAccountId,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/users/{user_id}/external_accounts/{external_account_id}", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteExternalAccount", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 403 || _statusCode == 404 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<DeletedObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new DeleteExternalAccountResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.DeletedObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 403, 404}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<InstanceGetOrganizationMembershipsResponse> GetInstanceOrganizationMembershipsAsync(string? orderBy = null, long? limit = 10, long? offset = 0, RetryConfig? retryConfig = null)
        {
            var request = new InstanceGetOrganizationMembershipsRequest()
            {
                OrderBy = orderBy,
                Limit = limit,
                Offset = offset,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/organization_memberships", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("InstanceGetOrganizationMemberships", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 401 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode == 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.OrganizationMemberships>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new InstanceGetOrganizationMembershipsResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.OrganizationMemberships = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 401, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 500)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/AnyDeserializer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;

    public class AnyDeserializer : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return (objectType == typeof(Dictionary<string, object>));
        }

        public override bool CanWrite => false;

        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
        {
            throw new NotSupportedException();
        }

        public override object ReadJson(
            JsonReader reader,
            Type objectType,
            object? existingValue,
            JsonSerializer serializer
        )
        {
            if (reader.TokenType == JsonToken.StartObject) {
                return ParseTokenIntoDictionary(JToken.Load(reader));
            }
            throw new JsonSerializationException($"Could not deserialize token into dictionary");
        }

        private Dictionary<string, object?> ParseTokenIntoDictionary(JToken token)
        {
            var dict = new Dictionary<string, object?>();

            foreach (var child in token.Children<JProperty>())
            {

                object? val = null;
                if (child.Value is JObject)
                {
                    val = ParseTokenIntoDictionary(child.Value);
                }
                else if (child.Value is JArray)
                {
                    val = ParseTokenIntoList(child.Value);
                }
                else if (child.Value != null)
                {
                    val = ((JValue)child.Value).Value;
                }

                dict[child.Name] = val;
            }

            return dict;
        }

        private List<object?> ParseTokenIntoList(JToken token)
        {
            var list = new List<object?>();

            foreach (var child in token.Children())
            {
                if (child is JObject)
                {
                    list.Add((object)ParseTokenIntoDictionary(child));
                }
                else if (child is JArray)
                {
                    list.Add((object)ParseTokenIntoList(child));
                }
                else
                {
                    list.Add(((JValue)child).Value);
                }
            }

            return list;
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/BigIntStrConverter.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Globalization;
    using System.Numerics;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    internal class BigIntStrConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            var nullableType = Nullable.GetUnderlyingType(objectType);
            if (nullableType != null)
            {
                return nullableType == typeof(BigInteger);
            }

            return objectType == typeof(BigInteger);
        }

        public override object? ReadJson(
            JsonReader reader,
            Type objectType,
            object? existingValue,
            JsonSerializer serializer
        )
        {
            if (reader.Value == null)
            {
                return null;
            }

            try {
                return BigInteger.Parse(reader.Value.ToString()!);
            } catch (System.FormatException ex) {
                throw new Newtonsoft.Json.JsonSerializationException("Could not parse BigInteger", ex);
            }
        }

        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
        {
            if (value == null)
            {
                writer.WriteValue("null");
                return;
            }

            writer.WriteValue(((BigInteger)value).ToString(CultureInfo.InvariantCulture));
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/DecimalStrConverter.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    internal class DecimalStrConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            var  nullableType = Nullable.GetUnderlyingType(objectType);
            if (nullableType != null)
            {
                return nullableType == typeof(Decimal);
            }

            return objectType == typeof(Decimal);
        }

        public override object? ReadJson(
            JsonReader reader,
            Type objectType,
            object? existingValue,
            JsonSerializer serializer
        )
        {
            if (reader.Value == null)
            {
                return null;
            }

            try {
                return Decimal.Parse(reader.Value.ToString()!);
            } catch (System.FormatException ex) {
                throw new Newtonsoft.Json.JsonSerializationException("Could not parse Decimal", ex);
            }
        }

        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
        {
            if (value == null)
            {
                writer.WriteValue("null");
                return;
            }

            writer.WriteValue(((Decimal)value).ToString(CultureInfo.InvariantCulture));
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/EnumConverter.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using Newtonsoft.Json;

namespace Clerk.BackendAPI.Utils
{
    internal class EnumConverter : JsonConverter
    {
        public override bool CanConvert(System.Type objectType)
        {
            var  nullableType = Nullable.GetUnderlyingType(objectType);
            if (nullableType != null)
            {
                return nullableType.IsEnum;
            }

            return objectType.IsEnum;
        }

        public override object? ReadJson(
            JsonReader reader,
            System.Type objectType,
            object? existingValue,
            JsonSerializer serializer
        )
        {
            if (reader.Value == null)
            {
                return null;
            }

            var extensionType = System.Type.GetType(objectType.FullName + "Extension");

            if (Nullable.GetUnderlyingType(objectType) != null) {
                objectType = Nullable.GetUnderlyingType(objectType)!;
                extensionType = System.Type.GetType(objectType!.FullName + "Extension");
            }

            if (extensionType == null)
            {
                return Enum.ToObject(objectType, reader.Value);
            }

            var method = extensionType.GetMethod("ToEnum");
            if (method == null)
            {
                throw new Exception($"Unable to find ToEnum method on {extensionType.FullName}");
            }

            try {
                return method.Invoke(null, new[] { (string)reader.Value });
            } catch(System.Reflection.TargetInvocationException e) {
                throw new Newtonsoft.Json.JsonSerializationException("Unable to convert value to enum", e);
            }

        }

        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
        {
            if (value == null)
            {
                writer.WriteValue("null");
                return;
            }

            var extensionType = System.Type.GetType(value.GetType().FullName + "Extension");
            if (extensionType == null)
            {
                writer.WriteValue(value);
                return;
            }

            writer.WriteValue(Utilities.ToString(value));
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/FlexibleObjectDeserializer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    internal class FlexibleObjectDeserializer: JsonConverter
    {
        public override bool CanConvert(Type objectType) =>
            objectType == typeof(object);

        public override bool CanWrite => false;

        public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer)
        {
            var token = JToken.ReadFrom(reader);

            if (token is JArray)
            {
                return new List<object>(token.Select(t =>
                {
                    return t.ToString();
                }));
            }

            return token.ToObject(objectType);
        }

        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) =>
            throw new NotImplementedException();
    }
}

================
File: src/Clerk/BackendAPI/Utils/HeaderSerializer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Reflection;

    internal static class HeaderSerializer
    {
        public static void PopulateHeaders(ref HttpRequestMessage httpRequest, object? request)
        {
            if (request == null)
            {
                return;
            }

            var props = request.GetType().GetProperties();

            foreach (var prop in props)
            {
                var val = prop.GetValue(request);
                if (val == null)
                {
                    continue;
                }

                var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetHeaderMetadata();
                if (metadata == null || metadata.Name == "")
                {
                    continue;
                }

                var headerValue = SerializeHeader(val, metadata.Explode);
                if (headerValue != "")
                {
                    httpRequest.Headers.Add(metadata.Name, headerValue);
                }
            }
        }

        private static string SerializeHeader(object value, bool explode)
        {
            if (Utilities.IsClass(value))
            {
                var items = new List<string>();

                var props = value.GetType().GetProperties();

                foreach (var prop in props)
                {
                    var val = prop.GetValue(value);
                    if (val == null)
                    {
                        continue;
                    }

                    var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetHeaderMetadata();
                    if (metadata == null || metadata.Name == null)
                    {
                        continue;
                    }

                    if (explode)
                    {
                        items.Add($"{metadata.Name}={Utilities.ValueToString(val)}");
                    }
                    else
                    {
                        items.Add(metadata.Name);
                        items.Add(Utilities.ValueToString(val));
                    }
                }

                return string.Join(",", items);
            }
            else if (Utilities.IsDictionary(value))
            {
                var items = new List<string>();

                foreach (DictionaryEntry entry in (IDictionary)value)
                {
                    var key = entry.Key?.ToString();

                    if (key == null)
                    {
                        continue;
                    }

                    if (explode)
                    {
                        items.Add($"{key}={Utilities.ValueToString(entry.Value)}");
                    }
                    else
                    {
                        items.Add(key);
                        items.Add(Utilities.ValueToString(entry.Value));
                    }
                }

                return string.Join(",", items);
            }
            else if (Utilities.IsList(value))
            {
                var items = new List<string>();

                foreach (var item in (IList)value)
                {
                    items.Add(Utilities.ValueToString(item));
                }

                return string.Join(",", items);
            }
            else
            {
                return Utilities.ValueToString(value);
            }
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/IsoDateTimeSerializer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Globalization;
    using Newtonsoft.Json;

    internal class IsoDateTimeSerializer: JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            var  nullableType = Nullable.GetUnderlyingType(objectType);
            if (nullableType != null)
            {
                return nullableType == typeof(DateTime);
            }

            return objectType == typeof(DateTime);
        }

        public override bool CanRead => false;

        public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) =>
            throw new NotImplementedException();

        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
        {
            if (value == null)
            {
                writer.WriteValue("null");
                return;
            }

            DateTime time = (DateTime)value;
            // The built-in Iso converter coerces to local time;
            // This standardizes to UTC.
            writer.WriteValue(time.ToUniversalTime().ToString("o", CultureInfo.InvariantCulture));
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/RequestBodySerializer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Reflection;
    using System.Text;


    internal class RequestBodySerializer
    {

        public static HttpContent? Serialize(
            object? request,
            string requestFieldName,
            string serializationMethod,
            bool nullable = false,
            bool optional = false,
            string format = ""
        )
        {
            if (request == null)
            {
                if (!nullable && !optional)
                {
                    throw new ArgumentNullException("request body is required");
                }
                else if (nullable && serializationMethod == "json")
                {
                    return new StringContent("null", Encoding.UTF8, "application/json");
                }

                return null;
            }

            if (Utilities.IsClass(request))
            {
                var prop = GetPropertyInfo(request, requestFieldName);

                if (prop != null)
                {
                    var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetRequestMetadata();
                    if (metadata != null)
                    {
                        var fieldValue = prop.GetValue(request);
                        if (fieldValue == null)
                        {
                            return null;
                        }

                        return TrySerialize(
                            fieldValue,
                            requestFieldName,
                            serializationMethod,
                            metadata.MediaType ?? ""
                        );
                    }
                }
            }

            // Not an object or flattened request
            return TrySerialize(request, requestFieldName, serializationMethod, "", format);
        }

        private static HttpContent? TrySerialize(
            object request,
            string requestFieldName,
            string serializationMethod,
            string mediaType = "",
            string format = ""
        )
        {
            if (mediaType == "")
            {
                mediaType = new Dictionary<string, string>()
                {
                    { "json", "application/json" },
                    { "form", "application/x-www-form-urlencoded" },
                    { "multipart", "multipart/form-data" },
                    { "raw", "application/octet-stream" },
                    { "string", "text/plain" },
                }[serializationMethod];
            }

            switch (serializationMethod)
            {
                case "json":
                    return SerializeJson(request, mediaType, format);
                case "form":
                    return SerializeForm(request, requestFieldName, mediaType);
                case "multipart":
                    return SerializeMultipart(request, mediaType);
                default:
                    // if request is a byte array, use it directly otherwise encode
                    if (request.GetType() == typeof(byte[]))
                    {
                        return SerializeRaw((byte[])request, mediaType);
                    }
                    else if (request.GetType() == typeof(string))
                    {
                        return SerializeString((string)request, mediaType);
                    }
                    else
                    {
                        throw new Exception(
                            "Cannot serialize request body of type "
                                + request.GetType().Name
                                + " with serialization method "
                                + serializationMethod
                                + ""
                        );
                    }
            }
        }

        private static HttpContent SerializeJson(object request, string mediaType, string format = "")
        {
            return new StringContent(Utilities.SerializeJSON(request, format), Encoding.UTF8, mediaType);
        }

        private static HttpContent SerializeForm(
            object request,
            string requestFieldName,
            string mediaType
        )
        {
            Dictionary<string, List<string>> form = new Dictionary<string, List<string>>();

            if (Utilities.IsClass(request))
            {
                var props = request.GetType().GetProperties();

                foreach (var prop in props)
                {
                    var val = prop.GetValue(request);
                    if (val == null)
                    {
                        continue;
                    }

                    var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetFormMetadata();
                    if (metadata == null)
                    {
                        continue;
                    }

                    if (metadata.Json)
                    {
                        var key = metadata.Name ?? prop.Name;
                        if (key == "")
                        {
                            continue;
                        }

                        if (!form.ContainsKey(key))
                        {
                            form.Add(key, new List<string>());
                        }

                        form[key].Add(Utilities.SerializeJSON(val));
                    }
                    else
                    {
                        switch (metadata.Style)
                        {
                            case "form":
                                SerializeFormValue(
                                    metadata.Name ?? prop.Name,
                                    metadata.Explode,
                                    val,
                                    ref form
                                );
                                break;
                            default:
                                throw new Exception("Unsupported form style " + metadata.Style);
                        }
                    }
                }
            }
            else if (Utilities.IsDictionary(request))
            {
                foreach (var k in ((IDictionary)request).Keys)
                {
                    var key = k?.ToString();

                    if (key == null)
                    {
                        continue;
                    }

                    if (!form.ContainsKey(key))
                    {
                        form.Add(key, new List<string>());
                    }

                    form[key].Add(Utilities.ValueToString(((IDictionary)request)[key]));
                }
            }
            else if (Utilities.IsList(request))
            {
                foreach (var item in (IList)request)
                {
                    if (!form.ContainsKey(requestFieldName))
                    {
                        form.Add(requestFieldName, new List<string>());
                    }

                    form[requestFieldName].Add(Utilities.ValueToString(item));
                }
            }
            else
            {
                throw new Exception(
                    "Cannot serialize form data from type " + request.GetType().Name
                );
            }

            var formData = new List<KeyValuePair<string?, string?>>();

            foreach (var key in form.Keys)
            {
                foreach (var val in form[key])
                {
                    formData.Add(
                        new KeyValuePair<string?, string?>(
                            key + (form[key].Count > 1 ? "[]" : ""),
                            val
                        )
                    );
                }
            }

            return new FormUrlEncodedContent(formData);
        }

        private static HttpContent SerializeMultipart(object request, string mediaType)
        {
            var formData = new MultipartFormDataContent();

            var properties = request.GetType().GetProperties();

            foreach (var prop in properties)
            {
                var value = prop.GetValue(request);
                if (value == null)
                {
                    continue;
                }

                var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetMultipartFormMetadata();
                if (metadata == null)
                {
                    continue;
                }

                if (metadata.File)
                {
                    if (!Utilities.IsClass(value))
                    {
                        throw new Exception(
                            "Cannot serialize multipart file from type " + value.GetType().Name
                        );
                    }

                    var fileProps = value.GetType().GetProperties();

                    byte[]? content = null;
                    string fileName = "";
                    string fieldName = metadata.Name;

                    foreach (var fileProp in fileProps)
                    {
                        var fileMetadata = fileProp
                            .GetCustomAttribute<SpeakeasyMetadata>()
                            ?.GetMultipartFormMetadata();
                        if (
                            fileMetadata == null
                            || (!fileMetadata.Content && fileMetadata.Name == "")
                        )
                        {
                            continue;
                        }

                        if (fileMetadata.Content)
                        {
                            content = (byte[]?)fileProp.GetValue(value);
                        }
                        else
                        {
                            fileName = fileProp.GetValue(value)?.ToString() ?? "";
                        }
                    }

                    if (fileName == "" || content == null)
                    {
                        throw new Exception("Invalid multipart/form-data file");
                    }

                    formData.Add(new ByteArrayContent(content), fieldName, fileName);
                }
                else if (metadata.Json)
                {
                    formData.Add(
                        new StringContent(Utilities.SerializeJSON(value)),
                        metadata.Name ?? prop.Name
                    );
                }
                else if (Utilities.IsList(value))
                {
                    var values = new List<string>();

                    foreach (var item in (IList)value)
                    {
                        values.Add(Utilities.ValueToString(item));
                    }

                    foreach (var val in values)
                    {
                        formData.Add(new StringContent(val), metadata.Name ?? prop.Name);
                    }
                }
                else
                {
                    formData.Add(
                        new StringContent(Utilities.ValueToString(value)),
                        metadata.Name ?? prop.Name
                    );
                }
            }

            return formData;
        }

        private static HttpContent SerializeRaw(byte[] request, string mediaType)
        {
            var content = new ByteArrayContent(request);
            content.Headers.Add("Content-Type", mediaType);
            return content;
        }

        private static HttpContent SerializeString(string request, string mediaType)
        {
            return new StringContent(request, Encoding.UTF8, mediaType);
        }

        private static void SerializeFormValue(
            string fieldName,
            bool explode,
            object value,
            ref Dictionary<string, List<string>> form
        )
        {
            if (Utilities.IsClass(value))
            {
                if (Utilities.IsDate(value))
                {
                    if (!form.ContainsKey(fieldName))
                    {
                        form[fieldName] = new List<string>();
                    }

                    form[fieldName].Add(Utilities.ValueToString(value));
                }
                else
                {
                    var props = value.GetType().GetProperties();

                    var items = new List<string>();

                    foreach (var prop in props)
                    {
                        var val = prop.GetValue(value);
                        if (val == null)
                        {
                            continue;
                        }

                        var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetFormMetadata();
                        if (metadata == null || metadata.Name == null)
                        {
                            continue;
                        }

                        if (explode)
                        {
                            if (!form.ContainsKey(metadata.Name))
                            {
                                form[metadata.Name] = new List<string>();
                            }

                            if (Utilities.IsList(val))
                            {
                                foreach(var item in (IEnumerable)val)
                                {
                                    form[metadata.Name].Add(Utilities.ValueToString(item));
                                }
                            }
                            else
                            {
                              form[metadata.Name].Add(Utilities.ValueToString(val));
                            }
                        }
                        else
                        {
                            if (Utilities.IsList(val))
                            {
                                foreach(var item in (IEnumerable)val)
                                {
                                    items.Add($"{metadata.Name},{Utilities.ValueToString(item)}");
                                }
                            }
                            else
                            {
                              items.Add($"{metadata.Name},{Utilities.ValueToString(val)}");
                            }
                        }
                    }

                    if (items.Count > 0)
                    {
                        if (!form.ContainsKey(fieldName))
                        {
                            form[fieldName] = new List<string>();
                        }

                        form[fieldName].Add(string.Join(",", items));
                    }
                }
            }
            else if (Utilities.IsDictionary(value))
            {
                var items = new List<string>();

                foreach (var k in ((IDictionary)value).Keys)
                {
                    var key = k?.ToString();

                    if (key == null)
                    {
                        continue;
                    }

                    if (explode)
                    {
                        if (!form.ContainsKey(key))
                        {
                            form[key] = new List<string>();
                        }

                        form[key].Add(
                            Utilities.ValueToString(((IDictionary)value)[key])
                        );
                    }
                    else
                    {
                        items.Add($"{key},{Utilities.ValueToString(((IDictionary)value)[key])}");
                    }
                }

                if (items.Count > 0)
                {
                    if (!form.ContainsKey(fieldName))
                    {
                        form[fieldName] = new List<string>();
                    }

                    form[fieldName].Add(string.Join(",", items));
                }
            }
            else if (Utilities.IsList(value))
            {
                var values = new List<string>();
                var items = new List<string>();

                foreach (var item in (IList)value)
                {
                    if (explode)
                    {
                        values.Add(Utilities.ValueToString(item));
                    }
                    else
                    {
                        items.Add(Utilities.ValueToString(item));
                    }
                }

                if (items.Count > 0)
                {
                    values.Add(string.Join(",", items));
                }

                foreach (var val in values)
                {
                    if (!form.ContainsKey(fieldName))
                    {
                        form[fieldName] = new List<string>();
                    }

                    form[fieldName].Add(val);
                }
            }
            else
            {
                if (!form.ContainsKey(fieldName))
                {
                    form[fieldName] = new List<string>();
                }

                form[fieldName].Add(Utilities.ValueToString(value));
            }
        }

        private static PropertyInfo? GetPropertyInfo(object value, string propertyName)
        {
            try
            {
                return value.GetType().GetProperty(propertyName);
            }
            catch (Exception)
            {
                return null;
            }
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/ResponseBodyDeserializer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Http;
    using System.Reflection;
    using System.Text;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;


    internal class ResponseBodyDeserializer
    {

        public static T? Deserialize<T>(string json, NullValueHandling nullValueHandling=NullValueHandling.Ignore, MissingMemberHandling missingMemberHandling=MissingMemberHandling.Ignore)
        {
            return JsonConvert.DeserializeObject<T>(json, new JsonSerializerSettings(){ NullValueHandling = nullValueHandling, MissingMemberHandling = missingMemberHandling, Converters = Utilities.GetJsonDeserializers(typeof(T))});
        }

        public sealed class MissingMemberException : Exception
        {
            public MissingMemberException() : base("Missing member.") { }
        }

        public sealed class DeserializationException : Exception
        {
            public DeserializationException(Type type) : base($"Could not deserialize into {type} type.") { }
        }

        public static T? DeserializeUndiscriminatedUnionMember<T>(string json)
        {
            try
            {
                return Deserialize<T>(json, missingMemberHandling: MissingMemberHandling.Error);
            }
            catch (Exception ex)
            {
                if (ex is Newtonsoft.Json.JsonSerializationException &&
                    ex.Source == "Newtonsoft.Json" &&
                    ex.Message.Contains("Could not find member"))
                {
                    throw new MissingMemberException();
                }
                else if (ex is Newtonsoft.Json.JsonReaderException ||
                         ex is Newtonsoft.Json.JsonSerializationException
                )
                {
                    throw new DeserializationException(typeof(T));
                }

                throw;
            }
        }

        public static object DeserializeUndiscriminatedUnionFallback(System.Type type, object obj, string propertyName, string json)
        {
            MethodInfo? method = typeof(ResponseBodyDeserializer).GetMethod("Deserialize");
            if (method != null)
            {
                MethodInfo generic = method!.MakeGenericMethod(type);
                var args = new object[] { json, NullValueHandling.Ignore, MissingMemberHandling.Ignore };
                var value = generic.Invoke(null, args);
                PropertyInfo? propertyInfo = obj.GetType().GetProperty(propertyName!);
                if (propertyInfo != null && value != null)
                {
                    propertyInfo!.SetValue(obj, value!);
                    return obj;
                }
            }

            throw new DeserializationException(type);
        }

        public static int MissingJsonProperties(System.Type type, string json)
        {
            int missing = 0;

            JObject jo = JObject.Parse(json);

            var jsonPropertyAttributes = type.GetProperties()
                .Where(prop => Attribute.IsDefined(prop, typeof(JsonPropertyAttribute)))
                .Select(prop => prop.GetCustomAttribute(typeof(JsonPropertyAttribute)) as JsonPropertyAttribute)
                .Where(attr => attr != null && attr!.PropertyName != null)
                .ToList();

            foreach (var attr in jsonPropertyAttributes)
            {
                string propertyName = attr!.PropertyName!;
                if (!jo.TryGetValue(propertyName, out var _value)){
                    missing++;
                }
            }

            return missing;
        }

        public static int CompareFallbackCandidates(System.Type typeA, System.Type typeB, string json)
        {
            var missingA = MissingJsonProperties(typeA, json);
            var missingB = MissingJsonProperties(typeB, json);

            if (missingA == missingB)
            {
                return typeB.GetProperties().Count().CompareTo(typeA.GetProperties().Count());
            }

            return missingA.CompareTo(missingB);
        }

    }
}

================
File: src/Clerk/BackendAPI/Utils/Retries/BackoffStrategy.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils.Retries
{
    public class BackoffStrategy
    {
        public readonly long InitialIntervalMs;
        public readonly long MaxIntervalMs;
        public readonly long MaxElapsedTimeMs;
        public readonly double BaseFactor;
        public readonly double JitterFactor;

        /// <summary>
        /// Configures the exponential backoff strategy.
        /// </summary>
        /// <remarks>
        /// The duration between consecutive attempts is calculated as follows:
        ///     intervalMs = min(maxIntervalMs, initialIntervalMs*(baseFactor^attempts) +/- r)
        /// where baseFactor (also referred to as "exponent") is the multiplicative factor
        /// and r a random value between 0 and jitterFactor*intervalMs.
        /// </remarks>
        /// <param name="initialIntervalMs">The initial interval in milliseconds.</param>
        /// <param name="maxIntervalMs">The maximum interval in milliseconds.</param>
        /// <param name="maxElapsedTimeMs">The maximum elapsed time in milliseconds.</param>
        /// <param name="exponent">The base factor used to compute the exponential interval</param>
        /// <param name="jitterFactor">The jitter factor used to randomize the backoff interval</param>
        public BackoffStrategy(long initialIntervalMs,
                               long maxIntervalMs,
                               long maxElapsedTimeMs,
                               double exponent,
                               double jitterFactor = 0.5)
        {
            InitialIntervalMs = initialIntervalMs;
            MaxIntervalMs = maxIntervalMs;
            MaxElapsedTimeMs = maxElapsedTimeMs;
            BaseFactor = exponent;
            JitterFactor = jitterFactor;
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/Retries/Retries.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils.Retries
{
    using System;
    using System.Net.Http;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Models.Errors;

    public class Retries
    {
        private Func<Task<HttpResponseMessage>> action;
        private RetryConfig retryConfig;
        private List<string> statusCodes;

        public Retries(Func<Task<HttpResponseMessage>> action, RetryConfig retryConfig, List<string> statusCodes)
        {
            this.action = action;
            this.retryConfig = retryConfig;
            this.statusCodes = statusCodes;

            if (statusCodes.Count == 0)
            {
                throw new ArgumentException("statusCodes list cannot be empty");
            }
        }

        public sealed class PermanentException : Exception
        {
            public PermanentException(Exception innerException) : base("NonRetryable error.", innerException) { }
        }

        public sealed class RetryableException : Exception
        {
            public HttpResponseMessage? Response = null;

            public RetryableException(HttpResponseMessage response) {
                Response = response;
                                                                    }

            public RetryableException(Exception innerException) : base("An error occurred.", innerException) { }
        }

        public async Task<HttpResponseMessage> Run()
        {
            switch(retryConfig.Strategy) {
                case RetryConfig.RetryStrategy.BACKOFF:
                    return await retryWithBackoff(retryConfig.RetryConnectionErrors);

                case RetryConfig.RetryStrategy.NONE:
                    return await action();

                default:
                    throw new ArgumentException("Invalid retry strategy");
            }
        }

        private async Task<HttpResponseMessage> GetResponseAsync(bool retryConnectionErrors)
        {
            try
            {
                var response = await action();

                foreach (var statusCode in statusCodes)
                {
                    if (statusCode.ToUpper().Contains("X"))
                    {
                        var codeRange = int.Parse(statusCode.Substring(0, 1));
                        var statusMajor = (int)response.StatusCode / 100;
                        if (codeRange == statusMajor)
                        {
                            throw new RetryableException(response);
                        }
                    }
                    else
                    {
                        var code = int.Parse(statusCode);
                        if (code == (int)response.StatusCode)
                        {
                            throw new RetryableException(response);
                        }
                    }
                }

                return response;
            }
            catch (RetryableException)
            {
                throw;
            }
            catch (Exception ex)
            {
                if ((ex is HttpRequestException || ex is TaskCanceledException) && retryConfig.RetryConnectionErrors)
                {
                    throw new RetryableException(ex);
                }
                throw new PermanentException(ex);
            }
        }

        private async Task<HttpResponseMessage> retryWithBackoff(bool retryConnectionErrors)
        {
            var backoff = retryConfig.Backoff;
            if(backoff == null){
                throw new ArgumentException("Backoff strategy is not defined");
            }

            var startMs = DateTimeOffset.Now.ToUnixTimeMilliseconds();
            var numAttempts = 0;

            while (true)
            {
                try
                {
                    return await GetResponseAsync(retryConnectionErrors);
                }
                catch (PermanentException ex)
                {
                    throw ex.InnerException!;
                }
                catch (RetryableException ex)
                {
                    var nowMs = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                    if (nowMs - startMs > backoff.MaxElapsedTimeMs)
                    {
                        if(ex.Response != null)
                        {
                            return ex.Response;
                        }
                        throw;
                    }

                    var intervalMs = backoff.InitialIntervalMs * Math.Pow(backoff.BaseFactor, numAttempts);
                    var jitterMs = backoff.JitterFactor * intervalMs;
                    intervalMs = intervalMs - jitterMs + new Random().NextDouble() * (2 * jitterMs + 1);
                    intervalMs = Math.Min(intervalMs, backoff.MaxIntervalMs);

                    await Task.Delay((int)intervalMs);
                    numAttempts += 1;
                }
                catch (Exception)
                {
                    throw new Exception("Unexpected error occurred.");
                }
            }
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/Retries/RetryConfig.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils.Retries
{
    public class RetryConfig
    {
        public enum RetryStrategy
        {
            BACKOFF,
            NONE
        }
        public readonly RetryStrategy Strategy;
        public readonly BackoffStrategy? Backoff;
        public readonly bool RetryConnectionErrors;

        /// <summary>
        /// Selects the retry strategy.
        /// </summary>
        /// <param name="strategy">The retry strategy.</param>
        /// <param name="backoff">The backoff strategy configuration (if applicable)</param>
        /// <param name="retryConnectionErrors">Whether to retry on connection errors.</param>
        /// <remarks>
        /// The backoff strategy is only required if the retry strategy is set to BACKOFF.
        /// To disable retries, set the strategy to NONE.
        /// </remarks>
        public RetryConfig(RetryStrategy strategy, BackoffStrategy? backoff = null, bool retryConnectionErrors = false)
        {

            if (strategy == RetryStrategy.BACKOFF && backoff == null)
            {
                throw new System.ArgumentNullException("Backoff strategy configuration was not provided");
            }

            Strategy = strategy;
            Backoff = backoff;
            RetryConnectionErrors = retryConnectionErrors;
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/SecurityMetadata.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Reflection;
    using System.Text;
    using System.Web;


    internal class SecurityMetadata
    {
        private Dictionary<string, string> headerParams { get; } = new Dictionary<string, string>();
        private Dictionary<string, string> queryParams { get; } = new Dictionary<string, string>();

        public SecurityMetadata(Func<object> securitySource)
        {
            ParseSecuritySource(securitySource);
        }

        public HttpRequestMessage Apply(HttpRequestMessage request)
        {
            foreach (var kvp in headerParams)
            {
                request.Headers.Add(kvp.Key, kvp.Value);
            }

            if(request.RequestUri != null)
            {
                var uriBuilder = new UriBuilder(request.RequestUri);
                var query = HttpUtility.ParseQueryString(uriBuilder.Query);
                foreach (var kvp in queryParams)
                {
                    query.Add(kvp.Key, kvp.Value);
                }
                uriBuilder.Query = query.ToString();
                request.RequestUri =  uriBuilder.Uri;
            }

            return request;
        }

        private void ParseSecuritySource(Func<object> securitySource)
        {
            if (securitySource == null)
            {
                return;
            }

            var security = securitySource();
            if (security == null)
            {
                return;
            }

            foreach (var prop in security.GetType().GetProperties())
            {
                var value = prop.GetValue(security, null);
                if (value == null)
                {
                    continue;
                }

                var secMetadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetSecurityMetadata();
                if (secMetadata == null)
                {
                    continue;
                }

                if (secMetadata.Option)
                {
                    ParseOption(value);
                }
                else if (secMetadata.Scheme)
                {
                    if (secMetadata.SubType == "basic" && !Utilities.IsClass(value))
                    {
                        ParseScheme(secMetadata, security);
                        return;
                    }
                    else
                    {
                        ParseScheme(secMetadata, value);
                    }
                }
            }

            return;
        }

        private void ParseOption(object option)
        {
            foreach (var prop in option.GetType().GetProperties())
            {
                var value = prop.GetValue(option, null);
                if (value == null)
                {
                    continue;
                }

                var secMetadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetSecurityMetadata();
                if (secMetadata == null || !secMetadata.Scheme)
                {
                    continue;
                }

                ParseScheme(secMetadata, value);
            }
        }

        private void ParseScheme(SpeakeasyMetadata.SecurityMetadata schemeMetadata, object scheme)
        {
            if (Utilities.IsClass(scheme))
            {
                if (schemeMetadata.Type == "http" && schemeMetadata.SubType == "basic")
                {
                    ParseBasicAuthScheme(scheme);
                    return;
                }

                foreach (var prop in scheme.GetType().GetProperties())
                {
                    var value = prop.GetValue(scheme, null);
                    if (value == null)
                    {
                        continue;
                    }

                    var secMetadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetSecurityMetadata();
                    if (secMetadata == null || secMetadata.Name == "")
                    {
                        continue;
                    }

                    ParseSchemeValue(schemeMetadata, secMetadata, value);
                }
            }
            else
            {
                ParseSchemeValue(schemeMetadata, schemeMetadata, scheme);
            }
        }

        private void ParseSchemeValue(
            SpeakeasyMetadata.SecurityMetadata schemeMetadata,
            SpeakeasyMetadata.SecurityMetadata valueMetadata,
            object value
        )
        {
            var key = valueMetadata.Name;
            if (key == "")
            {
                return;
            }

            var valStr = Utilities.ValueToString(value);

            switch (schemeMetadata.Type)
            {
                case "apiKey":
                    switch (schemeMetadata.SubType)
                    {
                        case "header":
                            headerParams.Add(key, valStr);
                            break;
                        case "query":
                            queryParams.Add(key, valStr);
                            break;
                        case "cookie":
                            headerParams.Add("cookie", $"{key}={valStr}");
                            break;
                        default:
                            throw new Exception($"Unknown apiKey subType: {schemeMetadata.SubType}");
                    }
                    break;
                case "openIdConnect":
                    headerParams.Add(key, Utilities.PrefixBearer(valStr));
                    break;
                case "oauth2":
                    if (!"client_credentials".Equals(schemeMetadata.SubType)) {
                        headerParams.Add(key, Utilities.PrefixBearer(valStr));
                    }
                    break;
                case "http":
                    switch (schemeMetadata.SubType)
                    {
                        case "bearer":
                            headerParams.Add(key, Utilities.PrefixBearer(valStr));
                            break;
                        default:
                            throw new Exception($"Unknown http subType: {schemeMetadata.SubType}");
                    }
                    break;
                default:
                    throw new Exception($"Unknown security type: {schemeMetadata.Type}");
            }
        }

        private void ParseBasicAuthScheme(object scheme)
        {

            string username = "";
            string password = "";

            foreach (var prop in scheme.GetType().GetProperties())
            {
                var value = prop.GetValue(scheme, null);
                if (value == null)
                {
                    continue;
                }

                var secMetadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetSecurityMetadata();
                if (secMetadata == null || secMetadata.Name == "")
                {
                    continue;
                }

                if (secMetadata.Name == "username")
                {
                    username = Utilities.ValueToString(value);
                }
                else if (secMetadata.Name == "password")
                {
                    password = Utilities.ValueToString(value);
                }
            }

            var auth = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{username}:{password}"));
            headerParams.Add("Authorization", $"Basic {auth}");
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/SpeakeasyHttpClient.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    public interface ISpeakeasyHttpClient
    {
        /// <summary>
        /// Sends an HTTP request asynchronously.
        /// </summary>
        /// <param name="request">The HTTP request message to send.</param>
        /// <returns>The value of the TResult parameter contains the HTTP response message.</returns>
        Task<HttpResponseMessage> SendAsync(HttpRequestMessage request);

        /// <summary>
        /// Clones an HTTP request asynchronously.
        /// </summary>
        /// <remarks>
        /// This method is used in the context of Retries. It creates a new HttpRequestMessage instance
        /// as a deep copy of the original request, including its method, URI, content, headers and options.
        /// </remarks>
        /// <param name="request">The HTTP request message to clone.</param>
        /// <returns>The value of the TResult parameter contains the cloned HTTP request message.</returns>
        Task<HttpRequestMessage> CloneAsync(HttpRequestMessage request);
    }

    public class SpeakeasyHttpClient : ISpeakeasyHttpClient
    {
        protected readonly HttpClient httpClient;

        public SpeakeasyHttpClient()
        {
            httpClient = new System.Net.Http.HttpClient();
        }

        public virtual async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request)
        {
            return await httpClient.SendAsync(request);
        }

        public virtual async Task<HttpRequestMessage> CloneAsync(HttpRequestMessage request)
        {
            HttpRequestMessage clone = new HttpRequestMessage(request.Method, request.RequestUri);

            if (request.Content != null)
            {
                clone.Content = new ByteArrayContent(await request.Content.ReadAsByteArrayAsync());
                if (request.Content.Headers != null)
                {
                    foreach (var h in request.Content.Headers)
                    {
                        clone.Content.Headers.Add(h.Key, h.Value);
                    }
                }
            }

            foreach (KeyValuePair<string, IEnumerable<string>> header in request.Headers)
            {
                clone.Headers.TryAddWithoutValidation(header.Key, header.Value);
            }

            foreach (KeyValuePair<string, object?> prop in request.Options)
            {
                clone.Options.TryAdd(prop.Key, prop.Value);
            }

            return clone;
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/SpeakeasyMetadata.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Collections.Generic;

    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
    internal class SpeakeasyMetadata : Attribute
    {
        internal class RequestMetadata
        {
            public string? MediaType { get; set; } = null;
        }

        internal class FormMetadata
        {
            public string Style { get; set; } = "form";
            public bool Explode { get; set; } = true;
            public bool Json { get; set; } = false;
            public string Name { get; set; } = "";
        }

        internal class MultipartFormMetadata
        {
            public bool File { get; set; } = false;
            public bool Content { get; set; } = false;
            public bool Json { get; set; } = false;
            public string Name { get; set; } = "";
        }

        internal class PathParamMetadata
        {
            public string Style { get; set; } = "simple";
            public bool Explode { get; set; } = false;
            public string Name { get; set; } = "";
            public string? Serialization { get; set; } = null;
        }

        internal class QueryParamMetadata
        {
            public string Style { get; set; } = "form";
            public bool Explode { get; set; } = true;
            public string Name { get; set; } = "";
            public string? Serialization { get; set; } = null;
        }

        internal class HeaderMetadata
        {
            public string Style { get; set; } = "simple";
            public bool Explode { get; set; } = false;
            public string Name { get; set; } = "";
        }

        internal class SecurityMetadata
        {
            public string? Type { get; set; } = null;
            public string? SubType { get; set; } = null;
            public bool Option { get; set; } = false;
            public bool Scheme { get; set; } = false;
            public string Name { get; set; } = "";
        }

        public string Value { get; set; }
        private Dictionary<string, string>? metadata;

        public SpeakeasyMetadata(string value)
        {
            Value = value;
        }

        public RequestMetadata? GetRequestMetadata()
        {
            if (GetMetadata().TryGetValue("request", out var value))
            {
                var metadata = new RequestMetadata();

                ParseMetadata(value, ref metadata);

                return metadata;
            }

            return null;
        }

        public FormMetadata? GetFormMetadata()
        {
            if (GetMetadata().TryGetValue("form", out var value))
            {
                var metadata = new FormMetadata();

                ParseMetadata(value, ref metadata);

                return metadata;
            }

            return null;
        }

        public MultipartFormMetadata? GetMultipartFormMetadata()
        {
            if (GetMetadata().TryGetValue("multipartForm", out var value))
            {
                var metadata = new MultipartFormMetadata();

                ParseMetadata(value, ref metadata);

                return metadata;
            }

            return null;
        }

        public PathParamMetadata? GetPathParamMetadata()
        {
            if (GetMetadata().TryGetValue("pathParam", out var value))
            {
                var metadata = new PathParamMetadata();
                ParseMetadata(value, ref metadata);
                return metadata;
            }

            return null;
        }

        public QueryParamMetadata? GetQueryParamMetadata()
        {
            if (GetMetadata().TryGetValue("queryParam", out var value))
            {
                var metadata = new QueryParamMetadata();

                ParseMetadata(value, ref metadata);

                return metadata;
            }

            return null;
        }

        public HeaderMetadata? GetHeaderMetadata()
        {
            if (GetMetadata().TryGetValue("header", out var value))
            {
                var metadata = new HeaderMetadata();

                ParseMetadata(value, ref metadata);

                return metadata;
            }

            return null;
        }

        public SecurityMetadata? GetSecurityMetadata()
        {
            if (GetMetadata().TryGetValue("security", out var value))
            {
                var metadata = new SecurityMetadata();

                ParseMetadata(value, ref metadata);

                return metadata;
            }

            return null;
        }

        private Dictionary<string, string> GetMetadata()
        {
            if (metadata != null)
            {
                return metadata;
            }

            metadata = new Dictionary<string, string>();

            var groups = Value.Split(" ");

            foreach (var group in groups)
            {
                var parts = group.Split(":");

                if (parts.Length != 2)
                {
                    continue;
                }

                metadata.Add(parts[0], parts[1]);
            }

            return metadata;
        }

        private void ParseMetadata<T>(string raw, ref T metadata)
        {
            Dictionary<string, string> values = new Dictionary<string, string>();

            var groups = raw.Split(",");

            foreach (var group in groups)
            {
                var parts = group.Split("=");
                var val = "";
                if (parts.Length == 2)
                {
                    val = parts[1];
                }

                values.Add(parts[0], val);
            }

            var props = typeof(T).GetProperties();

            foreach (var prop in props)
            {
                if (
                    values.TryGetValue(
                        char.ToLower(prop.Name[0]) + prop.Name.Substring(1),
                        out var value
                    )
                )
                {
                    if (prop.PropertyType == typeof(bool) || prop.PropertyType == typeof(Boolean))
                    {
                        prop.SetValue(metadata, value == "true" || value == "");
                    }
                    else
                    {
                        prop.SetValue(metadata, value);
                    }
                }
            }
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/URLBuilder.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Reflection;

    internal static class URLBuilder
    {
        public static string Build(string baseUrl, string relativeUrl, object? request)
        {
            var url = baseUrl;

            if (url.EndsWith("/"))
            {
                url = url.Substring(0, url.Length - 1);
            }

            var pathAndFragment = relativeUrl.Split('#');
            if (pathAndFragment.Length > 2)
            {
                throw new ArgumentException($"Malformed URL: {relativeUrl}");
            }

            url += pathAndFragment[0];

            var parameters = GetPathParameters(request);
            url = ReplaceParameters(url, parameters);

            var queryParams = SerializeQueryParams(TrySerializeQueryParams(request));
            if (queryParams != "")
            {
                url += $"?{queryParams}";
            }

            if (pathAndFragment.Length == 2)
            {
                url += $"#{pathAndFragment[1]}";
            }

            return url;
        }

        public static string ReplaceParameters(string url, Dictionary<string, string> parameters)
        {
            foreach (var key in parameters.Keys)
            {
                url = url.Replace($"{{{key}}}", parameters[key]);
            }

            return url;
        }

        public static string SerializeQueryParams(Dictionary<string, List<string>> queryParams) {
            var queries = new List<string>();

            foreach (var key in queryParams.Keys)
            {
                foreach (var value in queryParams[key])
                {
                    queries.Add($"{key}={value}");
                }
            }

            return string.Join("&", queries);
        }

        private static Dictionary<string, string> GetPathParameters(object? request)
        {
            var parameters = new Dictionary<string, string>();

            if (request == null)
            {
                return parameters;
            }

            var props = request.GetType().GetProperties();

            foreach (var prop in props)
            {
                var val = prop.GetValue(request);

                if (val == null)
                {
                    continue;
                }

                if (prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetRequestMetadata() != null)
                {
                    continue;
                }

                var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetPathParamMetadata();

                if (metadata == null)
                {
                    continue;
                }

                if (metadata.Serialization != null)
                {
                    switch (metadata.Serialization)
                    {
                        case "json":
                            parameters.Add(
                                metadata.Name ?? prop.Name,
                                WebUtility.UrlEncode(Utilities.SerializeJSON(val))
                            );
                            break;
                        default:
                            throw new Exception(
                                $"Unknown serialization type: {metadata.Serialization}"
                            );
                    }
                }
                else
                {
                    switch (metadata.Style)
                    {
                        case "simple":
                            var simpleParams = SerializeSimplePathParams(
                                metadata.Name ?? prop.Name,
                                val,
                                metadata.Explode
                            );
                            foreach (var key in simpleParams.Keys)
                            {
                                parameters.Add(key, simpleParams[key]);
                            }
                            break;
                        default:
                            throw new Exception($"Unsupported path param style: {metadata.Style}");
                    }
                }
            }

            return parameters;
        }

        private static Dictionary<string, List<string>> TrySerializeQueryParams(object? request)
        {
            var parameters = new Dictionary<string, List<string>>();

            if (request == null)
            {
                return parameters;
            }

            var props = request.GetType().GetProperties();

            foreach (var prop in props)
            {
                var val = prop.GetValue(request);

                if (val == null)
                {
                    continue;
                }

                if (prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetRequestMetadata() != null)
                {
                    continue;
                }

                var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetQueryParamMetadata();
                if (metadata == null)
                {
                    continue;
                }

                if (metadata.Serialization != null)
                {
                    switch (metadata.Serialization)
                    {
                        case "json":
                            if (!parameters.ContainsKey(metadata.Name ?? prop.Name))
                            {
                                parameters.Add(metadata.Name ?? prop.Name, new List<string>());
                            }

                            parameters[metadata.Name ?? prop.Name].Add(
                                Utilities.SerializeJSON(val)
                            );
                            break;
                        default:
                            throw new Exception(
                                $"Unknown serialization type: {metadata.Serialization}"
                            );
                    }
                }
                else
                {
                    switch (metadata.Style)
                    {
                        case "form":
                            var formParams = SerializeFormQueryParams(
                                metadata.Name ?? prop.Name,
                                val,
                                metadata.Explode,
                                ","
                            );
                            foreach (var key in formParams.Keys)
                            {
                                if (!parameters.ContainsKey(key))
                                {
                                    parameters.Add(key, new List<string>());
                                }

                                foreach (var v in formParams[key])
                                {
                                    parameters[key].Add(v);
                                }
                            }
                            break;
                        case "deepObject":
                            var deepObjParams = SerializeDeepObjectQueryParams(
                                metadata.Name ?? prop.Name,
                                val
                            );
                            foreach (var key in deepObjParams.Keys)
                            {
                                if (!parameters.ContainsKey(key))
                                {
                                    parameters.Add(key, new List<string>());
                                }

                                foreach (var v in deepObjParams[key])
                                {
                                    parameters[key].Add(v);
                                }
                            }
                            break;
                        case "pipeDelimited":
                            var pipeParams = SerializeFormQueryParams(
                                metadata.Name ?? prop.Name,
                                val,
                                metadata.Explode,
                                "|"
                            );
                            foreach (var key in pipeParams.Keys)
                            {
                                if (!parameters.ContainsKey(key))
                                {
                                    parameters.Add(key, new List<string>());
                                }

                                foreach (var v in pipeParams[key])
                                {
                                    parameters[key].Add(v);
                                }
                            }
                            break;
                        default:
                            throw new Exception($"Unsupported query param style: {metadata.Style}");
                    }
                }
            }

            return parameters;
        }

        private static Dictionary<string, string> SerializeSimplePathParams(
            string parentName,
            object value,
            bool explode
        )
        {
            var parameters = new Dictionary<string, string>();

            if (Utilities.IsClass(value))
            {
                var vals = new List<string>();

                var props = value.GetType().GetProperties();

                foreach (var prop in props)
                {
                    var val = prop.GetValue(value);

                    if (val == null)
                    {
                        continue;
                    }

                    var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetPathParamMetadata();
                    if (metadata == null)
                    {
                        continue;
                    }

                    if (explode)
                    {
                        vals.Add($"{metadata.Name}={Utilities.ToString(val)}");
                    }
                    else
                    {
                        vals.Add($"{metadata.Name},{Utilities.ToString(val)}");
                    }
                }

                parameters.Add(parentName, string.Join(",", vals));
            }
            else if (Utilities.IsDictionary(value))
            {
                var vals = new List<string>();

                foreach (var key in ((IDictionary)value).Keys)
                {
                    if (key == null)
                    {
                        continue;
                    }

                    var val = ((IDictionary)value)[key];

                    if (explode)
                    {
                        vals.Add($"{key}={Utilities.ToString(val)}");
                    }
                    else
                    {
                        vals.Add($"{key},{Utilities.ToString(val)}");
                    }
                }

                parameters.Add(parentName, string.Join(",", vals));
            }
            else if (Utilities.IsList(value))
            {
                var vals = new List<string>();

                foreach (var val in (IEnumerable)value)
                {
                    vals.Add(Utilities.ToString(val));
                }

                parameters.Add(parentName, string.Join(",", vals));
            }
            else
            {
                parameters.Add(parentName, Utilities.ToString(value));
            }

            return parameters;
        }

        private static Dictionary<string, List<string>> SerializeFormQueryParams(
            string parentName,
            object value,
            bool explode,
            string delimiter
        )
        {
            var parameters = new Dictionary<string, List<string>>();

            if (Utilities.IsClass(value) && !Utilities.IsDate(value))
            {
                var props = value.GetType().GetProperties();

                var items = new List<string>();

                foreach (var prop in props)
                {
                    var val = prop.GetValue(value);
                    if (val == null)
                    {
                        continue;
                    }

                    var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetQueryParamMetadata();
                    if (metadata == null || metadata.Name == null)
                    {
                        continue;
                    }

                    if (explode)
                    {
                        if (!parameters.ContainsKey(metadata.Name))
                        {
                            parameters.Add(metadata.Name, new List<string>());
                        }

                        parameters[metadata.Name].Add(
                            Utilities.ToString(val)
                        );
                    }
                    else
                    {
                        items.Add(
                            $"{metadata.Name}{delimiter}{Utilities.ValueToString(val)}"
                        );
                    }
                }

                if (items.Count > 0)
                {
                    if (!parameters.ContainsKey(parentName))
                    {
                        parameters.Add(parentName, new List<string>());
                    }

                    parameters[parentName].Add(string.Join(delimiter, items));
                }
            }
            else if (Utilities.IsDictionary(value))
            {
                var items = new List<string>();

                foreach (var k in ((IDictionary)value).Keys)
                {
                    var key = k?.ToString();

                    if (key == null)
                    {
                        continue;
                    }

                    if (explode)
                    {
                        if (!parameters.ContainsKey(key))
                        {
                            parameters.Add(key, new List<string>());
                        }

                        parameters[key].Add(
                            Utilities.ValueToString(((IDictionary)value)[key])
                        );
                    }
                    else
                    {
                        items.Add(
                            $"{key}{delimiter}{Utilities.ValueToString(((IDictionary)value)[key])}"
                        );
                    }
                }

                if (items.Count > 0)
                {
                    if (!parameters.ContainsKey(parentName))
                    {
                        parameters.Add(parentName, new List<string>());
                    }

                    parameters[parentName].Add(string.Join(delimiter, items));
                }
            }
            else if (Utilities.IsList(value))
            {
                var values = new List<string>();
                var items = new List<string>();

                foreach (var item in (IList)value)
                {
                    if (explode)
                    {
                        values.Add(Utilities.ValueToString(item));
                    }
                    else
                    {
                        items.Add(Utilities.ValueToString(item));
                    }
                }

                if (items.Count > 0)
                {
                    values.Add(string.Join(delimiter, items));
                }

                foreach (var val in values)
                {
                    if (!parameters.ContainsKey(parentName))
                    {
                        parameters.Add(parentName, new List<string>());
                    }

                    parameters[parentName].Add(val);
                }
            }
            else
            {
                if (!parameters.ContainsKey(parentName))
                {
                    parameters.Add(parentName, new List<string>());
                }

                parameters[parentName].Add(Utilities.ValueToString(value));
            }

            return parameters;
        }

        private static Dictionary<string, List<string>> SerializeDeepObjectQueryParams(
            string parentName,
            object value
        )
        {
            var parameters = new Dictionary<string, List<string>>();

            if (Utilities.IsClass(value))
            {
                var props = value.GetType().GetProperties();

                foreach (var prop in props)
                {
                    var val = prop.GetValue(value);

                    if (val == null)
                    {
                        continue;
                    }

                    var metadata = prop.GetCustomAttribute<SpeakeasyMetadata>()?.GetQueryParamMetadata();
                    if (metadata == null || metadata.Name == null)
                    {
                        continue;
                    }

                    var keyName = $"{parentName}[{metadata.Name}]";

                    if (val != null && Utilities.IsList(val))
                    {
                        foreach (var v in (IList)val)
                        {
                            if (!parameters.ContainsKey(keyName))
                            {
                                parameters.Add(keyName, new List<string>());
                            }

                            parameters[keyName].Add(
                                Utilities.ValueToString(v)
                            );
                        }
                    }
                    else
                    {
                        if (!parameters.ContainsKey(keyName))
                        {
                            parameters.Add(keyName, new List<string>());
                        }

                        parameters[keyName].Add(Utilities.ValueToString(val));
                    }
                }
            }
            else if (Utilities.IsDictionary(value))
            {
                foreach (var key in ((IDictionary)value).Keys)
                {
                    if (key == null)
                    {
                        continue;
                    }

                    var val = ((IDictionary)value)[key];

                    var keyName = $"{parentName}[{key}]";

                    if (val != null && Utilities.IsList(val))
                    {
                        foreach (var v in (IList)val)
                        {
                            if (!parameters.ContainsKey(keyName))
                            {
                                parameters.Add(keyName, new List<string>());
                            }

                            parameters[keyName].Add(
                                Utilities.ValueToString(v)
                            );
                        }
                    }
                    else
                    {
                        if (!parameters.ContainsKey(keyName))
                        {
                            parameters.Add(keyName, new List<string>());
                        }

                        parameters[keyName].Add(Utilities.ValueToString(val));
                    }
                }
            }

            return parameters;
        }
    }
}

================
File: src/Clerk/BackendAPI/Utils/Utilities.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Utils
{
    using System;
    using System.Linq;
    using System.Net.Http.Headers;
    using System.Collections.Generic;
    using System.Text.RegularExpressions;
    using System.Numerics;
    using Newtonsoft.Json;
    using NodaTime;
    using System.Collections;

    public class Utilities
    {
        public static JsonConverter[] GetDefaultJsonSerializers()
        {
            return new JsonConverter[]
            {
                new IsoDateTimeSerializer(),
                new EnumConverter()
            };
        }

        public static JsonConverter[] GetDefaultJsonDeserializers()
        {
            return new JsonConverter[] {
                new FlexibleObjectDeserializer(),
                new EnumConverter(),
                new AnyDeserializer()
            };
        }

        public static JsonSerializerSettings GetDefaultJsonSerializerSettings()
        {
            return new JsonSerializerSettings()
            {
                NullValueHandling = NullValueHandling.Ignore,
                Converters = GetDefaultJsonSerializers()
            };
        }

        public static JsonSerializerSettings GetDefaultJsonDeserializerSettings()
        {
            return new JsonSerializerSettings()
            {
                NullValueHandling = NullValueHandling.Ignore,
                Converters = GetDefaultJsonDeserializers()
            };
        }

        public static JsonConverter[] GetJsonSerializers(Type type, string format = "")
        {
            if (format == "string")
            {
                if (type == typeof(BigInteger))
                {
                    return new JsonConverter[] { new BigIntStrConverter() };
                }

                if (type == typeof(Decimal))
                {
                    return new JsonConverter[] { new DecimalStrConverter() };
                }
            }

            return GetDefaultJsonSerializers();
        }

        public static JsonConverter[] GetJsonDeserializers(Type type)
        {
            if (type == typeof(BigInteger))
            {
                return new JsonConverter[] { new BigIntStrConverter() };
            }

            if (type == typeof(Decimal))
            {
                return new JsonConverter[] { new DecimalStrConverter() };
            }

            return GetDefaultJsonDeserializers();
        }

        public static string SerializeJSON(object obj, string format = "")
        {
            var type = obj.GetType();
            if (IsList(obj))
            {
                type = type.GetGenericArguments().Single();
            }
            else if (IsDictionary(obj))
            {
                type = type.GetGenericArguments().Last();
            }

            return JsonConvert.SerializeObject(
                obj,
                new JsonSerializerSettings()
                {
                    NullValueHandling = NullValueHandling.Ignore,
                    Converters = GetJsonSerializers(type, format)
                }
            );
        }

        public static bool IsDictionary(object? o)
        {
            if (o == null)
                return false;
            return o is IDictionary
                && o.GetType().IsGenericType
                && o.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>));
        }

        public static bool IsList(object? o)
        {
            if (o == null)
                return false;
            return o is IList
                && o.GetType().IsGenericType
                && o.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>));
        }

        public static bool IsClass(object? o)
        {
            if (o == null)
                return false;
            return o.GetType().IsClass && (o.GetType().FullName ?? "").StartsWith("Clerk.BackendAPI.Models");
        }

        // TODO: code review polyfilled for IsAssignableTo
        public static bool IsSameOrSubclass(Type potentialBase, Type potentialDescendant)
        {
            return potentialDescendant.IsSubclassOf(potentialBase)
                || potentialDescendant == potentialBase;
        }

        public static bool IsString(object? obj)
        {
            if (obj != null)
            {
                var type = obj.GetType();
                return IsSameOrSubclass(type, typeof(string));
            }
            else
            {
                return false;
            }
        }

        public static bool IsPrimitive(object? obj) => obj != null && obj.GetType().IsPrimitive;

        public static bool IsEnum(object? obj) => obj != null && obj.GetType().IsEnum;

        public static bool IsDate(object? obj) =>
            obj != null && (obj.GetType() == typeof(DateTime) || obj.GetType() == typeof(LocalDate));

        private static string StripSurroundingQuotes(string input)
        {
            Regex surroundingQuotesRegex = new Regex("^\"(.*)\"$");
            var match = surroundingQuotesRegex.Match(input);
            if(match.Groups.Values.Count() == 2)
            {
                return match.Groups.Values.Last().ToString();
            }
            return input;
        }

        public static string ValueToString(object? value)
        {
            if (value == null)
            {
                return "";
            }

            if (value.GetType() == typeof(DateTime))
            {
                return ((DateTime)value)
                    .ToUniversalTime()
                    .ToString("o", System.Globalization.CultureInfo.InvariantCulture);
            }
            else if (value.GetType() == typeof(LocalDate))
            {
                return ((LocalDate)value)
                    .ToDateTimeUnspecified()
                    .ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
            }
            else if (value.GetType() == typeof(bool))
            {
                return (bool)value ? "true" : "false";
            }
            else if (IsEnum(value))
            {
                var method = Type.GetType(value.GetType().FullName + "Extension")
                    ?.GetMethod("Value");
                if (method == null)
                {
                    return Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()))?.ToString() ?? "";
                }
                return (string)(method.Invoke(null, new[] { value }) ?? "");
            }
            else if (IsDictionary(value))
            {
                return JsonConvert.SerializeObject(value, GetDefaultJsonSerializerSettings());
            }

            return value.ToString() ?? "";
        }

        public static string ToString(object? obj)
        {
            if (obj == null)
            {
                return "";
            }

            if (IsString(obj))
            {
                return obj.ToString() ?? "";
            }

            if (IsPrimitive(obj))
            {
                return JsonConvert.SerializeObject(obj);
            }

            if (IsEnum(obj))
            {
                var attributes = obj.GetType().GetMember(obj.ToString() ?? "").First().CustomAttributes;
                if (attributes.Count() == 0)
                {
                    return JsonConvert.SerializeObject(obj);
                }

                var args = attributes.First().ConstructorArguments;
                if (args.Count() == 0)
                {
                    return JsonConvert.SerializeObject(obj);
                }
                return StripSurroundingQuotes(args.First().ToString());
            }

            if (IsDate(obj))
            {
                return StripSurroundingQuotes(
                    JsonConvert.SerializeObject(obj, GetDefaultJsonSerializerSettings())
                );
            }

            return JsonConvert.SerializeObject(obj, GetDefaultJsonSerializerSettings());
        }

        public static bool IsContentTypeMatch(string expected, string? actual)
        {
            if (actual == null)
            {
                return false;
            }

            if (expected == actual || expected == "*" || expected == "*/*")
            {
                return true;
            }

            try
            {
                var mediaType = MediaTypeHeaderValue.Parse(actual).MediaType ?? "";

                if (expected == mediaType)
                {
                    return true;
                }

                var parts = mediaType.Split('/');
                if (parts.Length == 2)
                {
                    if (parts[0] + "/*" == expected || "*/" + parts[1] == expected)
                    {
                        return true;
                    }
                }
            }
            catch (Exception) { }

            return false;
        }

        public static string PrefixBearer(string authHeaderValue)
        {
            if (authHeaderValue.StartsWith("bearer ", StringComparison.InvariantCultureIgnoreCase))
            {
                return authHeaderValue;
            }

            return $"Bearer {authHeaderValue}";
        }
        public static string RemoveSuffix(string inputString, string suffix)
        {
            if (!String.IsNullOrEmpty(suffix) && inputString.EndsWith(suffix))
            {
                return inputString.Remove(inputString.Length - suffix.Length, suffix.Length);
            }
            return inputString;
        }
        public static string TemplateUrl(string template, Dictionary<string, string> paramDict)
        {
            foreach(KeyValuePair<string, string> entry in paramDict)
            {
                template = template.Replace('{' + entry.Key + '}', entry.Value);
            }
            return template;
        }
    }
}

================
File: src/Clerk/BackendAPI/WaitlistEntries.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public interface IWaitlistEntries
    {

        /// <summary>
        /// List all waitlist entries
        /// 
        /// <remarks>
        /// Retrieve a list of waitlist entries for the instance.<br/>
        /// Entries are ordered by creation date in descending order by default.<br/>
        /// Supports filtering by email address or status and pagination with limit and offset parameters.
        /// </remarks>
        /// </summary>
        Task<ListWaitlistEntriesResponse> ListAsync(ListWaitlistEntriesRequest? request = null, RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a waitlist entry
        /// 
        /// <remarks>
        /// Creates a new waitlist entry for the given email address.<br/>
        /// If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.
        /// </remarks>
        /// </summary>
        Task<CreateWaitlistEntryResponse> CreateAsync(CreateWaitlistEntryRequestBody? request = null, RetryConfig? retryConfig = null);
    }

    public class WaitlistEntries: IWaitlistEntries
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public WaitlistEntries(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ListWaitlistEntriesResponse> ListAsync(ListWaitlistEntriesRequest? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/waitlist_entries", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ListWaitlistEntries", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<Models.Components.WaitlistEntries>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new ListWaitlistEntriesResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.WaitlistEntries = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<CreateWaitlistEntryResponse> CreateAsync(CreateWaitlistEntryRequestBody? request = null, RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/waitlist_entries";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateWaitlistEntry", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<WaitlistEntry>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new CreateWaitlistEntryResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.WaitlistEntry = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(new List<int>{400, 422}.Contains(responseStatusCode))
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: src/Clerk/BackendAPI/Webhooks.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    public interface IWebhooks
    {

        /// <summary>
        /// Create a Svix app
        /// 
        /// <remarks>
        /// Create a Svix app and associate it with the current instance
        /// </remarks>
        /// </summary>
        Task<CreateSvixAppResponse> CreateSvixAppAsync(RetryConfig? retryConfig = null);

        /// <summary>
        /// Delete a Svix app
        /// 
        /// <remarks>
        /// Delete a Svix app and disassociate it from the current instance
        /// </remarks>
        /// </summary>
        Task<DeleteSvixAppResponse> DeleteSvixAppAsync(RetryConfig? retryConfig = null);

        /// <summary>
        /// Create a Svix Dashboard URL
        /// 
        /// <remarks>
        /// Generate a new url for accessing the Svix&apos;s management dashboard for that particular instance
        /// </remarks>
        /// </summary>
        Task<GenerateSvixAuthURLResponse> GenerateSvixAuthURLAsync(RetryConfig? retryConfig = null);
    }

    public class Webhooks: IWebhooks
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.1";
        private const string _sdkGenVersion = "2.539.1";
        private const string _openapiDocVersion = "2024-10-01";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.1 2.539.1 2024-10-01 Clerk.BackendAPI";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _client;
        private Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource;

        public Webhooks(ISpeakeasyHttpClient client, Func<Clerk.BackendAPI.Models.Components.Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _client = client;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<CreateSvixAppResponse> CreateSvixAppAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/webhooks/svix";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("CreateSvixApp", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SvixURL>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new CreateSvixAppResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SvixURL = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 400)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<DeleteSvixAppResponse> DeleteSvixAppAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/webhooks/svix";

            var httpRequest = new HttpRequestMessage(HttpMethod.Delete, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("DeleteSvixApp", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 204)
            {                
                return new DeleteSvixAppResponse()
                {
                    HttpMeta = new Models.Components.HTTPMetadata()
                    {
                        Response = httpResponse,
                        Request = httpRequest
                    }
                };
            }
            else if(responseStatusCode == 400)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }

        public async Task<GenerateSvixAuthURLResponse> GenerateSvixAuthURLAsync(RetryConfig? retryConfig = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/webhooks/svix_url";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("GenerateSvixAuthURL", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 500L,
                        maxIntervalMs: 60000L,
                        maxElapsedTimeMs: 3600000L,
                        exponent: 1.5
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await _client.CloneAsync(httpRequest);
                return await _client.SendAsync(_httpRequest);
            };
            var retries = new Clerk.BackendAPI.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 400 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<SvixURL>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new GenerateSvixAuthURLResponse()
                    {
                        HttpMeta = new Models.Components.HTTPMetadata()
                        {
                            Response = httpResponse,
                            Request = httpRequest
                        }
                    };
                    response.SvixURL = obj;
                    return response;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode == 400)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<ClerkErrors>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    throw obj!;
                }

                throw new Models.Errors.SDKError("Unknown content type received", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKError("API error occurred", httpRequest, httpResponse);
            }

            throw new Models.Errors.SDKError("Unknown status code received", httpRequest, httpResponse);
        }
    }
}

================
File: tests/.gitignore
================
obj/
bin/
debug/

================
File: tests/Hooks/BeforeRequestHookTests.cs
================
using System.Net.Http;
using System.Threading.Tasks;
using Clerk.BackendAPI.Hooks;
using Xunit;

public class ClerkBeforeRequestHookTests
{
    [Fact]
    public Task BeforeRequestAsync_AddsClerkApiVersionHeader()
    {
        var hook = new ClerkBeforeRequestHook();
        var request = new HttpRequestMessage();
        var hookCtx = new BeforeRequestContext();

        var result = await hook.BeforeRequestAsync(hookCtx, request);


        Assert.True(result.Headers.Contains("Clerk-API-Version"));
        Assert.Equal("2024-10-01", result.Headers.GetValues("Clerk-API-Version").First());
    }
}

================
File: tests/JwksHelpers/AuthenticateRequestTests.cs
================
#nullable enable
namespace JwksHelpers.Tests
{
    using Clerk.BackendAPI.Helpers.Jwks;
    using Microsoft.IdentityModel.Tokens;
    using System;
    using System.Collections.Generic;
    using System.IdentityModel.Tokens.Jwt;
    using System.Net.Http;
    using System.Security.Claims;
    using System.Threading.Tasks;
    using System.Text;
    using Xunit;

    public class AuthenticateRequestTests : IClassFixture<JwksHelpersFixture>
    {
        private readonly JwksHelpersFixture _fixture;
        private readonly Uri _requestUri;

        public AuthenticateRequestTests(JwksHelpersFixture fixture)
        {
            _fixture = fixture;
            _requestUri = new Uri(_fixture.RequestUrl);
        }

        [Fact]
        public async Task TestAuthenticateRequestNoSesstionToken()
        {
            var arOptions = new AuthenticateRequestOptions(secretKey: "sk_test_SecretKey");

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, _requestUri);
            var state = await AuthenticateRequest.AuthenticateRequestAsync(request, arOptions);

            Assert.True(state.IsSignedOut());
            Assert.Equal(AuthErrorReason.SESSION_TOKEN_MISSING, state.ErrorReason);
            Assert.Null(state.Token);
            Assert.Null(state.Claims);
        }

        [Fact]
        public void TestAuthenticateRequestNoSecretKey()
        {
            var ex = Assert.Throws<AuthenticateRequestException>(
                () => new AuthenticateRequestOptions()
            );

            Assert.Equal(AuthErrorReason.SECRET_KEY_MISSING, ex.Reason);
            Assert.Null(ex.InnerException);
            Assert.Contains("Missing Clerk Secret Key.", ex.Message);
        }

        [ConditionalFact("CLERK_SECRET_KEY", "CLERK_SESSION_TOKEN")]
        public async Task TestAuthenticateRequestCookie()
        {
            var arOptions = new AuthenticateRequestOptions(
                secretKey: _fixture.SecretKey,
                audiences: _fixture.Audiences,
                authorizedParties: _fixture.AuthorizedParties
            );

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, _requestUri);
            request.Headers.Add("Cookie", $"__session={_fixture.SessionToken}");

            var state = await AuthenticateRequest.AuthenticateRequestAsync(request, arOptions);

            Utils.AssertStateAsync(state, _fixture.SessionToken);
        }

        [ConditionalFact("CLERK_SECRET_KEY", "CLERK_SESSION_TOKEN")]
        public async Task TestAuthenticateRequestBearer()
        {
            var arOptions = new AuthenticateRequestOptions(
                secretKey: _fixture.SecretKey,
                audiences: _fixture.Audiences,
                authorizedParties: _fixture.AuthorizedParties
            );

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, _requestUri);
            request.Headers.Add("Authorization", $"Bearer {_fixture.SessionToken}");

            var state = await AuthenticateRequest.AuthenticateRequestAsync(request, arOptions);

            Utils.AssertStateAsync(state, _fixture.SessionToken);
        }

        [ConditionalFact("CLERK_JWT_KEY", "CLERK_SESSION_TOKEN")]
        public async Task TestAuthenticateRequestLocal()
        {
            var arOptions = new AuthenticateRequestOptions(
                jwtKey: _fixture.JwtKey,
                audiences: _fixture.Audiences,
                authorizedParties: _fixture.AuthorizedParties
            );

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, _requestUri);
            request.Headers.Add("Authorization", $"Bearer {_fixture.SessionToken}");

            var state = await AuthenticateRequest.AuthenticateRequestAsync(request, arOptions);

            Utils.AssertStateAsync(state, _fixture.SessionToken);
        }
    }
}

================
File: tests/JwksHelpers/Utils.cs
================
#nullable enable
namespace JwksHelpers.Tests
{
    using Clerk.BackendAPI.Helpers.Jwks;
    using Microsoft.IdentityModel.Tokens;
    using System;
    using System.Collections.Generic;
    using System.IdentityModel.Tokens.Jwt;
    using System.Linq;
    using System.Security.Claims;
    using System.Security.Cryptography;
    using System.Security.Cryptography.X509Certificates;
    using System.Text;
    using System.Threading.Tasks;
    using Xunit;

    public class JwksHelpersFixture
    {
        public readonly string RequestUrl = "http://localhost:3000";

        public readonly string? SecretKey;
        public readonly string? JwtKey;
        public readonly string SessionToken;
        public readonly string? ApiUrl;
        public readonly List<string>? Audiences;
        public readonly List<string> AuthorizedParties;

        public readonly string TestToken;
        public readonly string TestJwtKey;

        public JwksHelpersFixture()
        {
            SecretKey = Environment.GetEnvironmentVariable("CLERK_SECRET_KEY");
            JwtKey = Environment.GetEnvironmentVariable("CLERK_JWT_KEY");
            ApiUrl = Environment.GetEnvironmentVariable("CLERK_API_URL");
            SessionToken = Environment.GetEnvironmentVariable("CLERK_SESSION_TOKEN") ?? "";
            Audiences = null;
            AuthorizedParties = new List<string> { RequestUrl };

            (TestToken, TestJwtKey) = Utils.GenerateTokenKeyPair(
                keyId: "ins_abcdefghijklmnopqrstuvwxyz0",
                issuedAt: DateTime.UtcNow.AddMinutes(-1),
                notBefore: DateTime.UtcNow,
                expires: DateTime.UtcNow.AddMinutes(1),
                audience: RequestUrl,
                authorizedParties: AuthorizedParties);
        }
    }

    public class ConditionalFactAttribute : FactAttribute
    {
        public ConditionalFactAttribute(params string[] envVars)
        {
            var missingEnvVars = new List<string>();
            foreach (var envVar in envVars)
            {
                if (string.IsNullOrEmpty(System.Environment.GetEnvironmentVariable(envVar)))
                {
                    missingEnvVars.Add(envVar);
                }
            }
            if (missingEnvVars.Count > 0)
            {
                Skip = $"Missing environment variable(s): {string.Join(", ", missingEnvVars)}.";
            }
        }
    }

    public class Utils
    {

        internal static void WarnTokenIsExpired(string? message = "")
        {
            System.Console.WriteLine($"WARNING: the provided session token is expired! {message}");
        }

        internal static async Task AssertClaimsAsync(string sessionToken, VerifyTokenOptions options)
        {
            bool expired = false;
            ClaimsPrincipal? claims = null;

            try
            {
                claims = await VerifyToken.VerifyTokenAsync(sessionToken, options);
            }
            catch (TokenVerificationException ex)
            {
                if (ex.Reason != TokenVerificationErrorReason.TOKEN_EXPIRED)
                {
                    throw;
                }

                Assert.IsType<SecurityTokenExpiredException>(ex.InnerException);
                Assert.Contains("Lifetime validation failed. The token is expired.", ex.InnerException.Message);
                expired = true;
                WarnTokenIsExpired();
            }

            if (!expired)
            {
                Assert.NotNull(claims);
                Assert.NotNull(claims.FindFirst("iss"));
            }
        }

        internal static void AssertStateAsync(RequestState state, string token)
        {
            if (state.IsSignedIn())
            {
                Assert.Null(state.ErrorReason);
                Assert.Equal(token, state.Token);
                Assert.NotNull(state.Claims);
            }
            else
            {
                Assert.Equal(TokenVerificationErrorReason.TOKEN_EXPIRED, state.ErrorReason);
                Assert.Null(state.Token);
                Assert.Null(state.Claims);
                WarnTokenIsExpired();
            }
        }

        internal static Tuple<string, string> GenerateTokenKeyPair(
            string? keyId = null,
            DateTime? issuedAt = null,
            DateTime? notBefore = null,
            DateTime? expires = null,
            string? audience = null,
            IEnumerable<string>? authorizedParties = null)
        {
            var rsa = RSA.Create(2048);
            var rsaSecurityKey = new RsaSecurityKey(rsa)
            {
                KeyId = keyId ?? "ins_abcdefghijklmnopqrstuvwxyz0"
            };
            var signingCredentials = new SigningCredentials(rsaSecurityKey, SecurityAlgorithms.RsaSha256);

            var subjectClaims = new List<Claim> { new Claim(ClaimTypes.Name, "Test") };
            if (authorizedParties != null)
            {
                foreach (var party in authorizedParties)
                {
                    subjectClaims.Add(new Claim("azp", party));
                }
            }

            var tokenHandler = new JwtSecurityTokenHandler();
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                SigningCredentials = signingCredentials,
                Subject = new ClaimsIdentity(subjectClaims),
                Issuer = "https://test.com",
                Audience = audience,
                IssuedAt = issuedAt ?? DateTime.UtcNow.AddMinutes(-1),
                NotBefore = notBefore ?? DateTime.UtcNow,
                Expires = expires ?? DateTime.UtcNow.AddMinutes(1)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            var tokenString = tokenHandler.WriteToken(token);

            var publicKeyBytes = rsa.ExportSubjectPublicKeyInfo();
            var pem = new StringBuilder();
            pem.AppendLine("-----BEGIN PUBLIC KEY-----");
            pem.AppendLine(Convert.ToBase64String(publicKeyBytes, Base64FormattingOptions.InsertLineBreaks));
            pem.AppendLine("-----END PUBLIC KEY-----");

            return new Tuple<string, string>(tokenString, pem.ToString());
        }
    }
}

================
File: tests/JwksHelpers/VerifyTokenTests.cs
================
#nullable enable
namespace JwksHelpers.Tests
{
    using Xunit;
    using Clerk.BackendAPI.Helpers.Jwks;
    using System;
    using System.Collections.Generic;
    using System.IdentityModel.Tokens.Jwt;
    using System.Security.Claims;
    using System.Threading.Tasks;
    using System.Text;
    using Microsoft.IdentityModel.Tokens;

    public class VerifyTokenTests : IClassFixture<JwksHelpersFixture>
    {
        private readonly JwksHelpersFixture fixture;

        public VerifyTokenTests(JwksHelpersFixture jwksHelpersFixture)
        {
            fixture = jwksHelpersFixture;
        }

        [Fact]
        public void TestVerifyTokenNoSecretKey()
        {

            var ex = Assert.Throws<TokenVerificationException>(
                () => new VerifyTokenOptions()
            );

            Assert.Equal(TokenVerificationErrorReason.SECRET_KEY_MISSING, ex.Reason);
            Assert.Contains("Missing Clerk Secret Key.", ex.ToString());
            Assert.Null(ex.InnerException);
        }

        [Fact]
        public async Task TestVerifyTokenInvalidSecretKey()
        {
            var vtOptions = new VerifyTokenOptions(secretKey: "sk_test_invalid");

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.JWK_FAILED_TO_LOAD, ex.Reason);
            Assert.Null(ex.InnerException);
        }

        [Fact]
        public async Task TestVerifyTokenInvalidJwtKey()
        {
            var (token, jwtKey) = Utils.GenerateTokenKeyPair();
            var vtOptions = new VerifyTokenOptions(jwtKey: "invalid.jwt.key");

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.JWK_LOCAL_INVALID, ex.Reason);
            Assert.IsType<System.ArgumentException>(ex.InnerException);
            Assert.Contains("No supported key formats were found.", ex.InnerException.Message);
        }

        [Fact]
        public async Task TestVerifyTokenInvalidSignature()
        {
            var vtOptions = new VerifyTokenOptions(
                jwtKey: fixture.TestJwtKey!.Replace("+", "0")  // tampering with the key
            );

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_INVALID_SIGNATURE, ex.Reason);
            Assert.IsAssignableFrom<SecurityTokenInvalidSignatureException>(ex.InnerException);
        }

        [Fact]
        public async Task TestVerifyTokenNotActiveYet()
        {
            var (token, jwtKey) = Utils.GenerateTokenKeyPair(
                notBefore: DateTime.UtcNow.AddSeconds(10)
            );

            var vtOptions = new VerifyTokenOptions(jwtKey: jwtKey);
            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(token, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_NOT_ACTIVE_YET, ex.Reason);
            Assert.IsType<SecurityTokenNotYetValidException>(ex.InnerException);
            Assert.Contains("Lifetime validation failed.", ex.InnerException.Message);
        }

        [Fact]
        public async Task TestVerifyTokenClockSkew()
        {
            var nbfDateTime = DateTime.UtcNow.AddSeconds(10);
            var nbfTimeStamp = ((DateTimeOffset)nbfDateTime).ToUnixTimeSeconds();

            var (token, jwtKey) = Utils.GenerateTokenKeyPair(
                issuedAt: DateTime.UtcNow.AddMinutes(-1),
                notBefore: nbfDateTime,
                expires: DateTime.UtcNow.AddMinutes(2)
            );

            var vtOptions = new VerifyTokenOptions(jwtKey: jwtKey, clockSkewInMs: 0);
            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(token, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_NOT_ACTIVE_YET, ex.Reason);
            Assert.IsType<SecurityTokenNotYetValidException>(ex.InnerException);

            vtOptions = new VerifyTokenOptions(jwtKey: jwtKey, clockSkewInMs: 10000);
            var claims = await VerifyToken.VerifyTokenAsync(token, vtOptions);
            var nbfClaim = claims.FindFirst("nbf");
            Assert.NotNull(nbfClaim);
            Assert.Equal(nbfTimeStamp.ToString(), nbfClaim.Value);
        }

        [Fact]
        public async Task TestVerifyTokenExpired()
        {
            var (token, jwtKey) = Utils.GenerateTokenKeyPair(
                issuedAt: DateTime.UtcNow.AddMinutes(-3),
                notBefore: DateTime.UtcNow.AddMinutes(-2),
                expires: DateTime.UtcNow.AddMinutes(-1)
            );

            var vtOptions = new VerifyTokenOptions(jwtKey: jwtKey);
            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(token, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_EXPIRED, ex.Reason);
            Assert.IsType<SecurityTokenExpiredException>(ex.InnerException);
            Assert.Contains("Lifetime validation failed.", ex.InnerException.Message);
        }

        [Fact]
        public async Task TestVerifyTokenIssuedInTheFuture()
        {
            var (token, jwtKey) = Utils.GenerateTokenKeyPair(
                issuedAt: DateTime.UtcNow.AddMinutes(1),
                notBefore: DateTime.UtcNow.AddMinutes(-1),
                expires: DateTime.UtcNow.AddMinutes(2)
            );

            var vtOptions = new VerifyTokenOptions(jwtKey: jwtKey);
            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(token, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_IAT_IN_THE_FUTURE, ex.Reason);
            Assert.Null(ex.InnerException);
        }

        [Fact]
        public async Task TestVerifyTokenInvalidAudience()
        {
            var vtOptions = new VerifyTokenOptions(
                jwtKey: fixture.TestJwtKey,
                audiences: new string[] { fixture.RequestUrl }
            );

            var claims = await VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions);
            var audClaim = claims.FindFirst("aud");
            Assert.NotNull(audClaim);
            Assert.Equal(fixture.RequestUrl, audClaim.Value);


            vtOptions = new VerifyTokenOptions(
                jwtKey: fixture.TestJwtKey,
                audiences: new List<string> { "invalid.audience" }
            );

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_INVALID_AUDIENCE, ex.Reason);
            Assert.IsType<SecurityTokenInvalidAudienceException>(ex.InnerException);
            Assert.Contains("Audience validation failed.", ex.InnerException.Message);
        }

        [Fact]
        public async Task TestVerifyTokenInvalidAuthorizedParties()
        {
            var vtOptions = new VerifyTokenOptions(
                jwtKey: fixture.TestJwtKey,
                authorizedParties: fixture.AuthorizedParties
            );

            var claims = await VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions);
            var azpClaim = claims.FindFirst("azp");
            Assert.NotNull(azpClaim);
            Assert.Contains(azpClaim.Value, fixture.AuthorizedParties);

            vtOptions = new VerifyTokenOptions(
                jwtKey: fixture.TestJwtKey,
                authorizedParties: new string[] { "http://only.authorized.party" }
            );

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(fixture.TestToken, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_INVALID_AUTHORIZED_PARTIES, ex.Reason);
            Assert.Null(ex.InnerException);

        }

        [ConditionalFact("CLERK_SECRET_KEY")]
        public async Task TestVerifyTokenInvalidToken()
        {
            var vtOptions = new VerifyTokenOptions(secretKey: fixture.SecretKey);

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync("invalid.session.token", vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.TOKEN_INVALID, ex.Reason);
            Assert.IsType<ArgumentException>(ex.InnerException);
            Assert.Contains("IDX12729: Unable to decode the header", ex.InnerException.Message);
        }


        [ConditionalFact("CLERK_SECRET_KEY")]
        public async Task TestVerifyTokenInvalidKid()
        {
            var token = Utils.GenerateTokenKeyPair().Item1;

            var vtOptions = new VerifyTokenOptions(secretKey: fixture.SecretKey);

            var ex = await Assert.ThrowsAsync<TokenVerificationException>(
                () => VerifyToken.VerifyTokenAsync(token, vtOptions)
            );

            Assert.Equal(TokenVerificationErrorReason.JWK_KID_MISMATCH, ex.Reason);
            Assert.Null(ex.InnerException);
        }

        [ConditionalFact("CLERK_SECRET_KEY", "CLERK_SESSION_TOKEN")]
        public async Task TestVerifyTokenRemoteOk()
        {
            var vtOptions = new VerifyTokenOptions(
                secretKey: fixture.SecretKey,
                audiences: fixture.Audiences,
                authorizedParties: fixture.AuthorizedParties,
                apiUrl: fixture.ApiUrl
            );

            await Utils.AssertClaimsAsync(fixture.SessionToken, vtOptions);
        }

        [ConditionalFact("CLERK_JWT_KEY", "CLERK_SESSION_TOKEN")]
        public async Task TestVerifyTokenLocalOk()
        {
            var vtOptions = new VerifyTokenOptions(
                jwtKey: fixture.JwtKey,
                audiences: fixture.Audiences,
                authorizedParties: fixture.AuthorizedParties,
                apiUrl: fixture.ApiUrl
            );

            await Utils.AssertClaimsAsync(fixture.SessionToken, vtOptions);
        }

    }
}

================
File: tests/Tests.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.2.0" />
    <PackageReference Include="newtonsoft.json" Version="13.0.3" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.11.1" />
    <PackageReference Include="xunit" Version="2.9.2" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.8.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\src\Clerk\BackendAPI\Clerk.BackendAPI.csproj" />
  </ItemGroup>

</Project>

================
File: USAGE.md
================
<!-- Start SDK Example Usage [usage] -->
```csharp
using Clerk.BackendAPI;
using Clerk.BackendAPI.Models.Operations;

var sdk = new ClerkBackendApi();

GetPublicInterstitialRequest req = new GetPublicInterstitialRequest() {
    FrontendApiQueryParameter1 = "pub_1a2b3c4d",
};

var res = await sdk.Miscellaneous.GetPublicInterstitialAsync(req);

// handle response
```
<!-- End SDK Example Usage [usage] -->



================================================================
End of Codebase
================================================================
